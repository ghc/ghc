.. _release-9-14-1:

Version 9.14.1
==============

The significant changes to the various parts of the compiler are listed in the
following sections. See the `migration guide
<https://gitlab.haskell.org/ghc/ghc/-/wikis/migration/9.14>`_ on the GHC Wiki
for specific guidance on migrating programs to this release.

Language
~~~~~~~~

* ``-Wincomplete-record-selectors`` is now part of `-Wall`, as specified
  by `GHC Proposal 516: add warning for incomplete record selectors <https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0516-incomplete-record-selectors.rst>`_.
  Hence, if a library is compiled with ``-Werror``, compilation may now fail. Solution: fix the library.
  Workaround: add ``-Werror=no-incomplete-record-selectors``.

  Note that this warning is at least
  as serious as a warning about missing patterns from a function definition, perhaps even
  more so, since it is invisible in the source program.

* The combination of :extension:`ScopedTypeVariables` and :extension:`TypeApplications`
  no longer enables type applications in patterns, which now always requires
  :extension:`TypeAbstractions`. The warning flag``deprecated-type-abstractions``
  has also been removed from the compiler.

* :extension:`OverloadedRecordUpdate` now passes the arguments to a ``setField`` function
  in the flipped order, as specified by `GHC Proposal 583: HasField redesign <https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0583-hasfield-redesign.rst>`_.

  Previously GHC expected ``setField`` to have this type: ::

    setField :: forall (fld :: Symbol) a r. r -> a -> r

  And that's what GHC expects now: ::

    setField :: forall (fld :: Symbol) a r. a -> r -> r

  That will break the combination of :extension:`OverloadedRecordUpdate` with :extension:`RebindableSyntax`.

* Multiline strings are now accepted in foreign imports. (#25157)

Compiler
~~~~~~~~

- An improved error message is introduced to refer users to the heap-controlling flags of the RTS when there is a heap overflow during compilation. (#25198)

GHCi
~~~~

- :ghci-cmd:`:info` now outputs type declarations with @-binders that are
  considered semantically significant. See the documentation for :ghci-cmd:`:info`
  itself for a more detailed explanation.

- GHCi errors and warnings now have their own numeric error codes that are
  displayed alongside the error.

Runtime system
~~~~~~~~~~~~~~

- Add new runtime flag :rts-flag:`--optimistic-linking` which instructs the
  runtime linker to continue in the presence of unknown symbols. By default this
  flag is not passed, preserving previous behavior.

Cmm
~~~

``base`` library
~~~~~~~~~~~~~~~~

``ghc-prim`` library
~~~~~~~~~~~~~~~~~~~~

``ghc`` library
~~~~~~~~~~~~~~~

* The `UnknownDiagnostic` constructor now takes an additional type argument
  for the type of hints corresponding to the diagnostic, and an additional
  value-level argument used for existential wrapping of the hints of the inner
  diagnostic.

* Changes to the HPT and HUG interface:

  - `addToHpt` and `addListToHPT` were moved from `GHC.Unit.Home.ModInfo` to `GHC.Unit.Home.PackageTable` and deprecated in favour of `addHomeModInfoToHpt` and `addHomeModInfosToHpt`.
  - `UnitEnvGraph` and operations `unitEnv_lookup_maybe`, `unitEnv_foldWithKey, `unitEnv_singleton`, `unitEnv_adjust`, `unitEnv_insert`, `unitEnv_new` were moved from `GHC.Unit.Env` to `GHC.Unit.Home.Graph`.
  - The HomePackageTable (HPT) is now exported from `GHC.Unit.Home.PackageTable`,
    and is now backed by an IORef to avoid by construction very bad memory leaks.
    This means the API to the HPT now is for the most part in IO. For instance,
    `emptyHomePackageTable` and `addHomeModInfoToHpt` are now in IO.
  - `mkHomeUnitEnv` was moved to `GHC.Unit.Home.PackageTable`, and now takes two
    extra explicit arguments. To restore previous behaviour, pass `emptyUnitState`
    and `Nothing` as the first two arguments additionally.
  - `hugElts` was removed. Users should prefer `allUnits` to get the keys of the
    HUG (the typical use case), or `traverse` or `unitEnv_foldWithKey` in other
    cases.

``ghc-heap`` library
~~~~~~~~~~~~~~~~~~~~

* The functions `getClosureInfoTbl_maybe`, `getClosureInfoTbl`,
  `getClosurePtrArgs` and `getClosurePtrArgs_maybe` have been added to allow
  reading of the relevant Closure attributes without reliance on incomplete
  selectors.

``ghc-experimental`` library
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- ``ghc-experimental`` now exposes ``GHC.RTS.Flags`` and ``GHC.Stats`` as
  ``GHC.RTS.Flags.Experimental`` and ``GHC.Stats.Experimental``. These are
  *also* exposed in ``base``, however the ``base`` versions will be deprecated as
  part of the split base project. See `CLC proposal 289
  <https://github.com/haskell/core-libraries-committee/issues/289>`__.
  Downstream consumers of these flags are encouraged to migrate to the
  ``ghc-experimental`` versions.



``template-haskell`` library
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Included libraries
~~~~~~~~~~~~~~~~~~

The package database provided with this distribution also contains a number of
packages other than GHC itself. See the changelogs provided with these packages
for further change information.

.. ghc-package-list::

    libraries/array/array.cabal:                         Dependency of ``ghc`` library
    libraries/base/base.cabal:                           Core library
    libraries/binary/binary.cabal:                       Dependency of ``ghc`` library
    libraries/bytestring/bytestring.cabal:               Dependency of ``ghc`` library
    libraries/Cabal/Cabal/Cabal.cabal:                   Dependency of ``ghc-pkg`` utility
    libraries/Cabal/Cabal-syntax/Cabal-syntax.cabal:     Dependency of ``ghc-pkg`` utility
    libraries/containers/containers/containers.cabal:    Dependency of ``ghc`` library
    libraries/deepseq/deepseq.cabal:                     Dependency of ``ghc`` library
    libraries/directory/directory.cabal:                 Dependency of ``ghc`` library
    libraries/exceptions/exceptions.cabal:               Dependency of ``ghc`` and ``haskeline`` library
    libraries/filepath/filepath.cabal:                   Dependency of ``ghc`` library
    compiler/ghc.cabal:                                  The compiler itself
    libraries/ghci/ghci.cabal:                           The REPL interface
    libraries/ghc-boot/ghc-boot.cabal:                   Internal compiler library
    libraries/ghc-boot-th/ghc-boot-th.cabal:             Internal compiler library
    libraries/ghc-compact/ghc-compact.cabal:             Core library
    libraries/ghc-heap/ghc-heap.cabal:                   GHC heap-walking library
    libraries/ghc-prim/ghc-prim.cabal:                   Core library
    utils/haddock/haddock-api/haddock-api.cabal:         Dependency of ``haddock`` executable
    utils/haddock/haddock-library/haddock-library.cabal: Dependency of ``haddock`` executable
    libraries/haskeline/haskeline.cabal:                 Dependency of ``ghci`` executable
    libraries/hpc/hpc.cabal:                             Dependency of ``hpc`` executable
    libraries/integer-gmp/integer-gmp.cabal:             Core library
    libraries/mtl/mtl.cabal:                             Dependency of ``Cabal`` library
    libraries/parsec/parsec.cabal:                       Dependency of ``Cabal`` library
    libraries/pretty/pretty.cabal:                       Dependency of ``ghc`` library
    libraries/process/process.cabal:                     Dependency of ``ghc`` library
    libraries/stm/stm.cabal:                             Dependency of ``haskeline`` library
    libraries/template-haskell/template-haskell.cabal:   Core library
    libraries/terminfo/terminfo.cabal:                   Dependency of ``haskeline`` library
    libraries/text/text.cabal:                           Dependency of ``Cabal`` library
    libraries/time/time.cabal:                           Dependency of ``ghc`` library
    libraries/transformers/transformers.cabal:           Dependency of ``ghc`` library
    libraries/unix/unix.cabal:                           Dependency of ``ghc`` library
    libraries/Win32/Win32.cabal:                         Dependency of ``ghc`` library
    libraries/xhtml/xhtml.cabal:                         Dependency of ``haddock`` executable
    libraries/os-string/os-string.cabal:                 Dependency of ``filepath`` library
    libraries/file-io/file-io.cabal:                     Dependency of ``directory`` library
