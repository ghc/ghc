TYPE CONSTRUCTORS
  data type T1{1} :: * -> *
  data type T2{1} :: * -> *
    roles phantom
DATA CONSTRUCTORS
  K2 :: forall a. FunPtr a -> T2 a
  K1 :: forall a. IO a -> T1 a
Dependent modules: []
Dependent packages: [base-4.12.0.0, ghc-prim-0.5.3,
                     integer-gmp-1.0.2.0]

==================== Typechecker ====================
Roles2.$tcT2
  = GHC.Types.TyCon
      9065817229114433861##
      13399581642971864140##
      Roles2.$trModule
      (GHC.Types.TrNameS "T2"#)
      0
      GHC.Types.krep$*Arr*
Roles2.$tc'K2
  = GHC.Types.TyCon
      17395957229042313563##
      12263882107019815181##
      Roles2.$trModule
      (GHC.Types.TrNameS "'K2"#)
      1
      $krep
Roles2.$tcT1
  = GHC.Types.TyCon
      10310640733256438505##
      9162099558816022096##
      Roles2.$trModule
      (GHC.Types.TrNameS "T1"#)
      0
      GHC.Types.krep$*Arr*
Roles2.$tc'K1
  = GHC.Types.TyCon
      16530009231990968394##
      11761390951471299534##
      Roles2.$trModule
      (GHC.Types.TrNameS "'K1"#)
      1
      $krep
$krep [InlPrag=NOUSERINLINE[~]] = GHC.Types.KindRepVar 0
$krep [InlPrag=NOUSERINLINE[~]] = GHC.Types.KindRepFun $krep $krep
$krep [InlPrag=NOUSERINLINE[~]] = GHC.Types.KindRepFun $krep $krep
$krep [InlPrag=NOUSERINLINE[~]]
  = GHC.Types.KindRepTyConApp GHC.Ptr.$tcFunPtr ((:) $krep [])
$krep [InlPrag=NOUSERINLINE[~]]
  = GHC.Types.KindRepTyConApp Roles2.$tcT2 ((:) $krep [])
$krep [InlPrag=NOUSERINLINE[~]]
  = GHC.Types.KindRepTyConApp GHC.Types.$tcIO ((:) $krep [])
$krep [InlPrag=NOUSERINLINE[~]]
  = GHC.Types.KindRepTyConApp Roles2.$tcT1 ((:) $krep [])
Roles2.$trModule
  = GHC.Types.Module
      (GHC.Types.TrNameS "main"#) (GHC.Types.TrNameS "Roles2"#)

