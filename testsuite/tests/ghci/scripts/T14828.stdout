foldl :: Foldable t => (b -> a -> b) -> b -> t a -> b
foldl = <_ :: forall (t :: * -> *) b a.
              Foldable t =>
              (b -> a -> b) -> b -> t a -> b>
fmap :: Functor f => (a -> b) -> f a -> f b
fmap = <_ :: forall (f :: * -> *) a b.
             Functor f =>
             (a -> b) -> f a -> f b>
return :: Monad m => a -> m a
return = <_ :: forall (m :: * -> *) a. Monad m => a -> m a>
pure :: Applicative f => a -> f a
pure = <_ :: forall (f :: * -> *) a. Applicative f => a -> f a>
mempty = <_ :: forall a. Monoid a => a>
mappend = <_ :: forall a. Monoid a => a -> a -> a>
foldl' = <_ :: forall (t :: * -> *) b a.
               Foldable t =>
               (b -> a -> b) -> b -> t a -> b>
f = <_ :: forall b. (forall a. a -> a) -> b -> b>
