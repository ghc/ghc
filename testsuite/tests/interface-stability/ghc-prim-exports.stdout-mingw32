
module GHC.CString where
  -- Safety: None
  cstringLength# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int#
  unpackAppendCString# :: GHC.Internal.Prim.Addr# -> [GHC.Internal.Types.Char] -> [GHC.Internal.Types.Char]
  unpackAppendCStringUtf8# :: GHC.Internal.Prim.Addr# -> [GHC.Internal.Types.Char] -> [GHC.Internal.Types.Char]
  unpackCString# :: GHC.Internal.Prim.Addr# -> [GHC.Internal.Types.Char]
  unpackCStringUtf8# :: GHC.Internal.Prim.Addr# -> [GHC.Internal.Types.Char]
  unpackFoldrCString# :: forall a. GHC.Internal.Prim.Addr# -> (GHC.Internal.Types.Char -> a -> a) -> a -> a
  unpackFoldrCStringUtf8# :: forall a. GHC.Internal.Prim.Addr# -> (GHC.Internal.Types.Char -> a -> a) -> a -> a
  unpackNBytes# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> [GHC.Internal.Types.Char]

module GHC.Classes where
  -- Safety: Trustworthy
  (&&) :: GHC.Internal.Types.Bool -> GHC.Internal.Types.Bool -> GHC.Internal.Types.Bool
  type CSolo :: Constraint -> Constraint
  class a => CSolo a
    {-# MINIMAL #-}
  type CTuple0 :: Constraint
  type CTuple0 = () :: Constraint
  type CTuple1 :: Constraint -> Constraint
  type CTuple1 = CSolo
  type CTuple10 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j) => CTuple10 a b c d e f g h i j
    {-# MINIMAL #-}
  type CTuple11 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k) => CTuple11 a b c d e f g h i j k
    {-# MINIMAL #-}
  type CTuple12 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l) => CTuple12 a b c d e f g h i j k l
    {-# MINIMAL #-}
  type CTuple13 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m) => CTuple13 a b c d e f g h i j k l m
    {-# MINIMAL #-}
  type CTuple14 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n) => CTuple14 a b c d e f g h i j k l m n
    {-# MINIMAL #-}
  type CTuple15 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) => CTuple15 a b c d e f g h i j k l m n o
    {-# MINIMAL #-}
  type CTuple16 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) => CTuple16 a b c d e f g h i j k l m n o p
    {-# MINIMAL #-}
  type CTuple17 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) => CTuple17 a b c d e f g h i j k l m n o p q
    {-# MINIMAL #-}
  type CTuple18 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) => CTuple18 a b c d e f g h i j k l m n o p q r
    {-# MINIMAL #-}
  type CTuple19 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) => CTuple19 a b c d e f g h i j k l m n o p q r s
    {-# MINIMAL #-}
  type CTuple2 :: Constraint -> Constraint -> Constraint
  class (a, b) => CTuple2 a b
    {-# MINIMAL #-}
  type CTuple20 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) => CTuple20 a b c d e f g h i j k l m n o p q r s t
    {-# MINIMAL #-}
  type CTuple21 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u) => CTuple21 a b c d e f g h i j k l m n o p q r s t u
    {-# MINIMAL #-}
  type CTuple22 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v) => CTuple22 a b c d e f g h i j k l m n o p q r s t u v
    {-# MINIMAL #-}
  type CTuple23 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w) => CTuple23 a b c d e f g h i j k l m n o p q r s t u v w
    {-# MINIMAL #-}
  type CTuple24 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x) => CTuple24 a b c d e f g h i j k l m n o p q r s t u v w x
    {-# MINIMAL #-}
  type CTuple25 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y) => CTuple25 a b c d e f g h i j k l m n o p q r s t u v w x y
    {-# MINIMAL #-}
  type CTuple26 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z) => CTuple26 a b c d e f g h i j k l m n o p q r s t u v w x y z
    {-# MINIMAL #-}
  type CTuple27 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26) => CTuple27 a b c d e f g h i j k l m n o p q r s t u v w x y z t26
    {-# MINIMAL #-}
  type CTuple28 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27) => CTuple28 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27
    {-# MINIMAL #-}
  type CTuple29 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28) => CTuple29 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28
    {-# MINIMAL #-}
  type CTuple3 :: Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c) => CTuple3 a b c
    {-# MINIMAL #-}
  type CTuple30 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29) => CTuple30 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29
    {-# MINIMAL #-}
  type CTuple31 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30) => CTuple31 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30
    {-# MINIMAL #-}
  type CTuple32 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31) => CTuple32 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31
    {-# MINIMAL #-}
  type CTuple33 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32) => CTuple33 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32
    {-# MINIMAL #-}
  type CTuple34 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33) => CTuple34 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33
    {-# MINIMAL #-}
  type CTuple35 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34) => CTuple35 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34
    {-# MINIMAL #-}
  type CTuple36 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35) => CTuple36 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35
    {-# MINIMAL #-}
  type CTuple37 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36) => CTuple37 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36
    {-# MINIMAL #-}
  type CTuple38 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37) => CTuple38 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37
    {-# MINIMAL #-}
  type CTuple39 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38) => CTuple39 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38
    {-# MINIMAL #-}
  type CTuple4 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d) => CTuple4 a b c d
    {-# MINIMAL #-}
  type CTuple40 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39) => CTuple40 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39
    {-# MINIMAL #-}
  type CTuple41 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40) => CTuple41 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40
    {-# MINIMAL #-}
  type CTuple42 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41) => CTuple42 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41
    {-# MINIMAL #-}
  type CTuple43 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42) => CTuple43 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42
    {-# MINIMAL #-}
  type CTuple44 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43) => CTuple44 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43
    {-# MINIMAL #-}
  type CTuple45 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44) => CTuple45 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44
    {-# MINIMAL #-}
  type CTuple46 :: Constraint
                   -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45) => CTuple46 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45
    {-# MINIMAL #-}
  type CTuple47 :: Constraint
                   -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46) => CTuple47 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46
    {-# MINIMAL #-}
  type CTuple48 :: Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47) => CTuple48 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47
    {-# MINIMAL #-}
  type CTuple49 :: Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48) => CTuple49 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48
    {-# MINIMAL #-}
  type CTuple5 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e) => CTuple5 a b c d e
    {-# MINIMAL #-}
  type CTuple50 :: Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49) => CTuple50 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49
    {-# MINIMAL #-}
  type CTuple51 :: Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50) => CTuple51 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50
    {-# MINIMAL #-}
  type CTuple52 :: Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51) => CTuple52 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51
    {-# MINIMAL #-}
  type CTuple53 :: Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52) => CTuple53 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52
    {-# MINIMAL #-}
  type CTuple54 :: Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53) => CTuple54 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53
    {-# MINIMAL #-}
  type CTuple55 :: Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54) => CTuple55 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54
    {-# MINIMAL #-}
  type CTuple56 :: Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55) => CTuple56 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55
    {-# MINIMAL #-}
  type CTuple57 :: Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56) => CTuple57 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56
    {-# MINIMAL #-}
  type CTuple58 :: Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57) => CTuple58 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57
    {-# MINIMAL #-}
  type CTuple59 :: Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58) => CTuple59 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58
    {-# MINIMAL #-}
  type CTuple6 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f) => CTuple6 a b c d e f
    {-# MINIMAL #-}
  type CTuple60 :: Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59) => CTuple60 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59
    {-# MINIMAL #-}
  type CTuple61 :: Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60) => CTuple61 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 t60
    {-# MINIMAL #-}
  type CTuple62 :: Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60, t61) => CTuple62 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 t60 t61
    {-# MINIMAL #-}
  type CTuple63 :: Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60, t61, t62) => CTuple63 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 t60 t61 t62
    {-# MINIMAL #-}
  type CTuple64 :: Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
                   -> Constraint
  class (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60, t61, t62, t63) => CTuple64 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 t60 t61 t62 t63
    {-# MINIMAL #-}
  type CTuple7 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g) => CTuple7 a b c d e f g
    {-# MINIMAL #-}
  type CTuple8 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h) => CTuple8 a b c d e f g h
    {-# MINIMAL #-}
  type CTuple9 :: Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint -> Constraint
  class (a, b, c, d, e, f, g, h, i) => CTuple9 a b c d e f g h i
    {-# MINIMAL #-}
  type CUnit :: Constraint
  class CUnit
    {-# MINIMAL #-}
  type Eq :: * -> Constraint
  class Eq a where
    (==) :: a -> a -> GHC.Internal.Types.Bool
    (/=) :: a -> a -> GHC.Internal.Types.Bool
    {-# MINIMAL (==) | (/=) #-}
  type IP :: GHC.Internal.Types.Symbol -> * -> Constraint
  class IP x a | x -> a where
    ip :: a
    {-# MINIMAL ip #-}
  type Ord :: * -> Constraint
  class Eq a => Ord a where
    compare :: a -> a -> GHC.Internal.Types.Ordering
    (<) :: a -> a -> GHC.Internal.Types.Bool
    (<=) :: a -> a -> GHC.Internal.Types.Bool
    (>) :: a -> a -> GHC.Internal.Types.Bool
    (>=) :: a -> a -> GHC.Internal.Types.Bool
    max :: a -> a -> a
    min :: a -> a -> a
    {-# MINIMAL compare | (<=) #-}
  compareInt :: GHC.Internal.Types.Int -> GHC.Internal.Types.Int -> GHC.Internal.Types.Ordering
  compareInt# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Types.Ordering
  compareWord :: GHC.Internal.Types.Word -> GHC.Internal.Types.Word -> GHC.Internal.Types.Ordering
  compareWord# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Types.Ordering
  divInt# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  divInt16# :: GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int16#
  divInt32# :: GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int32#
  divInt8# :: GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int8#
  divModInt# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> (# GHC.Internal.Prim.Int#, GHC.Internal.Prim.Int# #)
  divModInt16# :: GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int16# -> (# GHC.Internal.Prim.Int16#, GHC.Internal.Prim.Int16# #)
  divModInt32# :: GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int32# -> (# GHC.Internal.Prim.Int32#, GHC.Internal.Prim.Int32# #)
  divModInt8# :: GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int8# -> (# GHC.Internal.Prim.Int8#, GHC.Internal.Prim.Int8# #)
  eqChar :: GHC.Internal.Types.Char -> GHC.Internal.Types.Char -> GHC.Internal.Types.Bool
  eqDouble :: GHC.Internal.Types.Double -> GHC.Internal.Types.Double -> GHC.Internal.Types.Bool
  eqFloat :: GHC.Internal.Types.Float -> GHC.Internal.Types.Float -> GHC.Internal.Types.Bool
  eqInt :: GHC.Internal.Types.Int -> GHC.Internal.Types.Int -> GHC.Internal.Types.Bool
  eqWord :: GHC.Internal.Types.Word -> GHC.Internal.Types.Word -> GHC.Internal.Types.Bool
  geInt :: GHC.Internal.Types.Int -> GHC.Internal.Types.Int -> GHC.Internal.Types.Bool
  geWord :: GHC.Internal.Types.Word -> GHC.Internal.Types.Word -> GHC.Internal.Types.Bool
  gtInt :: GHC.Internal.Types.Int -> GHC.Internal.Types.Int -> GHC.Internal.Types.Bool
  gtWord :: GHC.Internal.Types.Word -> GHC.Internal.Types.Word -> GHC.Internal.Types.Bool
  leInt :: GHC.Internal.Types.Int -> GHC.Internal.Types.Int -> GHC.Internal.Types.Bool
  leWord :: GHC.Internal.Types.Word -> GHC.Internal.Types.Word -> GHC.Internal.Types.Bool
  ltInt :: GHC.Internal.Types.Int -> GHC.Internal.Types.Int -> GHC.Internal.Types.Bool
  ltWord :: GHC.Internal.Types.Word -> GHC.Internal.Types.Word -> GHC.Internal.Types.Bool
  modInt# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  modInt16# :: GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int16#
  modInt32# :: GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int32#
  modInt8# :: GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int8#
  neChar :: GHC.Internal.Types.Char -> GHC.Internal.Types.Char -> GHC.Internal.Types.Bool
  neInt :: GHC.Internal.Types.Int -> GHC.Internal.Types.Int -> GHC.Internal.Types.Bool
  neWord :: GHC.Internal.Types.Word -> GHC.Internal.Types.Word -> GHC.Internal.Types.Bool
  not :: GHC.Internal.Types.Bool -> GHC.Internal.Types.Bool
  (||) :: GHC.Internal.Types.Bool -> GHC.Internal.Types.Bool -> GHC.Internal.Types.Bool

module GHC.Debug where
  -- Safety: Trustworthy
  debugErrLn :: [GHC.Internal.Types.Char] -> GHC.Internal.Types.IO ()
  debugLn :: [GHC.Internal.Types.Char] -> GHC.Internal.Types.IO ()

module GHC.Magic where
  -- Safety: Trustworthy
  type DataToTag :: forall {lev :: GHC.Internal.Types.Levity}. TYPE (GHC.Internal.Types.BoxedRep lev) -> Constraint
  class DataToTag a where
    dataToTag# :: a -> GHC.Internal.Prim.Int#
    {-# MINIMAL dataToTag# #-}
  inline :: forall a. a -> a
  lazy :: forall a. a -> a
  noinline :: forall a. a -> a
  oneShot :: forall {q :: GHC.Internal.Types.RuntimeRep} {r :: GHC.Internal.Types.RuntimeRep} (a :: TYPE q) (b :: TYPE r). (a -> b) -> a -> b
  runRW# :: forall (r :: GHC.Internal.Types.RuntimeRep) (o :: TYPE r). (GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> o) -> o

module GHC.Magic.Dict where
  -- Safety: Unsafe
  type WithDict :: Constraint -> * -> Constraint
  class WithDict cls meth where
    withDict :: forall {rr :: GHC.Internal.Types.RuntimeRep} (r :: TYPE rr). meth -> (cls => r) -> r
    {-# MINIMAL withDict #-}

module GHC.Prim where
  -- Safety: None
  (*#) :: Int# -> Int# -> Int#
  (*##) :: Double# -> Double# -> Double#
  (**##) :: Double# -> Double# -> Double#
  (+#) :: Int# -> Int# -> Int#
  (+##) :: Double# -> Double# -> Double#
  (-#) :: Int# -> Int# -> Int#
  (-##) :: Double# -> Double# -> Double#
  (/##) :: Double# -> Double# -> Double#
  (/=#) :: Int# -> Int# -> Int#
  (/=##) :: Double# -> Double# -> Int#
  (<#) :: Int# -> Int# -> Int#
  (<##) :: Double# -> Double# -> Int#
  (<=#) :: Int# -> Int# -> Int#
  (<=##) :: Double# -> Double# -> Int#
  (==#) :: Int# -> Int# -> Int#
  (==##) :: Double# -> Double# -> Int#
  (>#) :: Int# -> Int# -> Int#
  (>##) :: Double# -> Double# -> Int#
  (>=#) :: Int# -> Int# -> Int#
  (>=##) :: Double# -> Double# -> Int#
  type Addr# :: TYPE GHC.Internal.Types.AddrRep
  data Addr#
  type Array# :: forall {l :: GHC.Internal.Types.Levity}. TYPE (GHC.Internal.Types.BoxedRep l) -> GHC.Internal.Types.UnliftedType
  data Array# a
  type BCO :: *
  data BCO
  type ByteArray# :: GHC.Internal.Types.UnliftedType
  data ByteArray#
  type role CONSTRAINT nominal
  type CONSTRAINT :: GHC.Internal.Types.RuntimeRep -> *
  data CONSTRAINT a
  type Char# :: TYPE GHC.Internal.Types.WordRep
  data Char#
  type Compact# :: GHC.Internal.Types.UnliftedType
  data Compact#
  type Double# :: TYPE GHC.Internal.Types.DoubleRep
  data Double#
  type DoubleX2# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec2 GHC.Internal.Types.DoubleElemRep)
  data DoubleX2#
  type DoubleX4# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec4 GHC.Internal.Types.DoubleElemRep)
  data DoubleX4#
  type DoubleX8# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec8 GHC.Internal.Types.DoubleElemRep)
  data DoubleX8#
  type role FUN nominal representational representational
  type FUN :: forall (n :: GHC.Internal.Types.Multiplicity) -> forall {q :: GHC.Internal.Types.RuntimeRep} {r :: GHC.Internal.Types.RuntimeRep}. TYPE q -> TYPE r -> *
  data FUN n a b
  type Float# :: TYPE GHC.Internal.Types.FloatRep
  data Float#
  type FloatX16# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec16 GHC.Internal.Types.FloatElemRep)
  data FloatX16#
  type FloatX4# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec4 GHC.Internal.Types.FloatElemRep)
  data FloatX4#
  type FloatX8# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec8 GHC.Internal.Types.FloatElemRep)
  data FloatX8#
  type role IOPort# nominal representational
  type IOPort# :: forall {l :: GHC.Internal.Types.Levity}. * -> TYPE (GHC.Internal.Types.BoxedRep l) -> GHC.Internal.Types.UnliftedType
  data IOPort# a b
  type Int# :: TYPE GHC.Internal.Types.IntRep
  data Int#
  type Int16# :: TYPE GHC.Internal.Types.Int16Rep
  data Int16#
  type Int16X16# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec16 GHC.Internal.Types.Int16ElemRep)
  data Int16X16#
  type Int16X32# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec32 GHC.Internal.Types.Int16ElemRep)
  data Int16X32#
  type Int16X8# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec8 GHC.Internal.Types.Int16ElemRep)
  data Int16X8#
  type Int32# :: TYPE GHC.Internal.Types.Int32Rep
  data Int32#
  type Int32X16# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec16 GHC.Internal.Types.Int32ElemRep)
  data Int32X16#
  type Int32X4# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec4 GHC.Internal.Types.Int32ElemRep)
  data Int32X4#
  type Int32X8# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec8 GHC.Internal.Types.Int32ElemRep)
  data Int32X8#
  type Int64# :: TYPE GHC.Internal.Types.Int64Rep
  data Int64#
  type Int64X2# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec2 GHC.Internal.Types.Int64ElemRep)
  data Int64X2#
  type Int64X4# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec4 GHC.Internal.Types.Int64ElemRep)
  data Int64X4#
  type Int64X8# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec8 GHC.Internal.Types.Int64ElemRep)
  data Int64X8#
  type Int8# :: TYPE GHC.Internal.Types.Int8Rep
  data Int8#
  type Int8X16# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec16 GHC.Internal.Types.Int8ElemRep)
  data Int8X16#
  type Int8X32# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec32 GHC.Internal.Types.Int8ElemRep)
  data Int8X32#
  type Int8X64# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec64 GHC.Internal.Types.Int8ElemRep)
  data Int8X64#
  type role MVar# nominal representational
  type MVar# :: forall {l :: GHC.Internal.Types.Levity}. * -> TYPE (GHC.Internal.Types.BoxedRep l) -> GHC.Internal.Types.UnliftedType
  data MVar# a b
  type role MutVar# nominal representational
  type MutVar# :: forall {l :: GHC.Internal.Types.Levity}. * -> TYPE (GHC.Internal.Types.BoxedRep l) -> GHC.Internal.Types.UnliftedType
  data MutVar# a b
  type role MutableArray# nominal representational
  type MutableArray# :: forall {l :: GHC.Internal.Types.Levity}. * -> TYPE (GHC.Internal.Types.BoxedRep l) -> GHC.Internal.Types.UnliftedType
  data MutableArray# a b
  type role MutableByteArray# nominal
  type MutableByteArray# :: * -> GHC.Internal.Types.UnliftedType
  data MutableByteArray# a
  type PromptTag# :: * -> GHC.Internal.Types.UnliftedType
  data PromptTag# a
  type role Proxy# phantom
  type Proxy# :: forall k. k -> GHC.Internal.Types.ZeroBitType
  data Proxy# a
  type RealWorld :: *
  data RealWorld
  type SmallArray# :: forall {l :: GHC.Internal.Types.Levity}. TYPE (GHC.Internal.Types.BoxedRep l) -> GHC.Internal.Types.UnliftedType
  data SmallArray# a
  type role SmallMutableArray# nominal representational
  type SmallMutableArray# :: forall {l :: GHC.Internal.Types.Levity}. * -> TYPE (GHC.Internal.Types.BoxedRep l) -> GHC.Internal.Types.UnliftedType
  data SmallMutableArray# a b
  type role StableName# phantom
  type StableName# :: forall {l :: GHC.Internal.Types.Levity}. TYPE (GHC.Internal.Types.BoxedRep l) -> GHC.Internal.Types.UnliftedType
  data StableName# a
  type StablePtr# :: forall {l :: GHC.Internal.Types.Levity}. TYPE (GHC.Internal.Types.BoxedRep l) -> TYPE GHC.Internal.Types.AddrRep
  data StablePtr# a
  type StackSnapshot# :: GHC.Internal.Types.UnliftedType
  data StackSnapshot#
  type role State# nominal
  type State# :: * -> GHC.Internal.Types.ZeroBitType
  data State# a
  type role TVar# nominal representational
  type TVar# :: forall {l :: GHC.Internal.Types.Levity}. * -> TYPE (GHC.Internal.Types.BoxedRep l) -> GHC.Internal.Types.UnliftedType
  data TVar# a b
  type role TYPE nominal
  type TYPE :: GHC.Internal.Types.RuntimeRep -> *
  data TYPE a
  type ThreadId# :: GHC.Internal.Types.UnliftedType
  data ThreadId#
  type Weak# :: forall {l :: GHC.Internal.Types.Levity}. TYPE (GHC.Internal.Types.BoxedRep l) -> GHC.Internal.Types.UnliftedType
  data Weak# a
  type Word# :: TYPE GHC.Internal.Types.WordRep
  data Word#
  type Word16# :: TYPE GHC.Internal.Types.Word16Rep
  data Word16#
  type Word16X16# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec16 GHC.Internal.Types.Word16ElemRep)
  data Word16X16#
  type Word16X32# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec32 GHC.Internal.Types.Word16ElemRep)
  data Word16X32#
  type Word16X8# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec8 GHC.Internal.Types.Word16ElemRep)
  data Word16X8#
  type Word32# :: TYPE GHC.Internal.Types.Word32Rep
  data Word32#
  type Word32X16# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec16 GHC.Internal.Types.Word32ElemRep)
  data Word32X16#
  type Word32X4# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec4 GHC.Internal.Types.Word32ElemRep)
  data Word32X4#
  type Word32X8# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec8 GHC.Internal.Types.Word32ElemRep)
  data Word32X8#
  type Word64# :: TYPE GHC.Internal.Types.Word64Rep
  data Word64#
  type Word64X2# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec2 GHC.Internal.Types.Word64ElemRep)
  data Word64X2#
  type Word64X4# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec4 GHC.Internal.Types.Word64ElemRep)
  data Word64X4#
  type Word64X8# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec8 GHC.Internal.Types.Word64ElemRep)
  data Word64X8#
  type Word8# :: TYPE GHC.Internal.Types.Word8Rep
  data Word8#
  type Word8X16# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec16 GHC.Internal.Types.Word8ElemRep)
  data Word8X16#
  type Word8X32# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec32 GHC.Internal.Types.Word8ElemRep)
  data Word8X32#
  type Word8X64# :: TYPE (GHC.Internal.Types.VecRep GHC.Internal.Types.Vec64 GHC.Internal.Types.Word8ElemRep)
  data Word8X64#
  acosDouble# :: Double# -> Double#
  acosFloat# :: Float# -> Float#
  acoshDouble# :: Double# -> Double#
  acoshFloat# :: Float# -> Float#
  addCFinalizerToWeak# :: forall {k :: GHC.Internal.Types.Levity} (b :: TYPE (GHC.Internal.Types.BoxedRep k)). Addr# -> Addr# -> Int# -> Addr# -> Weak# b -> State# RealWorld -> (# State# RealWorld, Int# #)
  addIntC# :: Int# -> Int# -> (# Int#, Int# #)
  addWordC# :: Word# -> Word# -> (# Word#, Int# #)
  addr2Int# :: Addr# -> Int#
  addrToAny# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)). Addr# -> (# a #)
  and# :: Word# -> Word# -> Word#
  and64# :: Word64# -> Word64# -> Word64#
  andI# :: Int# -> Int# -> Int#
  andWord16# :: Word16# -> Word16# -> Word16#
  andWord32# :: Word32# -> Word32# -> Word32#
  andWord8# :: Word8# -> Word8# -> Word8#
  anyToAddr# :: forall a. a -> State# RealWorld -> (# State# RealWorld, Addr# #)
  asinDouble# :: Double# -> Double#
  asinFloat# :: Float# -> Float#
  asinhDouble# :: Double# -> Double#
  asinhFloat# :: Float# -> Float#
  atanDouble# :: Double# -> Double#
  atanFloat# :: Float# -> Float#
  atanhDouble# :: Double# -> Double#
  atanhFloat# :: Float# -> Float#
  atomicCasAddrAddr# :: forall d. Addr# -> Addr# -> Addr# -> State# d -> (# State# d, Addr# #)
  atomicCasWord16Addr# :: forall d. Addr# -> Word16# -> Word16# -> State# d -> (# State# d, Word16# #)
  atomicCasWord32Addr# :: forall d. Addr# -> Word32# -> Word32# -> State# d -> (# State# d, Word32# #)
  atomicCasWord64Addr# :: forall d. Addr# -> Word64# -> Word64# -> State# d -> (# State# d, Word64# #)
  atomicCasWord8Addr# :: forall d. Addr# -> Word8# -> Word8# -> State# d -> (# State# d, Word8# #)
  atomicCasWordAddr# :: forall d. Addr# -> Word# -> Word# -> State# d -> (# State# d, Word# #)
  atomicExchangeAddrAddr# :: forall d. Addr# -> Addr# -> State# d -> (# State# d, Addr# #)
  atomicExchangeWordAddr# :: forall d. Addr# -> Word# -> State# d -> (# State# d, Word# #)
  atomicModifyMutVar2# :: forall d a c. MutVar# d a -> (a -> c) -> State# d -> (# State# d, a, c #)
  atomicModifyMutVar_# :: forall d a. MutVar# d a -> (a -> a) -> State# d -> (# State# d, a, a #)
  atomicReadIntArray# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int# #)
  atomicReadWordAddr# :: forall d. Addr# -> State# d -> (# State# d, Word# #)
  atomicSwapMutVar# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). MutVar# d a -> a -> State# d -> (# State# d, a #)
  atomicWriteIntArray# :: forall d. MutableByteArray# d -> Int# -> Int# -> State# d -> State# d
  atomicWriteWordAddr# :: forall d. Addr# -> Word# -> State# d -> State# d
  atomically# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)). (State# RealWorld -> (# State# RealWorld, a #)) -> State# RealWorld -> (# State# RealWorld, a #)
  bitReverse# :: Word# -> Word#
  bitReverse16# :: Word# -> Word#
  bitReverse32# :: Word# -> Word#
  bitReverse64# :: Word64# -> Word64#
  bitReverse8# :: Word# -> Word#
  broadcastDoubleX2# :: Double# -> DoubleX2#
  broadcastDoubleX4# :: Double# -> DoubleX4#
  broadcastDoubleX8# :: Double# -> DoubleX8#
  broadcastFloatX16# :: Float# -> FloatX16#
  broadcastFloatX4# :: Float# -> FloatX4#
  broadcastFloatX8# :: Float# -> FloatX8#
  broadcastInt16X16# :: Int16# -> Int16X16#
  broadcastInt16X32# :: Int16# -> Int16X32#
  broadcastInt16X8# :: Int16# -> Int16X8#
  broadcastInt32X16# :: Int32# -> Int32X16#
  broadcastInt32X4# :: Int32# -> Int32X4#
  broadcastInt32X8# :: Int32# -> Int32X8#
  broadcastInt64X2# :: Int64# -> Int64X2#
  broadcastInt64X4# :: Int64# -> Int64X4#
  broadcastInt64X8# :: Int64# -> Int64X8#
  broadcastInt8X16# :: Int8# -> Int8X16#
  broadcastInt8X32# :: Int8# -> Int8X32#
  broadcastInt8X64# :: Int8# -> Int8X64#
  broadcastWord16X16# :: Word16# -> Word16X16#
  broadcastWord16X32# :: Word16# -> Word16X32#
  broadcastWord16X8# :: Word16# -> Word16X8#
  broadcastWord32X16# :: Word32# -> Word32X16#
  broadcastWord32X4# :: Word32# -> Word32X4#
  broadcastWord32X8# :: Word32# -> Word32X8#
  broadcastWord64X2# :: Word64# -> Word64X2#
  broadcastWord64X4# :: Word64# -> Word64X4#
  broadcastWord64X8# :: Word64# -> Word64X8#
  broadcastWord8X16# :: Word8# -> Word8X16#
  broadcastWord8X32# :: Word8# -> Word8X32#
  broadcastWord8X64# :: Word8# -> Word8X64#
  byteArrayContents# :: ByteArray# -> Addr#
  byteSwap# :: Word# -> Word#
  byteSwap16# :: Word# -> Word#
  byteSwap32# :: Word# -> Word#
  byteSwap64# :: Word64# -> Word64#
  casArray# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). MutableArray# d a -> Int# -> a -> a -> State# d -> (# State# d, Int#, a #)
  casInt16Array# :: forall d. MutableByteArray# d -> Int# -> Int16# -> Int16# -> State# d -> (# State# d, Int16# #)
  casInt32Array# :: forall d. MutableByteArray# d -> Int# -> Int32# -> Int32# -> State# d -> (# State# d, Int32# #)
  casInt64Array# :: forall d. MutableByteArray# d -> Int# -> Int64# -> Int64# -> State# d -> (# State# d, Int64# #)
  casInt8Array# :: forall d. MutableByteArray# d -> Int# -> Int8# -> Int8# -> State# d -> (# State# d, Int8# #)
  casIntArray# :: forall d. MutableByteArray# d -> Int# -> Int# -> Int# -> State# d -> (# State# d, Int# #)
  casMutVar# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). MutVar# d a -> a -> a -> State# d -> (# State# d, Int#, a #)
  casSmallArray# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). SmallMutableArray# d a -> Int# -> a -> a -> State# d -> (# State# d, Int#, a #)
  castDoubleToWord64# :: Double# -> Word64#
  castFloatToWord32# :: Float# -> Word32#
  castWord32ToFloat# :: Word32# -> Float#
  castWord64ToDouble# :: Word64# -> Double#
  catch# :: forall {q :: GHC.Internal.Types.RuntimeRep} {k :: GHC.Internal.Types.Levity} (a :: TYPE q) (b :: TYPE (GHC.Internal.Types.BoxedRep k)). (State# RealWorld -> (# State# RealWorld, a #)) -> (b -> State# RealWorld -> (# State# RealWorld, a #)) -> State# RealWorld -> (# State# RealWorld, a #)
  catchRetry# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)). (State# RealWorld -> (# State# RealWorld, a #)) -> (State# RealWorld -> (# State# RealWorld, a #)) -> State# RealWorld -> (# State# RealWorld, a #)
  catchSTM# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)) b. (State# RealWorld -> (# State# RealWorld, a #)) -> (b -> State# RealWorld -> (# State# RealWorld, a #)) -> State# RealWorld -> (# State# RealWorld, a #)
  chr# :: Int# -> Char#
  clearCCS# :: forall d a. (State# d -> (# State# d, a #)) -> State# d -> (# State# d, a #)
  cloneArray# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)). Array# a -> Int# -> Int# -> Array# a
  cloneMutableArray# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). MutableArray# d a -> Int# -> Int# -> State# d -> (# State# d, MutableArray# d a #)
  cloneSmallArray# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)). SmallArray# a -> Int# -> Int# -> SmallArray# a
  cloneSmallMutableArray# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). SmallMutableArray# d a -> Int# -> Int# -> State# d -> (# State# d, SmallMutableArray# d a #)
  closureSize# :: forall a. a -> Int#
  clz# :: Word# -> Word#
  clz16# :: Word# -> Word#
  clz32# :: Word# -> Word#
  clz64# :: Word64# -> Word#
  clz8# :: Word# -> Word#
  coerce :: forall {k :: GHC.Internal.Types.RuntimeRep} (a :: TYPE k) (b :: TYPE k). Coercible a b => a -> b
  compactAdd# :: forall a. Compact# -> a -> State# RealWorld -> (# State# RealWorld, a #)
  compactAddWithSharing# :: forall a. Compact# -> a -> State# RealWorld -> (# State# RealWorld, a #)
  compactAllocateBlock# :: Word# -> Addr# -> State# RealWorld -> (# State# RealWorld, Addr# #)
  compactContains# :: forall a. Compact# -> a -> State# RealWorld -> (# State# RealWorld, Int# #)
  compactContainsAny# :: forall a. a -> State# RealWorld -> (# State# RealWorld, Int# #)
  compactFixupPointers# :: Addr# -> Addr# -> State# RealWorld -> (# State# RealWorld, Compact#, Addr# #)
  compactGetFirstBlock# :: Compact# -> State# RealWorld -> (# State# RealWorld, Addr#, Word# #)
  compactGetNextBlock# :: Compact# -> Addr# -> State# RealWorld -> (# State# RealWorld, Addr#, Word# #)
  compactNew# :: Word# -> State# RealWorld -> (# State# RealWorld, Compact# #)
  compactResize# :: Compact# -> Word# -> State# RealWorld -> State# RealWorld
  compactSize# :: Compact# -> State# RealWorld -> (# State# RealWorld, Word# #)
  compareByteArrays# :: ByteArray# -> Int# -> ByteArray# -> Int# -> Int# -> Int#
  control0# :: forall {r :: GHC.Internal.Types.RuntimeRep} a (b :: TYPE r). PromptTag# a -> (((State# RealWorld -> (# State# RealWorld, b #)) -> State# RealWorld -> (# State# RealWorld, a #)) -> State# RealWorld -> (# State# RealWorld, a #)) -> State# RealWorld -> (# State# RealWorld, b #)
  copyAddrToAddr# :: Addr# -> Addr# -> Int# -> State# RealWorld -> State# RealWorld
  copyAddrToAddrNonOverlapping# :: Addr# -> Addr# -> Int# -> State# RealWorld -> State# RealWorld
  copyAddrToByteArray# :: forall d. Addr# -> MutableByteArray# d -> Int# -> Int# -> State# d -> State# d
  copyArray# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)) d. Array# a -> Int# -> MutableArray# d a -> Int# -> Int# -> State# d -> State# d
  copyByteArray# :: forall d. ByteArray# -> Int# -> MutableByteArray# d -> Int# -> Int# -> State# d -> State# d
  copyByteArrayToAddr# :: forall d. ByteArray# -> Int# -> Addr# -> Int# -> State# d -> State# d
  copyMutableArray# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). MutableArray# d a -> Int# -> MutableArray# d a -> Int# -> Int# -> State# d -> State# d
  copyMutableByteArray# :: forall d. MutableByteArray# d -> Int# -> MutableByteArray# d -> Int# -> Int# -> State# d -> State# d
  copyMutableByteArrayNonOverlapping# :: forall d. MutableByteArray# d -> Int# -> MutableByteArray# d -> Int# -> Int# -> State# d -> State# d
  copyMutableByteArrayToAddr# :: forall d. MutableByteArray# d -> Int# -> Addr# -> Int# -> State# d -> State# d
  copySmallArray# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)) d. SmallArray# a -> Int# -> SmallMutableArray# d a -> Int# -> Int# -> State# d -> State# d
  copySmallMutableArray# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). SmallMutableArray# d a -> Int# -> SmallMutableArray# d a -> Int# -> Int# -> State# d -> State# d
  cosDouble# :: Double# -> Double#
  cosFloat# :: Float# -> Float#
  coshDouble# :: Double# -> Double#
  coshFloat# :: Float# -> Float#
  ctz# :: Word# -> Word#
  ctz16# :: Word# -> Word#
  ctz32# :: Word# -> Word#
  ctz64# :: Word64# -> Word#
  ctz8# :: Word# -> Word#
  dataToTagLarge# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)). a -> Int#
  dataToTagSmall# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)). a -> Int#
  deRefStablePtr# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)). StablePtr# a -> State# RealWorld -> (# State# RealWorld, a #)
  deRefWeak# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)). Weak# a -> State# RealWorld -> (# State# RealWorld, Int#, a #)
  decodeDouble_2Int# :: Double# -> (# Int#, Word#, Word#, Int# #)
  decodeDouble_Int64# :: Double# -> (# Int64#, Int# #)
  decodeFloat_Int# :: Float# -> (# Int#, Int# #)
  delay# :: forall d. Int# -> State# d -> State# d
  divideDoubleX2# :: DoubleX2# -> DoubleX2# -> DoubleX2#
  divideDoubleX4# :: DoubleX4# -> DoubleX4# -> DoubleX4#
  divideDoubleX8# :: DoubleX8# -> DoubleX8# -> DoubleX8#
  divideFloat# :: Float# -> Float# -> Float#
  divideFloatX16# :: FloatX16# -> FloatX16# -> FloatX16#
  divideFloatX4# :: FloatX4# -> FloatX4# -> FloatX4#
  divideFloatX8# :: FloatX8# -> FloatX8# -> FloatX8#
  double2Float# :: Double# -> Float#
  double2Int# :: Double# -> Int#
  eqAddr# :: Addr# -> Addr# -> Int#
  eqChar# :: Char# -> Char# -> Int#
  eqFloat# :: Float# -> Float# -> Int#
  eqInt16# :: Int16# -> Int16# -> Int#
  eqInt32# :: Int32# -> Int32# -> Int#
  eqInt64# :: Int64# -> Int64# -> Int#
  eqInt8# :: Int8# -> Int8# -> Int#
  eqStablePtr# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)). StablePtr# a -> StablePtr# a -> Int#
  eqWord# :: Word# -> Word# -> Int#
  eqWord16# :: Word16# -> Word16# -> Int#
  eqWord32# :: Word32# -> Word32# -> Int#
  eqWord64# :: Word64# -> Word64# -> Int#
  eqWord8# :: Word8# -> Word8# -> Int#
  expDouble# :: Double# -> Double#
  expFloat# :: Float# -> Float#
  expm1Double# :: Double# -> Double#
  expm1Float# :: Float# -> Float#
  fabsDouble# :: Double# -> Double#
  fabsFloat# :: Float# -> Float#
  fetchAddIntArray# :: forall d. MutableByteArray# d -> Int# -> Int# -> State# d -> (# State# d, Int# #)
  fetchAddWordAddr# :: forall d. Addr# -> Word# -> State# d -> (# State# d, Word# #)
  fetchAndIntArray# :: forall d. MutableByteArray# d -> Int# -> Int# -> State# d -> (# State# d, Int# #)
  fetchAndWordAddr# :: forall d. Addr# -> Word# -> State# d -> (# State# d, Word# #)
  fetchNandIntArray# :: forall d. MutableByteArray# d -> Int# -> Int# -> State# d -> (# State# d, Int# #)
  fetchNandWordAddr# :: forall d. Addr# -> Word# -> State# d -> (# State# d, Word# #)
  fetchOrIntArray# :: forall d. MutableByteArray# d -> Int# -> Int# -> State# d -> (# State# d, Int# #)
  fetchOrWordAddr# :: forall d. Addr# -> Word# -> State# d -> (# State# d, Word# #)
  fetchSubIntArray# :: forall d. MutableByteArray# d -> Int# -> Int# -> State# d -> (# State# d, Int# #)
  fetchSubWordAddr# :: forall d. Addr# -> Word# -> State# d -> (# State# d, Word# #)
  fetchXorIntArray# :: forall d. MutableByteArray# d -> Int# -> Int# -> State# d -> (# State# d, Int# #)
  fetchXorWordAddr# :: forall d. Addr# -> Word# -> State# d -> (# State# d, Word# #)
  finalizeWeak# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)) b. Weak# a -> State# RealWorld -> (# State# RealWorld, Int#, State# RealWorld -> (# State# RealWorld, b #) #)
  float2Double# :: Float# -> Double#
  float2Int# :: Float# -> Int#
  fmaddDouble# :: Double# -> Double# -> Double# -> Double#
  fmaddDoubleX2# :: DoubleX2# -> DoubleX2# -> DoubleX2# -> DoubleX2#
  fmaddDoubleX4# :: DoubleX4# -> DoubleX4# -> DoubleX4# -> DoubleX4#
  fmaddDoubleX8# :: DoubleX8# -> DoubleX8# -> DoubleX8# -> DoubleX8#
  fmaddFloat# :: Float# -> Float# -> Float# -> Float#
  fmaddFloatX16# :: FloatX16# -> FloatX16# -> FloatX16# -> FloatX16#
  fmaddFloatX4# :: FloatX4# -> FloatX4# -> FloatX4# -> FloatX4#
  fmaddFloatX8# :: FloatX8# -> FloatX8# -> FloatX8# -> FloatX8#
  fmsubDouble# :: Double# -> Double# -> Double# -> Double#
  fmsubDoubleX2# :: DoubleX2# -> DoubleX2# -> DoubleX2# -> DoubleX2#
  fmsubDoubleX4# :: DoubleX4# -> DoubleX4# -> DoubleX4# -> DoubleX4#
  fmsubDoubleX8# :: DoubleX8# -> DoubleX8# -> DoubleX8# -> DoubleX8#
  fmsubFloat# :: Float# -> Float# -> Float# -> Float#
  fmsubFloatX16# :: FloatX16# -> FloatX16# -> FloatX16# -> FloatX16#
  fmsubFloatX4# :: FloatX4# -> FloatX4# -> FloatX4# -> FloatX4#
  fmsubFloatX8# :: FloatX8# -> FloatX8# -> FloatX8# -> FloatX8#
  fnmaddDouble# :: Double# -> Double# -> Double# -> Double#
  fnmaddDoubleX2# :: DoubleX2# -> DoubleX2# -> DoubleX2# -> DoubleX2#
  fnmaddDoubleX4# :: DoubleX4# -> DoubleX4# -> DoubleX4# -> DoubleX4#
  fnmaddDoubleX8# :: DoubleX8# -> DoubleX8# -> DoubleX8# -> DoubleX8#
  fnmaddFloat# :: Float# -> Float# -> Float# -> Float#
  fnmaddFloatX16# :: FloatX16# -> FloatX16# -> FloatX16# -> FloatX16#
  fnmaddFloatX4# :: FloatX4# -> FloatX4# -> FloatX4# -> FloatX4#
  fnmaddFloatX8# :: FloatX8# -> FloatX8# -> FloatX8# -> FloatX8#
  fnmsubDouble# :: Double# -> Double# -> Double# -> Double#
  fnmsubDoubleX2# :: DoubleX2# -> DoubleX2# -> DoubleX2# -> DoubleX2#
  fnmsubDoubleX4# :: DoubleX4# -> DoubleX4# -> DoubleX4# -> DoubleX4#
  fnmsubDoubleX8# :: DoubleX8# -> DoubleX8# -> DoubleX8# -> DoubleX8#
  fnmsubFloat# :: Float# -> Float# -> Float# -> Float#
  fnmsubFloatX16# :: FloatX16# -> FloatX16# -> FloatX16# -> FloatX16#
  fnmsubFloatX4# :: FloatX4# -> FloatX4# -> FloatX4# -> FloatX4#
  fnmsubFloatX8# :: FloatX8# -> FloatX8# -> FloatX8# -> FloatX8#
  fork# :: forall {q :: GHC.Internal.Types.RuntimeRep} (a :: TYPE q). (State# RealWorld -> (# State# RealWorld, a #)) -> State# RealWorld -> (# State# RealWorld, ThreadId# #)
  forkOn# :: forall {q :: GHC.Internal.Types.RuntimeRep} (a :: TYPE q). Int# -> (State# RealWorld -> (# State# RealWorld, a #)) -> State# RealWorld -> (# State# RealWorld, ThreadId# #)
  freezeArray# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). MutableArray# d a -> Int# -> Int# -> State# d -> (# State# d, Array# a #)
  freezeSmallArray# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). SmallMutableArray# d a -> Int# -> Int# -> State# d -> (# State# d, SmallArray# a #)
  geAddr# :: Addr# -> Addr# -> Int#
  geChar# :: Char# -> Char# -> Int#
  geFloat# :: Float# -> Float# -> Int#
  geInt16# :: Int16# -> Int16# -> Int#
  geInt32# :: Int32# -> Int32# -> Int#
  geInt64# :: Int64# -> Int64# -> Int#
  geInt8# :: Int8# -> Int8# -> Int#
  geWord# :: Word# -> Word# -> Int#
  geWord16# :: Word16# -> Word16# -> Int#
  geWord32# :: Word32# -> Word32# -> Int#
  geWord64# :: Word64# -> Word64# -> Int#
  geWord8# :: Word8# -> Word8# -> Int#
  getApStackVal# :: forall a b. a -> Int# -> (# Int#, b #)
  getCCSOf# :: forall a d. a -> State# d -> (# State# d, Addr# #)
  getCurrentCCS# :: forall a d. a -> State# d -> (# State# d, Addr# #)
  getMaskingState# :: State# RealWorld -> (# State# RealWorld, Int# #)
  getSizeofMutableByteArray# :: forall d. MutableByteArray# d -> State# d -> (# State# d, Int# #)
  getSizeofSmallMutableArray# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). SmallMutableArray# d a -> State# d -> (# State# d, Int# #)
  getSpark# :: forall d a. State# d -> (# State# d, Int#, a #)
  gtAddr# :: Addr# -> Addr# -> Int#
  gtChar# :: Char# -> Char# -> Int#
  gtFloat# :: Float# -> Float# -> Int#
  gtInt16# :: Int16# -> Int16# -> Int#
  gtInt32# :: Int32# -> Int32# -> Int#
  gtInt64# :: Int64# -> Int64# -> Int#
  gtInt8# :: Int8# -> Int8# -> Int#
  gtWord# :: Word# -> Word# -> Int#
  gtWord16# :: Word16# -> Word16# -> Int#
  gtWord32# :: Word32# -> Word32# -> Int#
  gtWord64# :: Word64# -> Word64# -> Int#
  gtWord8# :: Word8# -> Word8# -> Int#
  indexAddrArray# :: ByteArray# -> Int# -> Addr#
  indexAddrOffAddr# :: Addr# -> Int# -> Addr#
  indexArray# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)). Array# a -> Int# -> (# a #)
  indexCharArray# :: ByteArray# -> Int# -> Char#
  indexCharOffAddr# :: Addr# -> Int# -> Char#
  indexDoubleArray# :: ByteArray# -> Int# -> Double#
  indexDoubleArrayAsDoubleX2# :: ByteArray# -> Int# -> DoubleX2#
  indexDoubleArrayAsDoubleX4# :: ByteArray# -> Int# -> DoubleX4#
  indexDoubleArrayAsDoubleX8# :: ByteArray# -> Int# -> DoubleX8#
  indexDoubleOffAddr# :: Addr# -> Int# -> Double#
  indexDoubleOffAddrAsDoubleX2# :: Addr# -> Int# -> DoubleX2#
  indexDoubleOffAddrAsDoubleX4# :: Addr# -> Int# -> DoubleX4#
  indexDoubleOffAddrAsDoubleX8# :: Addr# -> Int# -> DoubleX8#
  indexDoubleX2Array# :: ByteArray# -> Int# -> DoubleX2#
  indexDoubleX2OffAddr# :: Addr# -> Int# -> DoubleX2#
  indexDoubleX4Array# :: ByteArray# -> Int# -> DoubleX4#
  indexDoubleX4OffAddr# :: Addr# -> Int# -> DoubleX4#
  indexDoubleX8Array# :: ByteArray# -> Int# -> DoubleX8#
  indexDoubleX8OffAddr# :: Addr# -> Int# -> DoubleX8#
  indexFloatArray# :: ByteArray# -> Int# -> Float#
  indexFloatArrayAsFloatX16# :: ByteArray# -> Int# -> FloatX16#
  indexFloatArrayAsFloatX4# :: ByteArray# -> Int# -> FloatX4#
  indexFloatArrayAsFloatX8# :: ByteArray# -> Int# -> FloatX8#
  indexFloatOffAddr# :: Addr# -> Int# -> Float#
  indexFloatOffAddrAsFloatX16# :: Addr# -> Int# -> FloatX16#
  indexFloatOffAddrAsFloatX4# :: Addr# -> Int# -> FloatX4#
  indexFloatOffAddrAsFloatX8# :: Addr# -> Int# -> FloatX8#
  indexFloatX16Array# :: ByteArray# -> Int# -> FloatX16#
  indexFloatX16OffAddr# :: Addr# -> Int# -> FloatX16#
  indexFloatX4Array# :: ByteArray# -> Int# -> FloatX4#
  indexFloatX4OffAddr# :: Addr# -> Int# -> FloatX4#
  indexFloatX8Array# :: ByteArray# -> Int# -> FloatX8#
  indexFloatX8OffAddr# :: Addr# -> Int# -> FloatX8#
  indexInt16Array# :: ByteArray# -> Int# -> Int16#
  indexInt16ArrayAsInt16X16# :: ByteArray# -> Int# -> Int16X16#
  indexInt16ArrayAsInt16X32# :: ByteArray# -> Int# -> Int16X32#
  indexInt16ArrayAsInt16X8# :: ByteArray# -> Int# -> Int16X8#
  indexInt16OffAddr# :: Addr# -> Int# -> Int16#
  indexInt16OffAddrAsInt16X16# :: Addr# -> Int# -> Int16X16#
  indexInt16OffAddrAsInt16X32# :: Addr# -> Int# -> Int16X32#
  indexInt16OffAddrAsInt16X8# :: Addr# -> Int# -> Int16X8#
  indexInt16X16Array# :: ByteArray# -> Int# -> Int16X16#
  indexInt16X16OffAddr# :: Addr# -> Int# -> Int16X16#
  indexInt16X32Array# :: ByteArray# -> Int# -> Int16X32#
  indexInt16X32OffAddr# :: Addr# -> Int# -> Int16X32#
  indexInt16X8Array# :: ByteArray# -> Int# -> Int16X8#
  indexInt16X8OffAddr# :: Addr# -> Int# -> Int16X8#
  indexInt32Array# :: ByteArray# -> Int# -> Int32#
  indexInt32ArrayAsInt32X16# :: ByteArray# -> Int# -> Int32X16#
  indexInt32ArrayAsInt32X4# :: ByteArray# -> Int# -> Int32X4#
  indexInt32ArrayAsInt32X8# :: ByteArray# -> Int# -> Int32X8#
  indexInt32OffAddr# :: Addr# -> Int# -> Int32#
  indexInt32OffAddrAsInt32X16# :: Addr# -> Int# -> Int32X16#
  indexInt32OffAddrAsInt32X4# :: Addr# -> Int# -> Int32X4#
  indexInt32OffAddrAsInt32X8# :: Addr# -> Int# -> Int32X8#
  indexInt32X16Array# :: ByteArray# -> Int# -> Int32X16#
  indexInt32X16OffAddr# :: Addr# -> Int# -> Int32X16#
  indexInt32X4Array# :: ByteArray# -> Int# -> Int32X4#
  indexInt32X4OffAddr# :: Addr# -> Int# -> Int32X4#
  indexInt32X8Array# :: ByteArray# -> Int# -> Int32X8#
  indexInt32X8OffAddr# :: Addr# -> Int# -> Int32X8#
  indexInt64Array# :: ByteArray# -> Int# -> Int64#
  indexInt64ArrayAsInt64X2# :: ByteArray# -> Int# -> Int64X2#
  indexInt64ArrayAsInt64X4# :: ByteArray# -> Int# -> Int64X4#
  indexInt64ArrayAsInt64X8# :: ByteArray# -> Int# -> Int64X8#
  indexInt64OffAddr# :: Addr# -> Int# -> Int64#
  indexInt64OffAddrAsInt64X2# :: Addr# -> Int# -> Int64X2#
  indexInt64OffAddrAsInt64X4# :: Addr# -> Int# -> Int64X4#
  indexInt64OffAddrAsInt64X8# :: Addr# -> Int# -> Int64X8#
  indexInt64X2Array# :: ByteArray# -> Int# -> Int64X2#
  indexInt64X2OffAddr# :: Addr# -> Int# -> Int64X2#
  indexInt64X4Array# :: ByteArray# -> Int# -> Int64X4#
  indexInt64X4OffAddr# :: Addr# -> Int# -> Int64X4#
  indexInt64X8Array# :: ByteArray# -> Int# -> Int64X8#
  indexInt64X8OffAddr# :: Addr# -> Int# -> Int64X8#
  indexInt8Array# :: ByteArray# -> Int# -> Int8#
  indexInt8ArrayAsInt8X16# :: ByteArray# -> Int# -> Int8X16#
  indexInt8ArrayAsInt8X32# :: ByteArray# -> Int# -> Int8X32#
  indexInt8ArrayAsInt8X64# :: ByteArray# -> Int# -> Int8X64#
  indexInt8OffAddr# :: Addr# -> Int# -> Int8#
  indexInt8OffAddrAsInt8X16# :: Addr# -> Int# -> Int8X16#
  indexInt8OffAddrAsInt8X32# :: Addr# -> Int# -> Int8X32#
  indexInt8OffAddrAsInt8X64# :: Addr# -> Int# -> Int8X64#
  indexInt8X16Array# :: ByteArray# -> Int# -> Int8X16#
  indexInt8X16OffAddr# :: Addr# -> Int# -> Int8X16#
  indexInt8X32Array# :: ByteArray# -> Int# -> Int8X32#
  indexInt8X32OffAddr# :: Addr# -> Int# -> Int8X32#
  indexInt8X64Array# :: ByteArray# -> Int# -> Int8X64#
  indexInt8X64OffAddr# :: Addr# -> Int# -> Int8X64#
  indexIntArray# :: ByteArray# -> Int# -> Int#
  indexIntOffAddr# :: Addr# -> Int# -> Int#
  indexSmallArray# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)). SmallArray# a -> Int# -> (# a #)
  indexStablePtrArray# :: forall a. ByteArray# -> Int# -> StablePtr# a
  indexStablePtrOffAddr# :: forall a. Addr# -> Int# -> StablePtr# a
  indexWideCharArray# :: ByteArray# -> Int# -> Char#
  indexWideCharOffAddr# :: Addr# -> Int# -> Char#
  indexWord16Array# :: ByteArray# -> Int# -> Word16#
  indexWord16ArrayAsWord16X16# :: ByteArray# -> Int# -> Word16X16#
  indexWord16ArrayAsWord16X32# :: ByteArray# -> Int# -> Word16X32#
  indexWord16ArrayAsWord16X8# :: ByteArray# -> Int# -> Word16X8#
  indexWord16OffAddr# :: Addr# -> Int# -> Word16#
  indexWord16OffAddrAsWord16X16# :: Addr# -> Int# -> Word16X16#
  indexWord16OffAddrAsWord16X32# :: Addr# -> Int# -> Word16X32#
  indexWord16OffAddrAsWord16X8# :: Addr# -> Int# -> Word16X8#
  indexWord16X16Array# :: ByteArray# -> Int# -> Word16X16#
  indexWord16X16OffAddr# :: Addr# -> Int# -> Word16X16#
  indexWord16X32Array# :: ByteArray# -> Int# -> Word16X32#
  indexWord16X32OffAddr# :: Addr# -> Int# -> Word16X32#
  indexWord16X8Array# :: ByteArray# -> Int# -> Word16X8#
  indexWord16X8OffAddr# :: Addr# -> Int# -> Word16X8#
  indexWord32Array# :: ByteArray# -> Int# -> Word32#
  indexWord32ArrayAsWord32X16# :: ByteArray# -> Int# -> Word32X16#
  indexWord32ArrayAsWord32X4# :: ByteArray# -> Int# -> Word32X4#
  indexWord32ArrayAsWord32X8# :: ByteArray# -> Int# -> Word32X8#
  indexWord32OffAddr# :: Addr# -> Int# -> Word32#
  indexWord32OffAddrAsWord32X16# :: Addr# -> Int# -> Word32X16#
  indexWord32OffAddrAsWord32X4# :: Addr# -> Int# -> Word32X4#
  indexWord32OffAddrAsWord32X8# :: Addr# -> Int# -> Word32X8#
  indexWord32X16Array# :: ByteArray# -> Int# -> Word32X16#
  indexWord32X16OffAddr# :: Addr# -> Int# -> Word32X16#
  indexWord32X4Array# :: ByteArray# -> Int# -> Word32X4#
  indexWord32X4OffAddr# :: Addr# -> Int# -> Word32X4#
  indexWord32X8Array# :: ByteArray# -> Int# -> Word32X8#
  indexWord32X8OffAddr# :: Addr# -> Int# -> Word32X8#
  indexWord64Array# :: ByteArray# -> Int# -> Word64#
  indexWord64ArrayAsWord64X2# :: ByteArray# -> Int# -> Word64X2#
  indexWord64ArrayAsWord64X4# :: ByteArray# -> Int# -> Word64X4#
  indexWord64ArrayAsWord64X8# :: ByteArray# -> Int# -> Word64X8#
  indexWord64OffAddr# :: Addr# -> Int# -> Word64#
  indexWord64OffAddrAsWord64X2# :: Addr# -> Int# -> Word64X2#
  indexWord64OffAddrAsWord64X4# :: Addr# -> Int# -> Word64X4#
  indexWord64OffAddrAsWord64X8# :: Addr# -> Int# -> Word64X8#
  indexWord64X2Array# :: ByteArray# -> Int# -> Word64X2#
  indexWord64X2OffAddr# :: Addr# -> Int# -> Word64X2#
  indexWord64X4Array# :: ByteArray# -> Int# -> Word64X4#
  indexWord64X4OffAddr# :: Addr# -> Int# -> Word64X4#
  indexWord64X8Array# :: ByteArray# -> Int# -> Word64X8#
  indexWord64X8OffAddr# :: Addr# -> Int# -> Word64X8#
  indexWord8Array# :: ByteArray# -> Int# -> Word8#
  indexWord8ArrayAsAddr# :: ByteArray# -> Int# -> Addr#
  indexWord8ArrayAsChar# :: ByteArray# -> Int# -> Char#
  indexWord8ArrayAsDouble# :: ByteArray# -> Int# -> Double#
  indexWord8ArrayAsFloat# :: ByteArray# -> Int# -> Float#
  indexWord8ArrayAsInt# :: ByteArray# -> Int# -> Int#
  indexWord8ArrayAsInt16# :: ByteArray# -> Int# -> Int16#
  indexWord8ArrayAsInt32# :: ByteArray# -> Int# -> Int32#
  indexWord8ArrayAsInt64# :: ByteArray# -> Int# -> Int64#
  indexWord8ArrayAsStablePtr# :: forall a. ByteArray# -> Int# -> StablePtr# a
  indexWord8ArrayAsWideChar# :: ByteArray# -> Int# -> Char#
  indexWord8ArrayAsWord# :: ByteArray# -> Int# -> Word#
  indexWord8ArrayAsWord16# :: ByteArray# -> Int# -> Word16#
  indexWord8ArrayAsWord32# :: ByteArray# -> Int# -> Word32#
  indexWord8ArrayAsWord64# :: ByteArray# -> Int# -> Word64#
  indexWord8ArrayAsWord8X16# :: ByteArray# -> Int# -> Word8X16#
  indexWord8ArrayAsWord8X32# :: ByteArray# -> Int# -> Word8X32#
  indexWord8ArrayAsWord8X64# :: ByteArray# -> Int# -> Word8X64#
  indexWord8OffAddr# :: Addr# -> Int# -> Word8#
  indexWord8OffAddrAsAddr# :: Addr# -> Int# -> Addr#
  indexWord8OffAddrAsChar# :: Addr# -> Int# -> Char#
  indexWord8OffAddrAsDouble# :: Addr# -> Int# -> Double#
  indexWord8OffAddrAsFloat# :: Addr# -> Int# -> Float#
  indexWord8OffAddrAsInt# :: Addr# -> Int# -> Int#
  indexWord8OffAddrAsInt16# :: Addr# -> Int# -> Int16#
  indexWord8OffAddrAsInt32# :: Addr# -> Int# -> Int32#
  indexWord8OffAddrAsInt64# :: Addr# -> Int# -> Int64#
  indexWord8OffAddrAsStablePtr# :: forall a. Addr# -> Int# -> StablePtr# a
  indexWord8OffAddrAsWideChar# :: Addr# -> Int# -> Char#
  indexWord8OffAddrAsWord# :: Addr# -> Int# -> Word#
  indexWord8OffAddrAsWord16# :: Addr# -> Int# -> Word16#
  indexWord8OffAddrAsWord32# :: Addr# -> Int# -> Word32#
  indexWord8OffAddrAsWord64# :: Addr# -> Int# -> Word64#
  indexWord8OffAddrAsWord8X16# :: Addr# -> Int# -> Word8X16#
  indexWord8OffAddrAsWord8X32# :: Addr# -> Int# -> Word8X32#
  indexWord8OffAddrAsWord8X64# :: Addr# -> Int# -> Word8X64#
  indexWord8X16Array# :: ByteArray# -> Int# -> Word8X16#
  indexWord8X16OffAddr# :: Addr# -> Int# -> Word8X16#
  indexWord8X32Array# :: ByteArray# -> Int# -> Word8X32#
  indexWord8X32OffAddr# :: Addr# -> Int# -> Word8X32#
  indexWord8X64Array# :: ByteArray# -> Int# -> Word8X64#
  indexWord8X64OffAddr# :: Addr# -> Int# -> Word8X64#
  indexWordArray# :: ByteArray# -> Int# -> Word#
  indexWordOffAddr# :: Addr# -> Int# -> Word#
  insertDoubleX2# :: DoubleX2# -> Double# -> Int# -> DoubleX2#
  insertDoubleX4# :: DoubleX4# -> Double# -> Int# -> DoubleX4#
  insertDoubleX8# :: DoubleX8# -> Double# -> Int# -> DoubleX8#
  insertFloatX16# :: FloatX16# -> Float# -> Int# -> FloatX16#
  insertFloatX4# :: FloatX4# -> Float# -> Int# -> FloatX4#
  insertFloatX8# :: FloatX8# -> Float# -> Int# -> FloatX8#
  insertInt16X16# :: Int16X16# -> Int16# -> Int# -> Int16X16#
  insertInt16X32# :: Int16X32# -> Int16# -> Int# -> Int16X32#
  insertInt16X8# :: Int16X8# -> Int16# -> Int# -> Int16X8#
  insertInt32X16# :: Int32X16# -> Int32# -> Int# -> Int32X16#
  insertInt32X4# :: Int32X4# -> Int32# -> Int# -> Int32X4#
  insertInt32X8# :: Int32X8# -> Int32# -> Int# -> Int32X8#
  insertInt64X2# :: Int64X2# -> Int64# -> Int# -> Int64X2#
  insertInt64X4# :: Int64X4# -> Int64# -> Int# -> Int64X4#
  insertInt64X8# :: Int64X8# -> Int64# -> Int# -> Int64X8#
  insertInt8X16# :: Int8X16# -> Int8# -> Int# -> Int8X16#
  insertInt8X32# :: Int8X32# -> Int8# -> Int# -> Int8X32#
  insertInt8X64# :: Int8X64# -> Int8# -> Int# -> Int8X64#
  insertWord16X16# :: Word16X16# -> Word16# -> Int# -> Word16X16#
  insertWord16X32# :: Word16X32# -> Word16# -> Int# -> Word16X32#
  insertWord16X8# :: Word16X8# -> Word16# -> Int# -> Word16X8#
  insertWord32X16# :: Word32X16# -> Word32# -> Int# -> Word32X16#
  insertWord32X4# :: Word32X4# -> Word32# -> Int# -> Word32X4#
  insertWord32X8# :: Word32X8# -> Word32# -> Int# -> Word32X8#
  insertWord64X2# :: Word64X2# -> Word64# -> Int# -> Word64X2#
  insertWord64X4# :: Word64X4# -> Word64# -> Int# -> Word64X4#
  insertWord64X8# :: Word64X8# -> Word64# -> Int# -> Word64X8#
  insertWord8X16# :: Word8X16# -> Word8# -> Int# -> Word8X16#
  insertWord8X32# :: Word8X32# -> Word8# -> Int# -> Word8X32#
  insertWord8X64# :: Word8X64# -> Word8# -> Int# -> Word8X64#
  int16ToInt# :: Int16# -> Int#
  int16ToWord16# :: Int16# -> Word16#
  int2Addr# :: Int# -> Addr#
  int2Double# :: Int# -> Double#
  int2Float# :: Int# -> Float#
  int2Word# :: Int# -> Word#
  int32ToInt# :: Int32# -> Int#
  int32ToWord32# :: Int32# -> Word32#
  int64ToInt# :: Int64# -> Int#
  int64ToWord64# :: Int64# -> Word64#
  int8ToInt# :: Int8# -> Int#
  int8ToWord8# :: Int8# -> Word8#
  intToInt16# :: Int# -> Int16#
  intToInt32# :: Int# -> Int32#
  intToInt64# :: Int# -> Int64#
  intToInt8# :: Int# -> Int8#
  isByteArrayPinned# :: ByteArray# -> Int#
  isByteArrayWeaklyPinned# :: ByteArray# -> Int#
  isCurrentThreadBound# :: State# RealWorld -> (# State# RealWorld, Int# #)
  isEmptyMVar# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). MVar# d a -> State# d -> (# State# d, Int# #)
  isMutableByteArrayPinned# :: forall d. MutableByteArray# d -> Int#
  isMutableByteArrayWeaklyPinned# :: forall d. MutableByteArray# d -> Int#
  keepAlive# :: forall {l :: GHC.Internal.Types.Levity} {r :: GHC.Internal.Types.RuntimeRep} (a :: TYPE (GHC.Internal.Types.BoxedRep l)) d (b :: TYPE r). a -> State# d -> (State# d -> b) -> b
  killThread# :: forall a. ThreadId# -> a -> State# RealWorld -> State# RealWorld
  labelThread# :: ThreadId# -> ByteArray# -> State# RealWorld -> State# RealWorld
  leAddr# :: Addr# -> Addr# -> Int#
  leChar# :: Char# -> Char# -> Int#
  leFloat# :: Float# -> Float# -> Int#
  leInt16# :: Int16# -> Int16# -> Int#
  leInt32# :: Int32# -> Int32# -> Int#
  leInt64# :: Int64# -> Int64# -> Int#
  leInt8# :: Int8# -> Int8# -> Int#
  leWord# :: Word# -> Word# -> Int#
  leWord16# :: Word16# -> Word16# -> Int#
  leWord32# :: Word32# -> Word32# -> Int#
  leWord64# :: Word64# -> Word64# -> Int#
  leWord8# :: Word8# -> Word8# -> Int#
  leftSection :: forall {q :: GHC.Internal.Types.RuntimeRep} {r :: GHC.Internal.Types.RuntimeRep} (a :: TYPE q) (b :: TYPE r). (a -> b) -> a -> b
  listThreads# :: State# RealWorld -> (# State# RealWorld, Array# ThreadId# #)
  log1pDouble# :: Double# -> Double#
  log1pFloat# :: Float# -> Float#
  logDouble# :: Double# -> Double#
  logFloat# :: Float# -> Float#
  ltAddr# :: Addr# -> Addr# -> Int#
  ltChar# :: Char# -> Char# -> Int#
  ltFloat# :: Float# -> Float# -> Int#
  ltInt16# :: Int16# -> Int16# -> Int#
  ltInt32# :: Int32# -> Int32# -> Int#
  ltInt64# :: Int64# -> Int64# -> Int#
  ltInt8# :: Int8# -> Int8# -> Int#
  ltWord# :: Word# -> Word# -> Int#
  ltWord16# :: Word16# -> Word16# -> Int#
  ltWord32# :: Word32# -> Word32# -> Int#
  ltWord64# :: Word64# -> Word64# -> Int#
  ltWord8# :: Word8# -> Word8# -> Int#
  makeStableName# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)). a -> State# RealWorld -> (# State# RealWorld, StableName# a #)
  makeStablePtr# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)). a -> State# RealWorld -> (# State# RealWorld, StablePtr# a #)
  maskAsyncExceptions# :: forall {q :: GHC.Internal.Types.RuntimeRep} (a :: TYPE q). (State# RealWorld -> (# State# RealWorld, a #)) -> State# RealWorld -> (# State# RealWorld, a #)
  maskUninterruptible# :: forall {q :: GHC.Internal.Types.RuntimeRep} (a :: TYPE q). (State# RealWorld -> (# State# RealWorld, a #)) -> State# RealWorld -> (# State# RealWorld, a #)
  maxDouble# :: Double# -> Double# -> Double#
  maxDoubleX2# :: DoubleX2# -> DoubleX2# -> DoubleX2#
  maxDoubleX4# :: DoubleX4# -> DoubleX4# -> DoubleX4#
  maxDoubleX8# :: DoubleX8# -> DoubleX8# -> DoubleX8#
  maxFloat# :: Float# -> Float# -> Float#
  maxFloatX16# :: FloatX16# -> FloatX16# -> FloatX16#
  maxFloatX4# :: FloatX4# -> FloatX4# -> FloatX4#
  maxFloatX8# :: FloatX8# -> FloatX8# -> FloatX8#
  maxInt16X16# :: Int16X16# -> Int16X16# -> Int16X16#
  maxInt16X32# :: Int16X32# -> Int16X32# -> Int16X32#
  maxInt16X8# :: Int16X8# -> Int16X8# -> Int16X8#
  maxInt32X16# :: Int32X16# -> Int32X16# -> Int32X16#
  maxInt32X4# :: Int32X4# -> Int32X4# -> Int32X4#
  maxInt32X8# :: Int32X8# -> Int32X8# -> Int32X8#
  maxInt64X2# :: Int64X2# -> Int64X2# -> Int64X2#
  maxInt64X4# :: Int64X4# -> Int64X4# -> Int64X4#
  maxInt64X8# :: Int64X8# -> Int64X8# -> Int64X8#
  maxInt8X16# :: Int8X16# -> Int8X16# -> Int8X16#
  maxInt8X32# :: Int8X32# -> Int8X32# -> Int8X32#
  maxInt8X64# :: Int8X64# -> Int8X64# -> Int8X64#
  maxWord16X16# :: Word16X16# -> Word16X16# -> Word16X16#
  maxWord16X32# :: Word16X32# -> Word16X32# -> Word16X32#
  maxWord16X8# :: Word16X8# -> Word16X8# -> Word16X8#
  maxWord32X16# :: Word32X16# -> Word32X16# -> Word32X16#
  maxWord32X4# :: Word32X4# -> Word32X4# -> Word32X4#
  maxWord32X8# :: Word32X8# -> Word32X8# -> Word32X8#
  maxWord64X2# :: Word64X2# -> Word64X2# -> Word64X2#
  maxWord64X4# :: Word64X4# -> Word64X4# -> Word64X4#
  maxWord64X8# :: Word64X8# -> Word64X8# -> Word64X8#
  maxWord8X16# :: Word8X16# -> Word8X16# -> Word8X16#
  maxWord8X32# :: Word8X32# -> Word8X32# -> Word8X32#
  maxWord8X64# :: Word8X64# -> Word8X64# -> Word8X64#
  minDouble# :: Double# -> Double# -> Double#
  minDoubleX2# :: DoubleX2# -> DoubleX2# -> DoubleX2#
  minDoubleX4# :: DoubleX4# -> DoubleX4# -> DoubleX4#
  minDoubleX8# :: DoubleX8# -> DoubleX8# -> DoubleX8#
  minFloat# :: Float# -> Float# -> Float#
  minFloatX16# :: FloatX16# -> FloatX16# -> FloatX16#
  minFloatX4# :: FloatX4# -> FloatX4# -> FloatX4#
  minFloatX8# :: FloatX8# -> FloatX8# -> FloatX8#
  minInt16X16# :: Int16X16# -> Int16X16# -> Int16X16#
  minInt16X32# :: Int16X32# -> Int16X32# -> Int16X32#
  minInt16X8# :: Int16X8# -> Int16X8# -> Int16X8#
  minInt32X16# :: Int32X16# -> Int32X16# -> Int32X16#
  minInt32X4# :: Int32X4# -> Int32X4# -> Int32X4#
  minInt32X8# :: Int32X8# -> Int32X8# -> Int32X8#
  minInt64X2# :: Int64X2# -> Int64X2# -> Int64X2#
  minInt64X4# :: Int64X4# -> Int64X4# -> Int64X4#
  minInt64X8# :: Int64X8# -> Int64X8# -> Int64X8#
  minInt8X16# :: Int8X16# -> Int8X16# -> Int8X16#
  minInt8X32# :: Int8X32# -> Int8X32# -> Int8X32#
  minInt8X64# :: Int8X64# -> Int8X64# -> Int8X64#
  minWord16X16# :: Word16X16# -> Word16X16# -> Word16X16#
  minWord16X32# :: Word16X32# -> Word16X32# -> Word16X32#
  minWord16X8# :: Word16X8# -> Word16X8# -> Word16X8#
  minWord32X16# :: Word32X16# -> Word32X16# -> Word32X16#
  minWord32X4# :: Word32X4# -> Word32X4# -> Word32X4#
  minWord32X8# :: Word32X8# -> Word32X8# -> Word32X8#
  minWord64X2# :: Word64X2# -> Word64X2# -> Word64X2#
  minWord64X4# :: Word64X4# -> Word64X4# -> Word64X4#
  minWord64X8# :: Word64X8# -> Word64X8# -> Word64X8#
  minWord8X16# :: Word8X16# -> Word8X16# -> Word8X16#
  minWord8X32# :: Word8X32# -> Word8X32# -> Word8X32#
  minWord8X64# :: Word8X64# -> Word8X64# -> Word8X64#
  minusAddr# :: Addr# -> Addr# -> Int#
  minusDoubleX2# :: DoubleX2# -> DoubleX2# -> DoubleX2#
  minusDoubleX4# :: DoubleX4# -> DoubleX4# -> DoubleX4#
  minusDoubleX8# :: DoubleX8# -> DoubleX8# -> DoubleX8#
  minusFloat# :: Float# -> Float# -> Float#
  minusFloatX16# :: FloatX16# -> FloatX16# -> FloatX16#
  minusFloatX4# :: FloatX4# -> FloatX4# -> FloatX4#
  minusFloatX8# :: FloatX8# -> FloatX8# -> FloatX8#
  minusInt16X16# :: Int16X16# -> Int16X16# -> Int16X16#
  minusInt16X32# :: Int16X32# -> Int16X32# -> Int16X32#
  minusInt16X8# :: Int16X8# -> Int16X8# -> Int16X8#
  minusInt32X16# :: Int32X16# -> Int32X16# -> Int32X16#
  minusInt32X4# :: Int32X4# -> Int32X4# -> Int32X4#
  minusInt32X8# :: Int32X8# -> Int32X8# -> Int32X8#
  minusInt64X2# :: Int64X2# -> Int64X2# -> Int64X2#
  minusInt64X4# :: Int64X4# -> Int64X4# -> Int64X4#
  minusInt64X8# :: Int64X8# -> Int64X8# -> Int64X8#
  minusInt8X16# :: Int8X16# -> Int8X16# -> Int8X16#
  minusInt8X32# :: Int8X32# -> Int8X32# -> Int8X32#
  minusInt8X64# :: Int8X64# -> Int8X64# -> Int8X64#
  minusWord# :: Word# -> Word# -> Word#
  minusWord16X16# :: Word16X16# -> Word16X16# -> Word16X16#
  minusWord16X32# :: Word16X32# -> Word16X32# -> Word16X32#
  minusWord16X8# :: Word16X8# -> Word16X8# -> Word16X8#
  minusWord32X16# :: Word32X16# -> Word32X16# -> Word32X16#
  minusWord32X4# :: Word32X4# -> Word32X4# -> Word32X4#
  minusWord32X8# :: Word32X8# -> Word32X8# -> Word32X8#
  minusWord64X2# :: Word64X2# -> Word64X2# -> Word64X2#
  minusWord64X4# :: Word64X4# -> Word64X4# -> Word64X4#
  minusWord64X8# :: Word64X8# -> Word64X8# -> Word64X8#
  minusWord8X16# :: Word8X16# -> Word8X16# -> Word8X16#
  minusWord8X32# :: Word8X32# -> Word8X32# -> Word8X32#
  minusWord8X64# :: Word8X64# -> Word8X64# -> Word8X64#
  mkApUpd0# :: forall a. BCO -> (# a #)
  mkWeak# :: forall {l :: GHC.Internal.Types.Levity} {k :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)) (b :: TYPE (GHC.Internal.Types.BoxedRep k)) c. a -> b -> (State# RealWorld -> (# State# RealWorld, c #)) -> State# RealWorld -> (# State# RealWorld, Weak# b #)
  mkWeakNoFinalizer# :: forall {l :: GHC.Internal.Types.Levity} {k :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)) (b :: TYPE (GHC.Internal.Types.BoxedRep k)). a -> b -> State# RealWorld -> (# State# RealWorld, Weak# b #)
  mulIntMayOflo# :: Int# -> Int# -> Int#
  mutableByteArrayContents# :: forall d. MutableByteArray# d -> Addr#
  myThreadId# :: State# RealWorld -> (# State# RealWorld, ThreadId# #)
  narrow16Int# :: Int# -> Int#
  narrow16Word# :: Word# -> Word#
  narrow32Int# :: Int# -> Int#
  narrow32Word# :: Word# -> Word#
  narrow8Int# :: Int# -> Int#
  narrow8Word# :: Word# -> Word#
  neAddr# :: Addr# -> Addr# -> Int#
  neChar# :: Char# -> Char# -> Int#
  neFloat# :: Float# -> Float# -> Int#
  neInt16# :: Int16# -> Int16# -> Int#
  neInt32# :: Int32# -> Int32# -> Int#
  neInt64# :: Int64# -> Int64# -> Int#
  neInt8# :: Int8# -> Int8# -> Int#
  neWord# :: Word# -> Word# -> Int#
  neWord16# :: Word16# -> Word16# -> Int#
  neWord32# :: Word32# -> Word32# -> Int#
  neWord64# :: Word64# -> Word64# -> Int#
  neWord8# :: Word8# -> Word8# -> Int#
  negateDouble# :: Double# -> Double#
  negateDoubleX2# :: DoubleX2# -> DoubleX2#
  negateDoubleX4# :: DoubleX4# -> DoubleX4#
  negateDoubleX8# :: DoubleX8# -> DoubleX8#
  negateFloat# :: Float# -> Float#
  negateFloatX16# :: FloatX16# -> FloatX16#
  negateFloatX4# :: FloatX4# -> FloatX4#
  negateFloatX8# :: FloatX8# -> FloatX8#
  negateInt# :: Int# -> Int#
  negateInt16# :: Int16# -> Int16#
  negateInt16X16# :: Int16X16# -> Int16X16#
  negateInt16X32# :: Int16X32# -> Int16X32#
  negateInt16X8# :: Int16X8# -> Int16X8#
  negateInt32# :: Int32# -> Int32#
  negateInt32X16# :: Int32X16# -> Int32X16#
  negateInt32X4# :: Int32X4# -> Int32X4#
  negateInt32X8# :: Int32X8# -> Int32X8#
  negateInt64# :: Int64# -> Int64#
  negateInt64X2# :: Int64X2# -> Int64X2#
  negateInt64X4# :: Int64X4# -> Int64X4#
  negateInt64X8# :: Int64X8# -> Int64X8#
  negateInt8# :: Int8# -> Int8#
  negateInt8X16# :: Int8X16# -> Int8X16#
  negateInt8X32# :: Int8X32# -> Int8X32#
  negateInt8X64# :: Int8X64# -> Int8X64#
  newAlignedPinnedByteArray# :: forall d. Int# -> Int# -> State# d -> (# State# d, MutableByteArray# d #)
  newArray# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)) d. Int# -> a -> State# d -> (# State# d, MutableArray# d a #)
  newBCO# :: forall a d. ByteArray# -> ByteArray# -> Array# a -> Int# -> ByteArray# -> State# d -> (# State# d, BCO #)
  newByteArray# :: forall d. Int# -> State# d -> (# State# d, MutableByteArray# d #)
  newIOPort# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). State# d -> (# State# d, IOPort# d a #)
  newMVar# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). State# d -> (# State# d, MVar# d a #)
  newMutVar# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)) d. a -> State# d -> (# State# d, MutVar# d a #)
  newPinnedByteArray# :: forall d. Int# -> State# d -> (# State# d, MutableByteArray# d #)
  newPromptTag# :: forall a. State# RealWorld -> (# State# RealWorld, PromptTag# a #)
  newSmallArray# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)) d. Int# -> a -> State# d -> (# State# d, SmallMutableArray# d a #)
  newTVar# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)) d. a -> State# d -> (# State# d, TVar# d a #)
  noDuplicate# :: forall d. State# d -> State# d
  not# :: Word# -> Word#
  not64# :: Word64# -> Word64#
  notI# :: Int# -> Int#
  notWord16# :: Word16# -> Word16#
  notWord32# :: Word32# -> Word32#
  notWord8# :: Word8# -> Word8#
  nullAddr# :: Addr#
  numSparks# :: forall d. State# d -> (# State# d, Int# #)
  or# :: Word# -> Word# -> Word#
  or64# :: Word64# -> Word64# -> Word64#
  orI# :: Int# -> Int# -> Int#
  orWord16# :: Word16# -> Word16# -> Word16#
  orWord32# :: Word32# -> Word32# -> Word32#
  orWord8# :: Word8# -> Word8# -> Word8#
  ord# :: Char# -> Int#
  packDoubleX2# :: (# Double#, Double# #) -> DoubleX2#
  packDoubleX4# :: (# Double#, Double#, Double#, Double# #) -> DoubleX4#
  packDoubleX8# :: (# Double#, Double#, Double#, Double#, Double#, Double#, Double#, Double# #) -> DoubleX8#
  packFloatX16# :: (# Float#, Float#, Float#, Float#, Float#, Float#, Float#, Float#, Float#, Float#, Float#, Float#, Float#, Float#, Float#, Float# #) -> FloatX16#
  packFloatX4# :: (# Float#, Float#, Float#, Float# #) -> FloatX4#
  packFloatX8# :: (# Float#, Float#, Float#, Float#, Float#, Float#, Float#, Float# #) -> FloatX8#
  packInt16X16# :: (# Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16# #) -> Int16X16#
  packInt16X32# :: (# Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16# #) -> Int16X32#
  packInt16X8# :: (# Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16# #) -> Int16X8#
  packInt32X16# :: (# Int32#, Int32#, Int32#, Int32#, Int32#, Int32#, Int32#, Int32#, Int32#, Int32#, Int32#, Int32#, Int32#, Int32#, Int32#, Int32# #) -> Int32X16#
  packInt32X4# :: (# Int32#, Int32#, Int32#, Int32# #) -> Int32X4#
  packInt32X8# :: (# Int32#, Int32#, Int32#, Int32#, Int32#, Int32#, Int32#, Int32# #) -> Int32X8#
  packInt64X2# :: (# Int64#, Int64# #) -> Int64X2#
  packInt64X4# :: (# Int64#, Int64#, Int64#, Int64# #) -> Int64X4#
  packInt64X8# :: (# Int64#, Int64#, Int64#, Int64#, Int64#, Int64#, Int64#, Int64# #) -> Int64X8#
  packInt8X16# :: (# Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8# #) -> Int8X16#
  packInt8X32# :: (# Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8# #) -> Int8X32#
  packInt8X64# :: (# Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8# #) -> Int8X64#
  packWord16X16# :: (# Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16# #) -> Word16X16#
  packWord16X32# :: (# Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16# #) -> Word16X32#
  packWord16X8# :: (# Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16# #) -> Word16X8#
  packWord32X16# :: (# Word32#, Word32#, Word32#, Word32#, Word32#, Word32#, Word32#, Word32#, Word32#, Word32#, Word32#, Word32#, Word32#, Word32#, Word32#, Word32# #) -> Word32X16#
  packWord32X4# :: (# Word32#, Word32#, Word32#, Word32# #) -> Word32X4#
  packWord32X8# :: (# Word32#, Word32#, Word32#, Word32#, Word32#, Word32#, Word32#, Word32# #) -> Word32X8#
  packWord64X2# :: (# Word64#, Word64# #) -> Word64X2#
  packWord64X4# :: (# Word64#, Word64#, Word64#, Word64# #) -> Word64X4#
  packWord64X8# :: (# Word64#, Word64#, Word64#, Word64#, Word64#, Word64#, Word64#, Word64# #) -> Word64X8#
  packWord8X16# :: (# Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8# #) -> Word8X16#
  packWord8X32# :: (# Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8# #) -> Word8X32#
  packWord8X64# :: (# Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8# #) -> Word8X64#
  par# :: forall a. a -> Int#
  pdep# :: Word# -> Word# -> Word#
  pdep16# :: Word# -> Word# -> Word#
  pdep32# :: Word# -> Word# -> Word#
  pdep64# :: Word64# -> Word64# -> Word64#
  pdep8# :: Word# -> Word# -> Word#
  pext# :: Word# -> Word# -> Word#
  pext16# :: Word# -> Word# -> Word#
  pext32# :: Word# -> Word# -> Word#
  pext64# :: Word64# -> Word64# -> Word64#
  pext8# :: Word# -> Word# -> Word#
  plusAddr# :: Addr# -> Int# -> Addr#
  plusDoubleX2# :: DoubleX2# -> DoubleX2# -> DoubleX2#
  plusDoubleX4# :: DoubleX4# -> DoubleX4# -> DoubleX4#
  plusDoubleX8# :: DoubleX8# -> DoubleX8# -> DoubleX8#
  plusFloat# :: Float# -> Float# -> Float#
  plusFloatX16# :: FloatX16# -> FloatX16# -> FloatX16#
  plusFloatX4# :: FloatX4# -> FloatX4# -> FloatX4#
  plusFloatX8# :: FloatX8# -> FloatX8# -> FloatX8#
  plusInt16# :: Int16# -> Int16# -> Int16#
  plusInt16X16# :: Int16X16# -> Int16X16# -> Int16X16#
  plusInt16X32# :: Int16X32# -> Int16X32# -> Int16X32#
  plusInt16X8# :: Int16X8# -> Int16X8# -> Int16X8#
  plusInt32# :: Int32# -> Int32# -> Int32#
  plusInt32X16# :: Int32X16# -> Int32X16# -> Int32X16#
  plusInt32X4# :: Int32X4# -> Int32X4# -> Int32X4#
  plusInt32X8# :: Int32X8# -> Int32X8# -> Int32X8#
  plusInt64# :: Int64# -> Int64# -> Int64#
  plusInt64X2# :: Int64X2# -> Int64X2# -> Int64X2#
  plusInt64X4# :: Int64X4# -> Int64X4# -> Int64X4#
  plusInt64X8# :: Int64X8# -> Int64X8# -> Int64X8#
  plusInt8# :: Int8# -> Int8# -> Int8#
  plusInt8X16# :: Int8X16# -> Int8X16# -> Int8X16#
  plusInt8X32# :: Int8X32# -> Int8X32# -> Int8X32#
  plusInt8X64# :: Int8X64# -> Int8X64# -> Int8X64#
  plusWord# :: Word# -> Word# -> Word#
  plusWord16# :: Word16# -> Word16# -> Word16#
  plusWord16X16# :: Word16X16# -> Word16X16# -> Word16X16#
  plusWord16X32# :: Word16X32# -> Word16X32# -> Word16X32#
  plusWord16X8# :: Word16X8# -> Word16X8# -> Word16X8#
  plusWord2# :: Word# -> Word# -> (# Word#, Word# #)
  plusWord32# :: Word32# -> Word32# -> Word32#
  plusWord32X16# :: Word32X16# -> Word32X16# -> Word32X16#
  plusWord32X4# :: Word32X4# -> Word32X4# -> Word32X4#
  plusWord32X8# :: Word32X8# -> Word32X8# -> Word32X8#
  plusWord64# :: Word64# -> Word64# -> Word64#
  plusWord64X2# :: Word64X2# -> Word64X2# -> Word64X2#
  plusWord64X4# :: Word64X4# -> Word64X4# -> Word64X4#
  plusWord64X8# :: Word64X8# -> Word64X8# -> Word64X8#
  plusWord8# :: Word8# -> Word8# -> Word8#
  plusWord8X16# :: Word8X16# -> Word8X16# -> Word8X16#
  plusWord8X32# :: Word8X32# -> Word8X32# -> Word8X32#
  plusWord8X64# :: Word8X64# -> Word8X64# -> Word8X64#
  popCnt# :: Word# -> Word#
  popCnt16# :: Word# -> Word#
  popCnt32# :: Word# -> Word#
  popCnt64# :: Word64# -> Word#
  popCnt8# :: Word# -> Word#
  powerFloat# :: Float# -> Float# -> Float#
  prefetchAddr0# :: forall d. Addr# -> Int# -> State# d -> State# d
  prefetchAddr1# :: forall d. Addr# -> Int# -> State# d -> State# d
  prefetchAddr2# :: forall d. Addr# -> Int# -> State# d -> State# d
  prefetchAddr3# :: forall d. Addr# -> Int# -> State# d -> State# d
  prefetchByteArray0# :: forall d. ByteArray# -> Int# -> State# d -> State# d
  prefetchByteArray1# :: forall d. ByteArray# -> Int# -> State# d -> State# d
  prefetchByteArray2# :: forall d. ByteArray# -> Int# -> State# d -> State# d
  prefetchByteArray3# :: forall d. ByteArray# -> Int# -> State# d -> State# d
  prefetchMutableByteArray0# :: forall d. MutableByteArray# d -> Int# -> State# d -> State# d
  prefetchMutableByteArray1# :: forall d. MutableByteArray# d -> Int# -> State# d -> State# d
  prefetchMutableByteArray2# :: forall d. MutableByteArray# d -> Int# -> State# d -> State# d
  prefetchMutableByteArray3# :: forall d. MutableByteArray# d -> Int# -> State# d -> State# d
  prefetchValue0# :: forall a d. a -> State# d -> State# d
  prefetchValue1# :: forall a d. a -> State# d -> State# d
  prefetchValue2# :: forall a d. a -> State# d -> State# d
  prefetchValue3# :: forall a d. a -> State# d -> State# d
  prompt# :: forall a. PromptTag# a -> (State# RealWorld -> (# State# RealWorld, a #)) -> State# RealWorld -> (# State# RealWorld, a #)
  proxy# :: forall {k} (a :: k). Proxy# a
  putMVar# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). MVar# d a -> a -> State# d -> State# d
  quotInt# :: Int# -> Int# -> Int#
  quotInt16# :: Int16# -> Int16# -> Int16#
  quotInt16X16# :: Int16X16# -> Int16X16# -> Int16X16#
  quotInt16X32# :: Int16X32# -> Int16X32# -> Int16X32#
  quotInt16X8# :: Int16X8# -> Int16X8# -> Int16X8#
  quotInt32# :: Int32# -> Int32# -> Int32#
  quotInt32X16# :: Int32X16# -> Int32X16# -> Int32X16#
  quotInt32X4# :: Int32X4# -> Int32X4# -> Int32X4#
  quotInt32X8# :: Int32X8# -> Int32X8# -> Int32X8#
  quotInt64# :: Int64# -> Int64# -> Int64#
  quotInt64X2# :: Int64X2# -> Int64X2# -> Int64X2#
  quotInt64X4# :: Int64X4# -> Int64X4# -> Int64X4#
  quotInt64X8# :: Int64X8# -> Int64X8# -> Int64X8#
  quotInt8# :: Int8# -> Int8# -> Int8#
  quotInt8X16# :: Int8X16# -> Int8X16# -> Int8X16#
  quotInt8X32# :: Int8X32# -> Int8X32# -> Int8X32#
  quotInt8X64# :: Int8X64# -> Int8X64# -> Int8X64#
  quotRemInt# :: Int# -> Int# -> (# Int#, Int# #)
  quotRemInt16# :: Int16# -> Int16# -> (# Int16#, Int16# #)
  quotRemInt32# :: Int32# -> Int32# -> (# Int32#, Int32# #)
  quotRemInt8# :: Int8# -> Int8# -> (# Int8#, Int8# #)
  quotRemWord# :: Word# -> Word# -> (# Word#, Word# #)
  quotRemWord16# :: Word16# -> Word16# -> (# Word16#, Word16# #)
  quotRemWord2# :: Word# -> Word# -> Word# -> (# Word#, Word# #)
  quotRemWord32# :: Word32# -> Word32# -> (# Word32#, Word32# #)
  quotRemWord8# :: Word8# -> Word8# -> (# Word8#, Word8# #)
  quotWord# :: Word# -> Word# -> Word#
  quotWord16# :: Word16# -> Word16# -> Word16#
  quotWord16X16# :: Word16X16# -> Word16X16# -> Word16X16#
  quotWord16X32# :: Word16X32# -> Word16X32# -> Word16X32#
  quotWord16X8# :: Word16X8# -> Word16X8# -> Word16X8#
  quotWord32# :: Word32# -> Word32# -> Word32#
  quotWord32X16# :: Word32X16# -> Word32X16# -> Word32X16#
  quotWord32X4# :: Word32X4# -> Word32X4# -> Word32X4#
  quotWord32X8# :: Word32X8# -> Word32X8# -> Word32X8#
  quotWord64# :: Word64# -> Word64# -> Word64#
  quotWord64X2# :: Word64X2# -> Word64X2# -> Word64X2#
  quotWord64X4# :: Word64X4# -> Word64X4# -> Word64X4#
  quotWord64X8# :: Word64X8# -> Word64X8# -> Word64X8#
  quotWord8# :: Word8# -> Word8# -> Word8#
  quotWord8X16# :: Word8X16# -> Word8X16# -> Word8X16#
  quotWord8X32# :: Word8X32# -> Word8X32# -> Word8X32#
  quotWord8X64# :: Word8X64# -> Word8X64# -> Word8X64#
  raise# :: forall {l :: GHC.Internal.Types.Levity} {r :: GHC.Internal.Types.RuntimeRep} (a :: TYPE (GHC.Internal.Types.BoxedRep l)) (b :: TYPE r). a -> b
  raiseDivZero# :: forall {r :: GHC.Internal.Types.RuntimeRep} (b :: TYPE r). (# #) -> b
  raiseIO# :: forall {l :: GHC.Internal.Types.Levity} {r :: GHC.Internal.Types.RuntimeRep} (a :: TYPE (GHC.Internal.Types.BoxedRep l)) (b :: TYPE r). a -> State# RealWorld -> (# State# RealWorld, b #)
  raiseOverflow# :: forall {r :: GHC.Internal.Types.RuntimeRep} (b :: TYPE r). (# #) -> b
  raiseUnderflow# :: forall {r :: GHC.Internal.Types.RuntimeRep} (b :: TYPE r). (# #) -> b
  readAddrArray# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Addr# #)
  readAddrOffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Addr# #)
  readArray# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). MutableArray# d a -> Int# -> State# d -> (# State# d, a #)
  readCharArray# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Char# #)
  readCharOffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Char# #)
  readDoubleArray# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Double# #)
  readDoubleArrayAsDoubleX2# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, DoubleX2# #)
  readDoubleArrayAsDoubleX4# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, DoubleX4# #)
  readDoubleArrayAsDoubleX8# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, DoubleX8# #)
  readDoubleOffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Double# #)
  readDoubleOffAddrAsDoubleX2# :: forall d. Addr# -> Int# -> State# d -> (# State# d, DoubleX2# #)
  readDoubleOffAddrAsDoubleX4# :: forall d. Addr# -> Int# -> State# d -> (# State# d, DoubleX4# #)
  readDoubleOffAddrAsDoubleX8# :: forall d. Addr# -> Int# -> State# d -> (# State# d, DoubleX8# #)
  readDoubleX2Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, DoubleX2# #)
  readDoubleX2OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, DoubleX2# #)
  readDoubleX4Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, DoubleX4# #)
  readDoubleX4OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, DoubleX4# #)
  readDoubleX8Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, DoubleX8# #)
  readDoubleX8OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, DoubleX8# #)
  readFloatArray# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Float# #)
  readFloatArrayAsFloatX16# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, FloatX16# #)
  readFloatArrayAsFloatX4# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, FloatX4# #)
  readFloatArrayAsFloatX8# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, FloatX8# #)
  readFloatOffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Float# #)
  readFloatOffAddrAsFloatX16# :: forall d. Addr# -> Int# -> State# d -> (# State# d, FloatX16# #)
  readFloatOffAddrAsFloatX4# :: forall d. Addr# -> Int# -> State# d -> (# State# d, FloatX4# #)
  readFloatOffAddrAsFloatX8# :: forall d. Addr# -> Int# -> State# d -> (# State# d, FloatX8# #)
  readFloatX16Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, FloatX16# #)
  readFloatX16OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, FloatX16# #)
  readFloatX4Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, FloatX4# #)
  readFloatX4OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, FloatX4# #)
  readFloatX8Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, FloatX8# #)
  readFloatX8OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, FloatX8# #)
  readIOPort# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). IOPort# d a -> State# d -> (# State# d, a #)
  readInt16Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int16# #)
  readInt16ArrayAsInt16X16# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int16X16# #)
  readInt16ArrayAsInt16X32# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int16X32# #)
  readInt16ArrayAsInt16X8# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int16X8# #)
  readInt16OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int16# #)
  readInt16OffAddrAsInt16X16# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int16X16# #)
  readInt16OffAddrAsInt16X32# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int16X32# #)
  readInt16OffAddrAsInt16X8# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int16X8# #)
  readInt16X16Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int16X16# #)
  readInt16X16OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int16X16# #)
  readInt16X32Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int16X32# #)
  readInt16X32OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int16X32# #)
  readInt16X8Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int16X8# #)
  readInt16X8OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int16X8# #)
  readInt32Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int32# #)
  readInt32ArrayAsInt32X16# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int32X16# #)
  readInt32ArrayAsInt32X4# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int32X4# #)
  readInt32ArrayAsInt32X8# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int32X8# #)
  readInt32OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int32# #)
  readInt32OffAddrAsInt32X16# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int32X16# #)
  readInt32OffAddrAsInt32X4# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int32X4# #)
  readInt32OffAddrAsInt32X8# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int32X8# #)
  readInt32X16Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int32X16# #)
  readInt32X16OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int32X16# #)
  readInt32X4Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int32X4# #)
  readInt32X4OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int32X4# #)
  readInt32X8Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int32X8# #)
  readInt32X8OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int32X8# #)
  readInt64Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int64# #)
  readInt64ArrayAsInt64X2# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int64X2# #)
  readInt64ArrayAsInt64X4# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int64X4# #)
  readInt64ArrayAsInt64X8# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int64X8# #)
  readInt64OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int64# #)
  readInt64OffAddrAsInt64X2# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int64X2# #)
  readInt64OffAddrAsInt64X4# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int64X4# #)
  readInt64OffAddrAsInt64X8# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int64X8# #)
  readInt64X2Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int64X2# #)
  readInt64X2OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int64X2# #)
  readInt64X4Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int64X4# #)
  readInt64X4OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int64X4# #)
  readInt64X8Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int64X8# #)
  readInt64X8OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int64X8# #)
  readInt8Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int8# #)
  readInt8ArrayAsInt8X16# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int8X16# #)
  readInt8ArrayAsInt8X32# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int8X32# #)
  readInt8ArrayAsInt8X64# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int8X64# #)
  readInt8OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int8# #)
  readInt8OffAddrAsInt8X16# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int8X16# #)
  readInt8OffAddrAsInt8X32# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int8X32# #)
  readInt8OffAddrAsInt8X64# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int8X64# #)
  readInt8X16Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int8X16# #)
  readInt8X16OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int8X16# #)
  readInt8X32Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int8X32# #)
  readInt8X32OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int8X32# #)
  readInt8X64Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int8X64# #)
  readInt8X64OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int8X64# #)
  readIntArray# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int# #)
  readIntOffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int# #)
  readMVar# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). MVar# d a -> State# d -> (# State# d, a #)
  readMutVar# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). MutVar# d a -> State# d -> (# State# d, a #)
  readSmallArray# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). SmallMutableArray# d a -> Int# -> State# d -> (# State# d, a #)
  readStablePtrArray# :: forall d a. MutableByteArray# d -> Int# -> State# d -> (# State# d, StablePtr# a #)
  readStablePtrOffAddr# :: forall d a. Addr# -> Int# -> State# d -> (# State# d, StablePtr# a #)
  readTVar# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). TVar# d a -> State# d -> (# State# d, a #)
  readTVarIO# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). TVar# d a -> State# d -> (# State# d, a #)
  readWideCharArray# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Char# #)
  readWideCharOffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Char# #)
  readWord16Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word16# #)
  readWord16ArrayAsWord16X16# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word16X16# #)
  readWord16ArrayAsWord16X32# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word16X32# #)
  readWord16ArrayAsWord16X8# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word16X8# #)
  readWord16OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word16# #)
  readWord16OffAddrAsWord16X16# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word16X16# #)
  readWord16OffAddrAsWord16X32# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word16X32# #)
  readWord16OffAddrAsWord16X8# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word16X8# #)
  readWord16X16Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word16X16# #)
  readWord16X16OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word16X16# #)
  readWord16X32Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word16X32# #)
  readWord16X32OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word16X32# #)
  readWord16X8Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word16X8# #)
  readWord16X8OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word16X8# #)
  readWord32Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word32# #)
  readWord32ArrayAsWord32X16# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word32X16# #)
  readWord32ArrayAsWord32X4# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word32X4# #)
  readWord32ArrayAsWord32X8# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word32X8# #)
  readWord32OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word32# #)
  readWord32OffAddrAsWord32X16# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word32X16# #)
  readWord32OffAddrAsWord32X4# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word32X4# #)
  readWord32OffAddrAsWord32X8# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word32X8# #)
  readWord32X16Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word32X16# #)
  readWord32X16OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word32X16# #)
  readWord32X4Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word32X4# #)
  readWord32X4OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word32X4# #)
  readWord32X8Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word32X8# #)
  readWord32X8OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word32X8# #)
  readWord64Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word64# #)
  readWord64ArrayAsWord64X2# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word64X2# #)
  readWord64ArrayAsWord64X4# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word64X4# #)
  readWord64ArrayAsWord64X8# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word64X8# #)
  readWord64OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word64# #)
  readWord64OffAddrAsWord64X2# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word64X2# #)
  readWord64OffAddrAsWord64X4# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word64X4# #)
  readWord64OffAddrAsWord64X8# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word64X8# #)
  readWord64X2Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word64X2# #)
  readWord64X2OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word64X2# #)
  readWord64X4Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word64X4# #)
  readWord64X4OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word64X4# #)
  readWord64X8Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word64X8# #)
  readWord64X8OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word64X8# #)
  readWord8Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word8# #)
  readWord8ArrayAsAddr# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Addr# #)
  readWord8ArrayAsChar# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Char# #)
  readWord8ArrayAsDouble# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Double# #)
  readWord8ArrayAsFloat# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Float# #)
  readWord8ArrayAsInt# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int# #)
  readWord8ArrayAsInt16# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int16# #)
  readWord8ArrayAsInt32# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int32# #)
  readWord8ArrayAsInt64# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Int64# #)
  readWord8ArrayAsStablePtr# :: forall d a. MutableByteArray# d -> Int# -> State# d -> (# State# d, StablePtr# a #)
  readWord8ArrayAsWideChar# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Char# #)
  readWord8ArrayAsWord# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word# #)
  readWord8ArrayAsWord16# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word16# #)
  readWord8ArrayAsWord32# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word32# #)
  readWord8ArrayAsWord64# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word64# #)
  readWord8ArrayAsWord8X16# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word8X16# #)
  readWord8ArrayAsWord8X32# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word8X32# #)
  readWord8ArrayAsWord8X64# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word8X64# #)
  readWord8OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word8# #)
  readWord8OffAddrAsAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Addr# #)
  readWord8OffAddrAsChar# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Char# #)
  readWord8OffAddrAsDouble# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Double# #)
  readWord8OffAddrAsFloat# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Float# #)
  readWord8OffAddrAsInt# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int# #)
  readWord8OffAddrAsInt16# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int16# #)
  readWord8OffAddrAsInt32# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int32# #)
  readWord8OffAddrAsInt64# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Int64# #)
  readWord8OffAddrAsStablePtr# :: forall d a. Addr# -> Int# -> State# d -> (# State# d, StablePtr# a #)
  readWord8OffAddrAsWideChar# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Char# #)
  readWord8OffAddrAsWord# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word# #)
  readWord8OffAddrAsWord16# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word16# #)
  readWord8OffAddrAsWord32# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word32# #)
  readWord8OffAddrAsWord64# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word64# #)
  readWord8OffAddrAsWord8X16# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word8X16# #)
  readWord8OffAddrAsWord8X32# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word8X32# #)
  readWord8OffAddrAsWord8X64# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word8X64# #)
  readWord8X16Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word8X16# #)
  readWord8X16OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word8X16# #)
  readWord8X32Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word8X32# #)
  readWord8X32OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word8X32# #)
  readWord8X64Array# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word8X64# #)
  readWord8X64OffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word8X64# #)
  readWordArray# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, Word# #)
  readWordOffAddr# :: forall d. Addr# -> Int# -> State# d -> (# State# d, Word# #)
  realWorld# :: State# RealWorld
  reallyUnsafePtrEquality# :: forall {l :: GHC.Internal.Types.Levity} {k :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)) (b :: TYPE (GHC.Internal.Types.BoxedRep k)). a -> b -> Int#
  remAddr# :: Addr# -> Int# -> Int#
  remInt# :: Int# -> Int# -> Int#
  remInt16# :: Int16# -> Int16# -> Int16#
  remInt16X16# :: Int16X16# -> Int16X16# -> Int16X16#
  remInt16X32# :: Int16X32# -> Int16X32# -> Int16X32#
  remInt16X8# :: Int16X8# -> Int16X8# -> Int16X8#
  remInt32# :: Int32# -> Int32# -> Int32#
  remInt32X16# :: Int32X16# -> Int32X16# -> Int32X16#
  remInt32X4# :: Int32X4# -> Int32X4# -> Int32X4#
  remInt32X8# :: Int32X8# -> Int32X8# -> Int32X8#
  remInt64# :: Int64# -> Int64# -> Int64#
  remInt64X2# :: Int64X2# -> Int64X2# -> Int64X2#
  remInt64X4# :: Int64X4# -> Int64X4# -> Int64X4#
  remInt64X8# :: Int64X8# -> Int64X8# -> Int64X8#
  remInt8# :: Int8# -> Int8# -> Int8#
  remInt8X16# :: Int8X16# -> Int8X16# -> Int8X16#
  remInt8X32# :: Int8X32# -> Int8X32# -> Int8X32#
  remInt8X64# :: Int8X64# -> Int8X64# -> Int8X64#
  remWord# :: Word# -> Word# -> Word#
  remWord16# :: Word16# -> Word16# -> Word16#
  remWord16X16# :: Word16X16# -> Word16X16# -> Word16X16#
  remWord16X32# :: Word16X32# -> Word16X32# -> Word16X32#
  remWord16X8# :: Word16X8# -> Word16X8# -> Word16X8#
  remWord32# :: Word32# -> Word32# -> Word32#
  remWord32X16# :: Word32X16# -> Word32X16# -> Word32X16#
  remWord32X4# :: Word32X4# -> Word32X4# -> Word32X4#
  remWord32X8# :: Word32X8# -> Word32X8# -> Word32X8#
  remWord64# :: Word64# -> Word64# -> Word64#
  remWord64X2# :: Word64X2# -> Word64X2# -> Word64X2#
  remWord64X4# :: Word64X4# -> Word64X4# -> Word64X4#
  remWord64X8# :: Word64X8# -> Word64X8# -> Word64X8#
  remWord8# :: Word8# -> Word8# -> Word8#
  remWord8X16# :: Word8X16# -> Word8X16# -> Word8X16#
  remWord8X32# :: Word8X32# -> Word8X32# -> Word8X32#
  remWord8X64# :: Word8X64# -> Word8X64# -> Word8X64#
  resizeMutableByteArray# :: forall d. MutableByteArray# d -> Int# -> State# d -> (# State# d, MutableByteArray# d #)
  retry# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)). State# RealWorld -> (# State# RealWorld, a #)
  rightSection :: forall {q :: GHC.Internal.Types.RuntimeRep} {r :: GHC.Internal.Types.RuntimeRep} {s :: GHC.Internal.Types.RuntimeRep} (a :: TYPE q) (b :: TYPE r) (c :: TYPE s). (a -> b -> c) -> b -> a -> c
  seq :: forall {r :: GHC.Internal.Types.RuntimeRep} a (b :: TYPE r). a -> b -> b
  setAddrRange# :: Addr# -> Int# -> Int# -> State# RealWorld -> State# RealWorld
  setByteArray# :: forall d. MutableByteArray# d -> Int# -> Int# -> Int# -> State# d -> State# d
  setThreadAllocationCounter# :: Int64# -> State# RealWorld -> State# RealWorld
  shrinkMutableByteArray# :: forall d. MutableByteArray# d -> Int# -> State# d -> State# d
  shrinkSmallMutableArray# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). SmallMutableArray# d a -> Int# -> State# d -> State# d
  shuffleDoubleX2# :: DoubleX2# -> DoubleX2# -> (# Int#, Int# #) -> DoubleX2#
  shuffleDoubleX4# :: DoubleX4# -> DoubleX4# -> (# Int#, Int#, Int#, Int# #) -> DoubleX4#
  shuffleDoubleX8# :: DoubleX8# -> DoubleX8# -> (# Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int# #) -> DoubleX8#
  shuffleFloatX16# :: FloatX16# -> FloatX16# -> (# Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int# #) -> FloatX16#
  shuffleFloatX4# :: FloatX4# -> FloatX4# -> (# Int#, Int#, Int#, Int# #) -> FloatX4#
  shuffleFloatX8# :: FloatX8# -> FloatX8# -> (# Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int# #) -> FloatX8#
  shuffleInt16X16# :: Int16X16# -> Int16X16# -> (# Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int# #) -> Int16X16#
  shuffleInt16X32# :: Int16X32# -> Int16X32# -> (# Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int# #) -> Int16X32#
  shuffleInt16X8# :: Int16X8# -> Int16X8# -> (# Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int# #) -> Int16X8#
  shuffleInt32X16# :: Int32X16# -> Int32X16# -> (# Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int# #) -> Int32X16#
  shuffleInt32X4# :: Int32X4# -> Int32X4# -> (# Int#, Int#, Int#, Int# #) -> Int32X4#
  shuffleInt32X8# :: Int32X8# -> Int32X8# -> (# Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int# #) -> Int32X8#
  shuffleInt64X2# :: Int64X2# -> Int64X2# -> (# Int#, Int# #) -> Int64X2#
  shuffleInt64X4# :: Int64X4# -> Int64X4# -> (# Int#, Int#, Int#, Int# #) -> Int64X4#
  shuffleInt64X8# :: Int64X8# -> Int64X8# -> (# Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int# #) -> Int64X8#
  shuffleInt8X16# :: Int8X16# -> Int8X16# -> (# Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int# #) -> Int8X16#
  shuffleInt8X32# :: Int8X32# -> Int8X32# -> (# Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int# #) -> Int8X32#
  shuffleInt8X64# :: Int8X64# -> Int8X64# -> (# Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int# #) -> Int8X64#
  shuffleWord16X16# :: Word16X16# -> Word16X16# -> (# Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int# #) -> Word16X16#
  shuffleWord16X32# :: Word16X32# -> Word16X32# -> (# Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int# #) -> Word16X32#
  shuffleWord16X8# :: Word16X8# -> Word16X8# -> (# Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int# #) -> Word16X8#
  shuffleWord32X16# :: Word32X16# -> Word32X16# -> (# Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int# #) -> Word32X16#
  shuffleWord32X4# :: Word32X4# -> Word32X4# -> (# Int#, Int#, Int#, Int# #) -> Word32X4#
  shuffleWord32X8# :: Word32X8# -> Word32X8# -> (# Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int# #) -> Word32X8#
  shuffleWord64X2# :: Word64X2# -> Word64X2# -> (# Int#, Int# #) -> Word64X2#
  shuffleWord64X4# :: Word64X4# -> Word64X4# -> (# Int#, Int#, Int#, Int# #) -> Word64X4#
  shuffleWord64X8# :: Word64X8# -> Word64X8# -> (# Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int# #) -> Word64X8#
  shuffleWord8X16# :: Word8X16# -> Word8X16# -> (# Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int# #) -> Word8X16#
  shuffleWord8X32# :: Word8X32# -> Word8X32# -> (# Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int# #) -> Word8X32#
  shuffleWord8X64# :: Word8X64# -> Word8X64# -> (# Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int#, Int# #) -> Word8X64#
  sinDouble# :: Double# -> Double#
  sinFloat# :: Float# -> Float#
  sinhDouble# :: Double# -> Double#
  sinhFloat# :: Float# -> Float#
  sizeofArray# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)). Array# a -> Int#
  sizeofByteArray# :: ByteArray# -> Int#
  sizeofMutableArray# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). MutableArray# d a -> Int#
  sizeofMutableByteArray# :: forall d. MutableByteArray# d -> Int#
  sizeofSmallArray# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)). SmallArray# a -> Int#
  sizeofSmallMutableArray# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). SmallMutableArray# d a -> Int#
  spark# :: forall a d. a -> State# d -> (# State# d, a #)
  sqrtDouble# :: Double# -> Double#
  sqrtFloat# :: Float# -> Float#
  stableNameToInt# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)). StableName# a -> Int#
  subInt16# :: Int16# -> Int16# -> Int16#
  subInt32# :: Int32# -> Int32# -> Int32#
  subInt64# :: Int64# -> Int64# -> Int64#
  subInt8# :: Int8# -> Int8# -> Int8#
  subIntC# :: Int# -> Int# -> (# Int#, Int# #)
  subWord16# :: Word16# -> Word16# -> Word16#
  subWord32# :: Word32# -> Word32# -> Word32#
  subWord64# :: Word64# -> Word64# -> Word64#
  subWord8# :: Word8# -> Word8# -> Word8#
  subWordC# :: Word# -> Word# -> (# Word#, Int# #)
  tagToEnum# :: forall a. Int# -> a
  takeMVar# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). MVar# d a -> State# d -> (# State# d, a #)
  tanDouble# :: Double# -> Double#
  tanFloat# :: Float# -> Float#
  tanhDouble# :: Double# -> Double#
  tanhFloat# :: Float# -> Float#
  thawArray# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)) d. Array# a -> Int# -> Int# -> State# d -> (# State# d, MutableArray# d a #)
  thawSmallArray# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)) d. SmallArray# a -> Int# -> Int# -> State# d -> (# State# d, SmallMutableArray# d a #)
  threadLabel# :: ThreadId# -> State# RealWorld -> (# State# RealWorld, Int#, ByteArray# #)
  threadStatus# :: ThreadId# -> State# RealWorld -> (# State# RealWorld, Int#, Int#, Int# #)
  timesDoubleX2# :: DoubleX2# -> DoubleX2# -> DoubleX2#
  timesDoubleX4# :: DoubleX4# -> DoubleX4# -> DoubleX4#
  timesDoubleX8# :: DoubleX8# -> DoubleX8# -> DoubleX8#
  timesFloat# :: Float# -> Float# -> Float#
  timesFloatX16# :: FloatX16# -> FloatX16# -> FloatX16#
  timesFloatX4# :: FloatX4# -> FloatX4# -> FloatX4#
  timesFloatX8# :: FloatX8# -> FloatX8# -> FloatX8#
  timesInt16# :: Int16# -> Int16# -> Int16#
  timesInt16X16# :: Int16X16# -> Int16X16# -> Int16X16#
  timesInt16X32# :: Int16X32# -> Int16X32# -> Int16X32#
  timesInt16X8# :: Int16X8# -> Int16X8# -> Int16X8#
  timesInt2# :: Int# -> Int# -> (# Int#, Int#, Int# #)
  timesInt32# :: Int32# -> Int32# -> Int32#
  timesInt32X16# :: Int32X16# -> Int32X16# -> Int32X16#
  timesInt32X4# :: Int32X4# -> Int32X4# -> Int32X4#
  timesInt32X8# :: Int32X8# -> Int32X8# -> Int32X8#
  timesInt64# :: Int64# -> Int64# -> Int64#
  timesInt64X2# :: Int64X2# -> Int64X2# -> Int64X2#
  timesInt64X4# :: Int64X4# -> Int64X4# -> Int64X4#
  timesInt64X8# :: Int64X8# -> Int64X8# -> Int64X8#
  timesInt8# :: Int8# -> Int8# -> Int8#
  timesInt8X16# :: Int8X16# -> Int8X16# -> Int8X16#
  timesInt8X32# :: Int8X32# -> Int8X32# -> Int8X32#
  timesInt8X64# :: Int8X64# -> Int8X64# -> Int8X64#
  timesWord# :: Word# -> Word# -> Word#
  timesWord16# :: Word16# -> Word16# -> Word16#
  timesWord16X16# :: Word16X16# -> Word16X16# -> Word16X16#
  timesWord16X32# :: Word16X32# -> Word16X32# -> Word16X32#
  timesWord16X8# :: Word16X8# -> Word16X8# -> Word16X8#
  timesWord2# :: Word# -> Word# -> (# Word#, Word# #)
  timesWord32# :: Word32# -> Word32# -> Word32#
  timesWord32X16# :: Word32X16# -> Word32X16# -> Word32X16#
  timesWord32X4# :: Word32X4# -> Word32X4# -> Word32X4#
  timesWord32X8# :: Word32X8# -> Word32X8# -> Word32X8#
  timesWord64# :: Word64# -> Word64# -> Word64#
  timesWord64X2# :: Word64X2# -> Word64X2# -> Word64X2#
  timesWord64X4# :: Word64X4# -> Word64X4# -> Word64X4#
  timesWord64X8# :: Word64X8# -> Word64X8# -> Word64X8#
  timesWord8# :: Word8# -> Word8# -> Word8#
  timesWord8X16# :: Word8X16# -> Word8X16# -> Word8X16#
  timesWord8X32# :: Word8X32# -> Word8X32# -> Word8X32#
  timesWord8X64# :: Word8X64# -> Word8X64# -> Word8X64#
  touch# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)) d. a -> State# d -> State# d
  traceBinaryEvent# :: forall d. Addr# -> Int# -> State# d -> State# d
  traceEvent# :: forall d. Addr# -> State# d -> State# d
  traceMarker# :: forall d. Addr# -> State# d -> State# d
  tryPutMVar# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). MVar# d a -> a -> State# d -> (# State# d, Int# #)
  tryReadMVar# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). MVar# d a -> State# d -> (# State# d, Int#, a #)
  tryTakeMVar# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). MVar# d a -> State# d -> (# State# d, Int#, a #)
  uncheckedIShiftL# :: Int# -> Int# -> Int#
  uncheckedIShiftL64# :: Int64# -> Int# -> Int64#
  uncheckedIShiftRA# :: Int# -> Int# -> Int#
  uncheckedIShiftRA64# :: Int64# -> Int# -> Int64#
  uncheckedIShiftRL# :: Int# -> Int# -> Int#
  uncheckedIShiftRL64# :: Int64# -> Int# -> Int64#
  uncheckedShiftL# :: Word# -> Int# -> Word#
  uncheckedShiftL64# :: Word64# -> Int# -> Word64#
  uncheckedShiftLInt16# :: Int16# -> Int# -> Int16#
  uncheckedShiftLInt32# :: Int32# -> Int# -> Int32#
  uncheckedShiftLInt8# :: Int8# -> Int# -> Int8#
  uncheckedShiftLWord16# :: Word16# -> Int# -> Word16#
  uncheckedShiftLWord32# :: Word32# -> Int# -> Word32#
  uncheckedShiftLWord8# :: Word8# -> Int# -> Word8#
  uncheckedShiftRAInt16# :: Int16# -> Int# -> Int16#
  uncheckedShiftRAInt32# :: Int32# -> Int# -> Int32#
  uncheckedShiftRAInt8# :: Int8# -> Int# -> Int8#
  uncheckedShiftRL# :: Word# -> Int# -> Word#
  uncheckedShiftRL64# :: Word64# -> Int# -> Word64#
  uncheckedShiftRLInt16# :: Int16# -> Int# -> Int16#
  uncheckedShiftRLInt32# :: Int32# -> Int# -> Int32#
  uncheckedShiftRLInt8# :: Int8# -> Int# -> Int8#
  uncheckedShiftRLWord16# :: Word16# -> Int# -> Word16#
  uncheckedShiftRLWord32# :: Word32# -> Int# -> Word32#
  uncheckedShiftRLWord8# :: Word8# -> Int# -> Word8#
  unmaskAsyncExceptions# :: forall {q :: GHC.Internal.Types.RuntimeRep} (a :: TYPE q). (State# RealWorld -> (# State# RealWorld, a #)) -> State# RealWorld -> (# State# RealWorld, a #)
  unpackClosure# :: forall a b. a -> (# Addr#, ByteArray#, Array# b #)
  unpackDoubleX2# :: DoubleX2# -> (# Double#, Double# #)
  unpackDoubleX4# :: DoubleX4# -> (# Double#, Double#, Double#, Double# #)
  unpackDoubleX8# :: DoubleX8# -> (# Double#, Double#, Double#, Double#, Double#, Double#, Double#, Double# #)
  unpackFloatX16# :: FloatX16# -> (# Float#, Float#, Float#, Float#, Float#, Float#, Float#, Float#, Float#, Float#, Float#, Float#, Float#, Float#, Float#, Float# #)
  unpackFloatX4# :: FloatX4# -> (# Float#, Float#, Float#, Float# #)
  unpackFloatX8# :: FloatX8# -> (# Float#, Float#, Float#, Float#, Float#, Float#, Float#, Float# #)
  unpackInt16X16# :: Int16X16# -> (# Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16# #)
  unpackInt16X32# :: Int16X32# -> (# Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16# #)
  unpackInt16X8# :: Int16X8# -> (# Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16#, Int16# #)
  unpackInt32X16# :: Int32X16# -> (# Int32#, Int32#, Int32#, Int32#, Int32#, Int32#, Int32#, Int32#, Int32#, Int32#, Int32#, Int32#, Int32#, Int32#, Int32#, Int32# #)
  unpackInt32X4# :: Int32X4# -> (# Int32#, Int32#, Int32#, Int32# #)
  unpackInt32X8# :: Int32X8# -> (# Int32#, Int32#, Int32#, Int32#, Int32#, Int32#, Int32#, Int32# #)
  unpackInt64X2# :: Int64X2# -> (# Int64#, Int64# #)
  unpackInt64X4# :: Int64X4# -> (# Int64#, Int64#, Int64#, Int64# #)
  unpackInt64X8# :: Int64X8# -> (# Int64#, Int64#, Int64#, Int64#, Int64#, Int64#, Int64#, Int64# #)
  unpackInt8X16# :: Int8X16# -> (# Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8# #)
  unpackInt8X32# :: Int8X32# -> (# Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8# #)
  unpackInt8X64# :: Int8X64# -> (# Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8#, Int8# #)
  unpackWord16X16# :: Word16X16# -> (# Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16# #)
  unpackWord16X32# :: Word16X32# -> (# Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16# #)
  unpackWord16X8# :: Word16X8# -> (# Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16#, Word16# #)
  unpackWord32X16# :: Word32X16# -> (# Word32#, Word32#, Word32#, Word32#, Word32#, Word32#, Word32#, Word32#, Word32#, Word32#, Word32#, Word32#, Word32#, Word32#, Word32#, Word32# #)
  unpackWord32X4# :: Word32X4# -> (# Word32#, Word32#, Word32#, Word32# #)
  unpackWord32X8# :: Word32X8# -> (# Word32#, Word32#, Word32#, Word32#, Word32#, Word32#, Word32#, Word32# #)
  unpackWord64X2# :: Word64X2# -> (# Word64#, Word64# #)
  unpackWord64X4# :: Word64X4# -> (# Word64#, Word64#, Word64#, Word64# #)
  unpackWord64X8# :: Word64X8# -> (# Word64#, Word64#, Word64#, Word64#, Word64#, Word64#, Word64#, Word64# #)
  unpackWord8X16# :: Word8X16# -> (# Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8# #)
  unpackWord8X32# :: Word8X32# -> (# Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8# #)
  unpackWord8X64# :: Word8X64# -> (# Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8#, Word8# #)
  unsafeFreezeArray# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). MutableArray# d a -> State# d -> (# State# d, Array# a #)
  unsafeFreezeByteArray# :: forall d. MutableByteArray# d -> State# d -> (# State# d, ByteArray# #)
  unsafeFreezeSmallArray# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). SmallMutableArray# d a -> State# d -> (# State# d, SmallArray# a #)
  unsafeThawArray# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)) d. Array# a -> State# d -> (# State# d, MutableArray# d a #)
  unsafeThawByteArray# :: forall d. ByteArray# -> State# d -> (# State# d, MutableByteArray# d #)
  unsafeThawSmallArray# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)) d. SmallArray# a -> State# d -> (# State# d, SmallMutableArray# d a #)
  void# :: (# #)
  waitRead# :: forall d. Int# -> State# d -> State# d
  waitWrite# :: forall d. Int# -> State# d -> State# d
  whereFrom# :: forall a d. a -> Addr# -> State# d -> (# State# d, Int# #)
  word16ToInt16# :: Word16# -> Int16#
  word16ToWord# :: Word16# -> Word#
  word2Double# :: Word# -> Double#
  word2Float# :: Word# -> Float#
  word2Int# :: Word# -> Int#
  word32ToInt32# :: Word32# -> Int32#
  word32ToWord# :: Word32# -> Word#
  word64ToInt64# :: Word64# -> Int64#
  word64ToWord# :: Word64# -> Word#
  word8ToInt8# :: Word8# -> Int8#
  word8ToWord# :: Word8# -> Word#
  wordToWord16# :: Word# -> Word16#
  wordToWord32# :: Word# -> Word32#
  wordToWord64# :: Word# -> Word64#
  wordToWord8# :: Word# -> Word8#
  writeAddrArray# :: forall d. MutableByteArray# d -> Int# -> Addr# -> State# d -> State# d
  writeAddrOffAddr# :: forall d. Addr# -> Int# -> Addr# -> State# d -> State# d
  writeArray# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). MutableArray# d a -> Int# -> a -> State# d -> State# d
  writeCharArray# :: forall d. MutableByteArray# d -> Int# -> Char# -> State# d -> State# d
  writeCharOffAddr# :: forall d. Addr# -> Int# -> Char# -> State# d -> State# d
  writeDoubleArray# :: forall d. MutableByteArray# d -> Int# -> Double# -> State# d -> State# d
  writeDoubleArrayAsDoubleX2# :: forall d. MutableByteArray# d -> Int# -> DoubleX2# -> State# d -> State# d
  writeDoubleArrayAsDoubleX4# :: forall d. MutableByteArray# d -> Int# -> DoubleX4# -> State# d -> State# d
  writeDoubleArrayAsDoubleX8# :: forall d. MutableByteArray# d -> Int# -> DoubleX8# -> State# d -> State# d
  writeDoubleOffAddr# :: forall d. Addr# -> Int# -> Double# -> State# d -> State# d
  writeDoubleOffAddrAsDoubleX2# :: forall d. Addr# -> Int# -> DoubleX2# -> State# d -> State# d
  writeDoubleOffAddrAsDoubleX4# :: forall d. Addr# -> Int# -> DoubleX4# -> State# d -> State# d
  writeDoubleOffAddrAsDoubleX8# :: forall d. Addr# -> Int# -> DoubleX8# -> State# d -> State# d
  writeDoubleX2Array# :: forall d. MutableByteArray# d -> Int# -> DoubleX2# -> State# d -> State# d
  writeDoubleX2OffAddr# :: forall d. Addr# -> Int# -> DoubleX2# -> State# d -> State# d
  writeDoubleX4Array# :: forall d. MutableByteArray# d -> Int# -> DoubleX4# -> State# d -> State# d
  writeDoubleX4OffAddr# :: forall d. Addr# -> Int# -> DoubleX4# -> State# d -> State# d
  writeDoubleX8Array# :: forall d. MutableByteArray# d -> Int# -> DoubleX8# -> State# d -> State# d
  writeDoubleX8OffAddr# :: forall d. Addr# -> Int# -> DoubleX8# -> State# d -> State# d
  writeFloatArray# :: forall d. MutableByteArray# d -> Int# -> Float# -> State# d -> State# d
  writeFloatArrayAsFloatX16# :: forall d. MutableByteArray# d -> Int# -> FloatX16# -> State# d -> State# d
  writeFloatArrayAsFloatX4# :: forall d. MutableByteArray# d -> Int# -> FloatX4# -> State# d -> State# d
  writeFloatArrayAsFloatX8# :: forall d. MutableByteArray# d -> Int# -> FloatX8# -> State# d -> State# d
  writeFloatOffAddr# :: forall d. Addr# -> Int# -> Float# -> State# d -> State# d
  writeFloatOffAddrAsFloatX16# :: forall d. Addr# -> Int# -> FloatX16# -> State# d -> State# d
  writeFloatOffAddrAsFloatX4# :: forall d. Addr# -> Int# -> FloatX4# -> State# d -> State# d
  writeFloatOffAddrAsFloatX8# :: forall d. Addr# -> Int# -> FloatX8# -> State# d -> State# d
  writeFloatX16Array# :: forall d. MutableByteArray# d -> Int# -> FloatX16# -> State# d -> State# d
  writeFloatX16OffAddr# :: forall d. Addr# -> Int# -> FloatX16# -> State# d -> State# d
  writeFloatX4Array# :: forall d. MutableByteArray# d -> Int# -> FloatX4# -> State# d -> State# d
  writeFloatX4OffAddr# :: forall d. Addr# -> Int# -> FloatX4# -> State# d -> State# d
  writeFloatX8Array# :: forall d. MutableByteArray# d -> Int# -> FloatX8# -> State# d -> State# d
  writeFloatX8OffAddr# :: forall d. Addr# -> Int# -> FloatX8# -> State# d -> State# d
  writeIOPort# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). IOPort# d a -> a -> State# d -> (# State# d, Int# #)
  writeInt16Array# :: forall d. MutableByteArray# d -> Int# -> Int16# -> State# d -> State# d
  writeInt16ArrayAsInt16X16# :: forall d. MutableByteArray# d -> Int# -> Int16X16# -> State# d -> State# d
  writeInt16ArrayAsInt16X32# :: forall d. MutableByteArray# d -> Int# -> Int16X32# -> State# d -> State# d
  writeInt16ArrayAsInt16X8# :: forall d. MutableByteArray# d -> Int# -> Int16X8# -> State# d -> State# d
  writeInt16OffAddr# :: forall d. Addr# -> Int# -> Int16# -> State# d -> State# d
  writeInt16OffAddrAsInt16X16# :: forall d. Addr# -> Int# -> Int16X16# -> State# d -> State# d
  writeInt16OffAddrAsInt16X32# :: forall d. Addr# -> Int# -> Int16X32# -> State# d -> State# d
  writeInt16OffAddrAsInt16X8# :: forall d. Addr# -> Int# -> Int16X8# -> State# d -> State# d
  writeInt16X16Array# :: forall d. MutableByteArray# d -> Int# -> Int16X16# -> State# d -> State# d
  writeInt16X16OffAddr# :: forall d. Addr# -> Int# -> Int16X16# -> State# d -> State# d
  writeInt16X32Array# :: forall d. MutableByteArray# d -> Int# -> Int16X32# -> State# d -> State# d
  writeInt16X32OffAddr# :: forall d. Addr# -> Int# -> Int16X32# -> State# d -> State# d
  writeInt16X8Array# :: forall d. MutableByteArray# d -> Int# -> Int16X8# -> State# d -> State# d
  writeInt16X8OffAddr# :: forall d. Addr# -> Int# -> Int16X8# -> State# d -> State# d
  writeInt32Array# :: forall d. MutableByteArray# d -> Int# -> Int32# -> State# d -> State# d
  writeInt32ArrayAsInt32X16# :: forall d. MutableByteArray# d -> Int# -> Int32X16# -> State# d -> State# d
  writeInt32ArrayAsInt32X4# :: forall d. MutableByteArray# d -> Int# -> Int32X4# -> State# d -> State# d
  writeInt32ArrayAsInt32X8# :: forall d. MutableByteArray# d -> Int# -> Int32X8# -> State# d -> State# d
  writeInt32OffAddr# :: forall d. Addr# -> Int# -> Int32# -> State# d -> State# d
  writeInt32OffAddrAsInt32X16# :: forall d. Addr# -> Int# -> Int32X16# -> State# d -> State# d
  writeInt32OffAddrAsInt32X4# :: forall d. Addr# -> Int# -> Int32X4# -> State# d -> State# d
  writeInt32OffAddrAsInt32X8# :: forall d. Addr# -> Int# -> Int32X8# -> State# d -> State# d
  writeInt32X16Array# :: forall d. MutableByteArray# d -> Int# -> Int32X16# -> State# d -> State# d
  writeInt32X16OffAddr# :: forall d. Addr# -> Int# -> Int32X16# -> State# d -> State# d
  writeInt32X4Array# :: forall d. MutableByteArray# d -> Int# -> Int32X4# -> State# d -> State# d
  writeInt32X4OffAddr# :: forall d. Addr# -> Int# -> Int32X4# -> State# d -> State# d
  writeInt32X8Array# :: forall d. MutableByteArray# d -> Int# -> Int32X8# -> State# d -> State# d
  writeInt32X8OffAddr# :: forall d. Addr# -> Int# -> Int32X8# -> State# d -> State# d
  writeInt64Array# :: forall d. MutableByteArray# d -> Int# -> Int64# -> State# d -> State# d
  writeInt64ArrayAsInt64X2# :: forall d. MutableByteArray# d -> Int# -> Int64X2# -> State# d -> State# d
  writeInt64ArrayAsInt64X4# :: forall d. MutableByteArray# d -> Int# -> Int64X4# -> State# d -> State# d
  writeInt64ArrayAsInt64X8# :: forall d. MutableByteArray# d -> Int# -> Int64X8# -> State# d -> State# d
  writeInt64OffAddr# :: forall d. Addr# -> Int# -> Int64# -> State# d -> State# d
  writeInt64OffAddrAsInt64X2# :: forall d. Addr# -> Int# -> Int64X2# -> State# d -> State# d
  writeInt64OffAddrAsInt64X4# :: forall d. Addr# -> Int# -> Int64X4# -> State# d -> State# d
  writeInt64OffAddrAsInt64X8# :: forall d. Addr# -> Int# -> Int64X8# -> State# d -> State# d
  writeInt64X2Array# :: forall d. MutableByteArray# d -> Int# -> Int64X2# -> State# d -> State# d
  writeInt64X2OffAddr# :: forall d. Addr# -> Int# -> Int64X2# -> State# d -> State# d
  writeInt64X4Array# :: forall d. MutableByteArray# d -> Int# -> Int64X4# -> State# d -> State# d
  writeInt64X4OffAddr# :: forall d. Addr# -> Int# -> Int64X4# -> State# d -> State# d
  writeInt64X8Array# :: forall d. MutableByteArray# d -> Int# -> Int64X8# -> State# d -> State# d
  writeInt64X8OffAddr# :: forall d. Addr# -> Int# -> Int64X8# -> State# d -> State# d
  writeInt8Array# :: forall d. MutableByteArray# d -> Int# -> Int8# -> State# d -> State# d
  writeInt8ArrayAsInt8X16# :: forall d. MutableByteArray# d -> Int# -> Int8X16# -> State# d -> State# d
  writeInt8ArrayAsInt8X32# :: forall d. MutableByteArray# d -> Int# -> Int8X32# -> State# d -> State# d
  writeInt8ArrayAsInt8X64# :: forall d. MutableByteArray# d -> Int# -> Int8X64# -> State# d -> State# d
  writeInt8OffAddr# :: forall d. Addr# -> Int# -> Int8# -> State# d -> State# d
  writeInt8OffAddrAsInt8X16# :: forall d. Addr# -> Int# -> Int8X16# -> State# d -> State# d
  writeInt8OffAddrAsInt8X32# :: forall d. Addr# -> Int# -> Int8X32# -> State# d -> State# d
  writeInt8OffAddrAsInt8X64# :: forall d. Addr# -> Int# -> Int8X64# -> State# d -> State# d
  writeInt8X16Array# :: forall d. MutableByteArray# d -> Int# -> Int8X16# -> State# d -> State# d
  writeInt8X16OffAddr# :: forall d. Addr# -> Int# -> Int8X16# -> State# d -> State# d
  writeInt8X32Array# :: forall d. MutableByteArray# d -> Int# -> Int8X32# -> State# d -> State# d
  writeInt8X32OffAddr# :: forall d. Addr# -> Int# -> Int8X32# -> State# d -> State# d
  writeInt8X64Array# :: forall d. MutableByteArray# d -> Int# -> Int8X64# -> State# d -> State# d
  writeInt8X64OffAddr# :: forall d. Addr# -> Int# -> Int8X64# -> State# d -> State# d
  writeIntArray# :: forall d. MutableByteArray# d -> Int# -> Int# -> State# d -> State# d
  writeIntOffAddr# :: forall d. Addr# -> Int# -> Int# -> State# d -> State# d
  writeMutVar# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). MutVar# d a -> a -> State# d -> State# d
  writeSmallArray# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). SmallMutableArray# d a -> Int# -> a -> State# d -> State# d
  writeStablePtrArray# :: forall d a. MutableByteArray# d -> Int# -> StablePtr# a -> State# d -> State# d
  writeStablePtrOffAddr# :: forall a d. Addr# -> Int# -> StablePtr# a -> State# d -> State# d
  writeTVar# :: forall {l :: GHC.Internal.Types.Levity} d (a :: TYPE (GHC.Internal.Types.BoxedRep l)). TVar# d a -> a -> State# d -> State# d
  writeWideCharArray# :: forall d. MutableByteArray# d -> Int# -> Char# -> State# d -> State# d
  writeWideCharOffAddr# :: forall d. Addr# -> Int# -> Char# -> State# d -> State# d
  writeWord16Array# :: forall d. MutableByteArray# d -> Int# -> Word16# -> State# d -> State# d
  writeWord16ArrayAsWord16X16# :: forall d. MutableByteArray# d -> Int# -> Word16X16# -> State# d -> State# d
  writeWord16ArrayAsWord16X32# :: forall d. MutableByteArray# d -> Int# -> Word16X32# -> State# d -> State# d
  writeWord16ArrayAsWord16X8# :: forall d. MutableByteArray# d -> Int# -> Word16X8# -> State# d -> State# d
  writeWord16OffAddr# :: forall d. Addr# -> Int# -> Word16# -> State# d -> State# d
  writeWord16OffAddrAsWord16X16# :: forall d. Addr# -> Int# -> Word16X16# -> State# d -> State# d
  writeWord16OffAddrAsWord16X32# :: forall d. Addr# -> Int# -> Word16X32# -> State# d -> State# d
  writeWord16OffAddrAsWord16X8# :: forall d. Addr# -> Int# -> Word16X8# -> State# d -> State# d
  writeWord16X16Array# :: forall d. MutableByteArray# d -> Int# -> Word16X16# -> State# d -> State# d
  writeWord16X16OffAddr# :: forall d. Addr# -> Int# -> Word16X16# -> State# d -> State# d
  writeWord16X32Array# :: forall d. MutableByteArray# d -> Int# -> Word16X32# -> State# d -> State# d
  writeWord16X32OffAddr# :: forall d. Addr# -> Int# -> Word16X32# -> State# d -> State# d
  writeWord16X8Array# :: forall d. MutableByteArray# d -> Int# -> Word16X8# -> State# d -> State# d
  writeWord16X8OffAddr# :: forall d. Addr# -> Int# -> Word16X8# -> State# d -> State# d
  writeWord32Array# :: forall d. MutableByteArray# d -> Int# -> Word32# -> State# d -> State# d
  writeWord32ArrayAsWord32X16# :: forall d. MutableByteArray# d -> Int# -> Word32X16# -> State# d -> State# d
  writeWord32ArrayAsWord32X4# :: forall d. MutableByteArray# d -> Int# -> Word32X4# -> State# d -> State# d
  writeWord32ArrayAsWord32X8# :: forall d. MutableByteArray# d -> Int# -> Word32X8# -> State# d -> State# d
  writeWord32OffAddr# :: forall d. Addr# -> Int# -> Word32# -> State# d -> State# d
  writeWord32OffAddrAsWord32X16# :: forall d. Addr# -> Int# -> Word32X16# -> State# d -> State# d
  writeWord32OffAddrAsWord32X4# :: forall d. Addr# -> Int# -> Word32X4# -> State# d -> State# d
  writeWord32OffAddrAsWord32X8# :: forall d. Addr# -> Int# -> Word32X8# -> State# d -> State# d
  writeWord32X16Array# :: forall d. MutableByteArray# d -> Int# -> Word32X16# -> State# d -> State# d
  writeWord32X16OffAddr# :: forall d. Addr# -> Int# -> Word32X16# -> State# d -> State# d
  writeWord32X4Array# :: forall d. MutableByteArray# d -> Int# -> Word32X4# -> State# d -> State# d
  writeWord32X4OffAddr# :: forall d. Addr# -> Int# -> Word32X4# -> State# d -> State# d
  writeWord32X8Array# :: forall d. MutableByteArray# d -> Int# -> Word32X8# -> State# d -> State# d
  writeWord32X8OffAddr# :: forall d. Addr# -> Int# -> Word32X8# -> State# d -> State# d
  writeWord64Array# :: forall d. MutableByteArray# d -> Int# -> Word64# -> State# d -> State# d
  writeWord64ArrayAsWord64X2# :: forall d. MutableByteArray# d -> Int# -> Word64X2# -> State# d -> State# d
  writeWord64ArrayAsWord64X4# :: forall d. MutableByteArray# d -> Int# -> Word64X4# -> State# d -> State# d
  writeWord64ArrayAsWord64X8# :: forall d. MutableByteArray# d -> Int# -> Word64X8# -> State# d -> State# d
  writeWord64OffAddr# :: forall d. Addr# -> Int# -> Word64# -> State# d -> State# d
  writeWord64OffAddrAsWord64X2# :: forall d. Addr# -> Int# -> Word64X2# -> State# d -> State# d
  writeWord64OffAddrAsWord64X4# :: forall d. Addr# -> Int# -> Word64X4# -> State# d -> State# d
  writeWord64OffAddrAsWord64X8# :: forall d. Addr# -> Int# -> Word64X8# -> State# d -> State# d
  writeWord64X2Array# :: forall d. MutableByteArray# d -> Int# -> Word64X2# -> State# d -> State# d
  writeWord64X2OffAddr# :: forall d. Addr# -> Int# -> Word64X2# -> State# d -> State# d
  writeWord64X4Array# :: forall d. MutableByteArray# d -> Int# -> Word64X4# -> State# d -> State# d
  writeWord64X4OffAddr# :: forall d. Addr# -> Int# -> Word64X4# -> State# d -> State# d
  writeWord64X8Array# :: forall d. MutableByteArray# d -> Int# -> Word64X8# -> State# d -> State# d
  writeWord64X8OffAddr# :: forall d. Addr# -> Int# -> Word64X8# -> State# d -> State# d
  writeWord8Array# :: forall d. MutableByteArray# d -> Int# -> Word8# -> State# d -> State# d
  writeWord8ArrayAsAddr# :: forall d. MutableByteArray# d -> Int# -> Addr# -> State# d -> State# d
  writeWord8ArrayAsChar# :: forall d. MutableByteArray# d -> Int# -> Char# -> State# d -> State# d
  writeWord8ArrayAsDouble# :: forall d. MutableByteArray# d -> Int# -> Double# -> State# d -> State# d
  writeWord8ArrayAsFloat# :: forall d. MutableByteArray# d -> Int# -> Float# -> State# d -> State# d
  writeWord8ArrayAsInt# :: forall d. MutableByteArray# d -> Int# -> Int# -> State# d -> State# d
  writeWord8ArrayAsInt16# :: forall d. MutableByteArray# d -> Int# -> Int16# -> State# d -> State# d
  writeWord8ArrayAsInt32# :: forall d. MutableByteArray# d -> Int# -> Int32# -> State# d -> State# d
  writeWord8ArrayAsInt64# :: forall d. MutableByteArray# d -> Int# -> Int64# -> State# d -> State# d
  writeWord8ArrayAsStablePtr# :: forall d a. MutableByteArray# d -> Int# -> StablePtr# a -> State# d -> State# d
  writeWord8ArrayAsWideChar# :: forall d. MutableByteArray# d -> Int# -> Char# -> State# d -> State# d
  writeWord8ArrayAsWord# :: forall d. MutableByteArray# d -> Int# -> Word# -> State# d -> State# d
  writeWord8ArrayAsWord16# :: forall d. MutableByteArray# d -> Int# -> Word16# -> State# d -> State# d
  writeWord8ArrayAsWord32# :: forall d. MutableByteArray# d -> Int# -> Word32# -> State# d -> State# d
  writeWord8ArrayAsWord64# :: forall d. MutableByteArray# d -> Int# -> Word64# -> State# d -> State# d
  writeWord8ArrayAsWord8X16# :: forall d. MutableByteArray# d -> Int# -> Word8X16# -> State# d -> State# d
  writeWord8ArrayAsWord8X32# :: forall d. MutableByteArray# d -> Int# -> Word8X32# -> State# d -> State# d
  writeWord8ArrayAsWord8X64# :: forall d. MutableByteArray# d -> Int# -> Word8X64# -> State# d -> State# d
  writeWord8OffAddr# :: forall d. Addr# -> Int# -> Word8# -> State# d -> State# d
  writeWord8OffAddrAsAddr# :: forall d. Addr# -> Int# -> Addr# -> State# d -> State# d
  writeWord8OffAddrAsChar# :: forall d. Addr# -> Int# -> Char# -> State# d -> State# d
  writeWord8OffAddrAsDouble# :: forall d. Addr# -> Int# -> Double# -> State# d -> State# d
  writeWord8OffAddrAsFloat# :: forall d. Addr# -> Int# -> Float# -> State# d -> State# d
  writeWord8OffAddrAsInt# :: forall d. Addr# -> Int# -> Int# -> State# d -> State# d
  writeWord8OffAddrAsInt16# :: forall d. Addr# -> Int# -> Int16# -> State# d -> State# d
  writeWord8OffAddrAsInt32# :: forall d. Addr# -> Int# -> Int32# -> State# d -> State# d
  writeWord8OffAddrAsInt64# :: forall d. Addr# -> Int# -> Int64# -> State# d -> State# d
  writeWord8OffAddrAsStablePtr# :: forall a d. Addr# -> Int# -> StablePtr# a -> State# d -> State# d
  writeWord8OffAddrAsWideChar# :: forall d. Addr# -> Int# -> Char# -> State# d -> State# d
  writeWord8OffAddrAsWord# :: forall d. Addr# -> Int# -> Word# -> State# d -> State# d
  writeWord8OffAddrAsWord16# :: forall d. Addr# -> Int# -> Word16# -> State# d -> State# d
  writeWord8OffAddrAsWord32# :: forall d. Addr# -> Int# -> Word32# -> State# d -> State# d
  writeWord8OffAddrAsWord64# :: forall d. Addr# -> Int# -> Word64# -> State# d -> State# d
  writeWord8OffAddrAsWord8X16# :: forall d. Addr# -> Int# -> Word8X16# -> State# d -> State# d
  writeWord8OffAddrAsWord8X32# :: forall d. Addr# -> Int# -> Word8X32# -> State# d -> State# d
  writeWord8OffAddrAsWord8X64# :: forall d. Addr# -> Int# -> Word8X64# -> State# d -> State# d
  writeWord8X16Array# :: forall d. MutableByteArray# d -> Int# -> Word8X16# -> State# d -> State# d
  writeWord8X16OffAddr# :: forall d. Addr# -> Int# -> Word8X16# -> State# d -> State# d
  writeWord8X32Array# :: forall d. MutableByteArray# d -> Int# -> Word8X32# -> State# d -> State# d
  writeWord8X32OffAddr# :: forall d. Addr# -> Int# -> Word8X32# -> State# d -> State# d
  writeWord8X64Array# :: forall d. MutableByteArray# d -> Int# -> Word8X64# -> State# d -> State# d
  writeWord8X64OffAddr# :: forall d. Addr# -> Int# -> Word8X64# -> State# d -> State# d
  writeWordArray# :: forall d. MutableByteArray# d -> Int# -> Word# -> State# d -> State# d
  writeWordOffAddr# :: forall d. Addr# -> Int# -> Word# -> State# d -> State# d
  xor# :: Word# -> Word# -> Word#
  xor64# :: Word64# -> Word64# -> Word64#
  xorI# :: Int# -> Int# -> Int#
  xorWord16# :: Word16# -> Word16# -> Word16#
  xorWord32# :: Word32# -> Word32# -> Word32#
  xorWord8# :: Word8# -> Word8# -> Word8#
  yield# :: State# RealWorld -> State# RealWorld

module GHC.Prim.Exception where
  -- Safety: None
  raiseDivZero :: forall a. a
  raiseOverflow :: forall a. a
  raiseUnderflow :: forall a. a

module GHC.Prim.Ext where
  -- Safety: None
  asyncDoProc# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.Int#, GHC.Internal.Prim.Int# #)
  asyncRead# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.Int#, GHC.Internal.Prim.Int# #)
  asyncWrite# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.Int#, GHC.Internal.Prim.Int# #)
  getThreadAllocationCounter# :: GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.Int64# #)

module GHC.Prim.Panic where
  -- Safety: None
  absentConstraintError :: forall (a :: Constraint). GHC.Internal.Prim.Addr# -=> a
  absentError :: forall a. GHC.Internal.Prim.Addr# -> a
  absentSumFieldError :: forall a. a
  panicError :: forall a. GHC.Internal.Prim.Addr# -> a

module GHC.Prim.PtrEq where
  -- Safety: Unsafe
  eqStableName# :: forall {k :: GHC.Internal.Types.Levity} {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep k)) (b :: TYPE (GHC.Internal.Types.BoxedRep l)). GHC.Internal.Prim.StableName# a -> GHC.Internal.Prim.StableName# b -> GHC.Internal.Prim.Int#
  reallyUnsafePtrEquality :: forall a. a -> a -> GHC.Internal.Prim.Int#
  sameArray# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)). GHC.Internal.Prim.Array# a -> GHC.Internal.Prim.Array# a -> GHC.Internal.Prim.Int#
  sameByteArray# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int#
  sameIOPort# :: forall {l :: GHC.Internal.Types.Levity} s (a :: TYPE (GHC.Internal.Types.BoxedRep l)). GHC.Internal.Prim.IOPort# s a -> GHC.Internal.Prim.IOPort# s a -> GHC.Internal.Prim.Int#
  sameMVar# :: forall {l :: GHC.Internal.Types.Levity} s (a :: TYPE (GHC.Internal.Types.BoxedRep l)). GHC.Internal.Prim.MVar# s a -> GHC.Internal.Prim.MVar# s a -> GHC.Internal.Prim.Int#
  sameMutVar# :: forall {l :: GHC.Internal.Types.Levity} s (a :: TYPE (GHC.Internal.Types.BoxedRep l)). GHC.Internal.Prim.MutVar# s a -> GHC.Internal.Prim.MutVar# s a -> GHC.Internal.Prim.Int#
  sameMutableArray# :: forall {l :: GHC.Internal.Types.Levity} s (a :: TYPE (GHC.Internal.Types.BoxedRep l)). GHC.Internal.Prim.MutableArray# s a -> GHC.Internal.Prim.MutableArray# s a -> GHC.Internal.Prim.Int#
  sameMutableByteArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int#
  samePromptTag# :: forall a. GHC.Internal.Prim.PromptTag# a -> GHC.Internal.Prim.PromptTag# a -> GHC.Internal.Prim.Int#
  sameSmallArray# :: forall {l :: GHC.Internal.Types.Levity} (a :: TYPE (GHC.Internal.Types.BoxedRep l)). GHC.Internal.Prim.SmallArray# a -> GHC.Internal.Prim.SmallArray# a -> GHC.Internal.Prim.Int#
  sameSmallMutableArray# :: forall {l :: GHC.Internal.Types.Levity} s (a :: TYPE (GHC.Internal.Types.BoxedRep l)). GHC.Internal.Prim.SmallMutableArray# s a -> GHC.Internal.Prim.SmallMutableArray# s a -> GHC.Internal.Prim.Int#
  sameTVar# :: forall {l :: GHC.Internal.Types.Levity} s (a :: TYPE (GHC.Internal.Types.BoxedRep l)). GHC.Internal.Prim.TVar# s a -> GHC.Internal.Prim.TVar# s a -> GHC.Internal.Prim.Int#
  unsafePtrEquality# :: forall (a :: GHC.Internal.Types.UnliftedType) (b :: GHC.Internal.Types.UnliftedType). a -> b -> GHC.Internal.Prim.Int#

module GHC.PrimopWrappers where
  -- Safety: None
  (*#) :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  (*##) :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  (**##) :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  (+#) :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  (+##) :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  (-#) :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  (-##) :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  (/##) :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  (/=#) :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  (/=##) :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Int#
  (<#) :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  (<##) :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Int#
  (<=#) :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  (<=##) :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Int#
  (==#) :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  (==##) :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Int#
  (>#) :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  (>##) :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Int#
  (>=#) :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  (>=##) :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Int#
  acosDouble# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  acosFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  acoshDouble# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  acoshFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  addCFinalizerToWeak# :: forall b_levpoly. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Weak# b_levpoly -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.Int# #)
  addIntC# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> (# GHC.Internal.Prim.Int#, GHC.Internal.Prim.Int# #)
  addWordC# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> (# GHC.Internal.Prim.Word#, GHC.Internal.Prim.Int# #)
  addr2Int# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int#
  addrToAny# :: forall a_levpoly. GHC.Internal.Prim.Addr# -> (# a_levpoly #)
  and# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  and64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64#
  andI# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  andWord16# :: GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16#
  andWord32# :: GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32#
  andWord8# :: GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8#
  anyToAddr# :: forall a. a -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.Addr# #)
  asinDouble# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  asinFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  asinhDouble# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  asinhFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  atanDouble# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  atanFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  atanhDouble# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  atanhFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  atomicCasAddrAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Addr# #)
  atomicCasWord16Addr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word16# #)
  atomicCasWord32Addr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word32# #)
  atomicCasWord64Addr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word64# #)
  atomicCasWord8Addr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word8# #)
  atomicCasWordAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word# #)
  atomicExchangeAddrAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Addr# #)
  atomicExchangeWordAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word# #)
  atomicModifyMutVar2# :: forall s a c. GHC.Internal.Prim.MutVar# s a -> (a -> c) -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, a, c #)
  atomicModifyMutVar_# :: forall s a. GHC.Internal.Prim.MutVar# s a -> (a -> a) -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, a, a #)
  atomicReadIntArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int# #)
  atomicReadWordAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word# #)
  atomicSwapMutVar# :: forall s a_levpoly. GHC.Internal.Prim.MutVar# s a_levpoly -> a_levpoly -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, a_levpoly #)
  atomicWriteIntArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  atomicWriteWordAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  atomically# :: forall a_levpoly. (GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a_levpoly #)) -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a_levpoly #)
  bitReverse# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  bitReverse16# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  bitReverse32# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  bitReverse64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64#
  bitReverse8# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  byteArrayContents# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Addr#
  byteSwap# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  byteSwap16# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  byteSwap32# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  byteSwap64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64#
  casArray# :: forall s a_levpoly. GHC.Internal.Prim.MutableArray# s a_levpoly -> GHC.Internal.Prim.Int# -> a_levpoly -> a_levpoly -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int#, a_levpoly #)
  casInt16Array# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int16# #)
  casInt32Array# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int32# #)
  casInt64Array# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int64# #)
  casInt8Array# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int8# #)
  casIntArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int# #)
  casMutVar# :: forall s a_levpoly. GHC.Internal.Prim.MutVar# s a_levpoly -> a_levpoly -> a_levpoly -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int#, a_levpoly #)
  casSmallArray# :: forall s a_levpoly. GHC.Internal.Prim.SmallMutableArray# s a_levpoly -> GHC.Internal.Prim.Int# -> a_levpoly -> a_levpoly -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int#, a_levpoly #)
  castDoubleToWord64# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Word64#
  castFloatToWord32# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Word32#
  castWord32ToFloat# :: GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Float#
  castWord64ToDouble# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Double#
  catch# :: forall a_reppoly b_levpoly. (GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a_reppoly #)) -> (b_levpoly -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a_reppoly #)) -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a_reppoly #)
  catchRetry# :: forall a_levpoly. (GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a_levpoly #)) -> (GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a_levpoly #)) -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a_levpoly #)
  catchSTM# :: forall a_levpoly b. (GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a_levpoly #)) -> (b -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a_levpoly #)) -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a_levpoly #)
  chr# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Char#
  clearCCS# :: forall s a. (GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, a #)) -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, a #)
  cloneArray# :: forall a_levpoly. GHC.Internal.Prim.Array# a_levpoly -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Array# a_levpoly
  cloneMutableArray# :: forall s a_levpoly. GHC.Internal.Prim.MutableArray# s a_levpoly -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.MutableArray# s a_levpoly #)
  cloneSmallArray# :: forall a_levpoly. GHC.Internal.Prim.SmallArray# a_levpoly -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.SmallArray# a_levpoly
  cloneSmallMutableArray# :: forall s a_levpoly. GHC.Internal.Prim.SmallMutableArray# s a_levpoly -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.SmallMutableArray# s a_levpoly #)
  closureSize# :: forall a. a -> GHC.Internal.Prim.Int#
  clz# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  clz16# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  clz32# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  clz64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word#
  clz8# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  compactAdd# :: forall a. GHC.Internal.Prim.Compact# -> a -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a #)
  compactAddWithSharing# :: forall a. GHC.Internal.Prim.Compact# -> a -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a #)
  compactAllocateBlock# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.Addr# #)
  compactContains# :: forall a. GHC.Internal.Prim.Compact# -> a -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.Int# #)
  compactContainsAny# :: forall a. a -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.Int# #)
  compactFixupPointers# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.Compact#, GHC.Internal.Prim.Addr# #)
  compactGetFirstBlock# :: GHC.Internal.Prim.Compact# -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.Addr#, GHC.Internal.Prim.Word# #)
  compactGetNextBlock# :: GHC.Internal.Prim.Compact# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.Addr#, GHC.Internal.Prim.Word# #)
  compactNew# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.Compact# #)
  compactResize# :: GHC.Internal.Prim.Compact# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld
  compactSize# :: GHC.Internal.Prim.Compact# -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.Word# #)
  compareByteArrays# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  control0# :: forall a b_reppoly. GHC.Internal.Prim.PromptTag# a -> (((GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, b_reppoly #)) -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a #)) -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a #)) -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, b_reppoly #)
  copyAddrToAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld
  copyAddrToAddrNonOverlapping# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld
  copyAddrToByteArray# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  copyArray# :: forall a_levpoly s. GHC.Internal.Prim.Array# a_levpoly -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.MutableArray# s a_levpoly -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  copyByteArray# :: forall s. GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  copyByteArrayToAddr# :: forall s. GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  copyMutableArray# :: forall s a_levpoly. GHC.Internal.Prim.MutableArray# s a_levpoly -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.MutableArray# s a_levpoly -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  copyMutableByteArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  copyMutableByteArrayNonOverlapping# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  copyMutableByteArrayToAddr# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  copySmallArray# :: forall a_levpoly s. GHC.Internal.Prim.SmallArray# a_levpoly -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.SmallMutableArray# s a_levpoly -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  copySmallMutableArray# :: forall s a_levpoly. GHC.Internal.Prim.SmallMutableArray# s a_levpoly -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.SmallMutableArray# s a_levpoly -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  cosDouble# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  cosFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  coshDouble# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  coshFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  ctz# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  ctz16# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  ctz32# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  ctz64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word#
  ctz8# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  dataToTagLarge# :: forall a_levpoly. a_levpoly -> GHC.Internal.Prim.Int#
  dataToTagSmall# :: forall a_levpoly. a_levpoly -> GHC.Internal.Prim.Int#
  deRefStablePtr# :: forall a_levpoly. GHC.Internal.Prim.StablePtr# a_levpoly -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a_levpoly #)
  deRefWeak# :: forall a_levpoly. GHC.Internal.Prim.Weak# a_levpoly -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.Int#, a_levpoly #)
  decodeDouble_2Int# :: GHC.Internal.Prim.Double# -> (# GHC.Internal.Prim.Int#, GHC.Internal.Prim.Word#, GHC.Internal.Prim.Word#, GHC.Internal.Prim.Int# #)
  decodeDouble_Int64# :: GHC.Internal.Prim.Double# -> (# GHC.Internal.Prim.Int64#, GHC.Internal.Prim.Int# #)
  decodeFloat_Int# :: GHC.Internal.Prim.Float# -> (# GHC.Internal.Prim.Int#, GHC.Internal.Prim.Int# #)
  delay# :: forall s. GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  divideFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  double2Float# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Float#
  double2Int# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Int#
  eqAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int#
  eqChar# :: GHC.Internal.Prim.Char# -> GHC.Internal.Prim.Char# -> GHC.Internal.Prim.Int#
  eqFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Int#
  eqInt16# :: GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int#
  eqInt32# :: GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int#
  eqInt64# :: GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int#
  eqInt8# :: GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int#
  eqStablePtr# :: forall a_levpoly. GHC.Internal.Prim.StablePtr# a_levpoly -> GHC.Internal.Prim.StablePtr# a_levpoly -> GHC.Internal.Prim.Int#
  eqWord# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Int#
  eqWord16# :: GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Int#
  eqWord32# :: GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Int#
  eqWord64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Int#
  eqWord8# :: GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Int#
  expDouble# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  expFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  expm1Double# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  expm1Float# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  fabsDouble# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  fabsFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  fetchAddIntArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int# #)
  fetchAddWordAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word# #)
  fetchAndIntArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int# #)
  fetchAndWordAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word# #)
  fetchNandIntArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int# #)
  fetchNandWordAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word# #)
  fetchOrIntArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int# #)
  fetchOrWordAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word# #)
  fetchSubIntArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int# #)
  fetchSubWordAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word# #)
  fetchXorIntArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int# #)
  fetchXorWordAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word# #)
  finalizeWeak# :: forall a_levpoly b. GHC.Internal.Prim.Weak# a_levpoly -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.Int#, GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, b #) #)
  float2Double# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Double#
  float2Int# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Int#
  fmaddDouble# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  fmaddFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  fmsubDouble# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  fmsubFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  fnmaddDouble# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  fnmaddFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  fnmsubDouble# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  fnmsubFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  fork# :: forall a_reppoly. (GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a_reppoly #)) -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.ThreadId# #)
  forkOn# :: forall a_reppoly. GHC.Internal.Prim.Int# -> (GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a_reppoly #)) -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.ThreadId# #)
  freezeArray# :: forall s a_levpoly. GHC.Internal.Prim.MutableArray# s a_levpoly -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Array# a_levpoly #)
  freezeSmallArray# :: forall s a_levpoly. GHC.Internal.Prim.SmallMutableArray# s a_levpoly -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.SmallArray# a_levpoly #)
  geAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int#
  geChar# :: GHC.Internal.Prim.Char# -> GHC.Internal.Prim.Char# -> GHC.Internal.Prim.Int#
  geFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Int#
  geInt16# :: GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int#
  geInt32# :: GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int#
  geInt64# :: GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int#
  geInt8# :: GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int#
  geWord# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Int#
  geWord16# :: GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Int#
  geWord32# :: GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Int#
  geWord64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Int#
  geWord8# :: GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Int#
  getApStackVal# :: forall a b. a -> GHC.Internal.Prim.Int# -> (# GHC.Internal.Prim.Int#, b #)
  getCCSOf# :: forall a s. a -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Addr# #)
  getCurrentCCS# :: forall a s. a -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Addr# #)
  getMaskingState# :: GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.Int# #)
  getSizeofMutableByteArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int# #)
  getSizeofSmallMutableArray# :: forall s a_levpoly. GHC.Internal.Prim.SmallMutableArray# s a_levpoly -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int# #)
  getSpark# :: forall s a. GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int#, a #)
  gtAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int#
  gtChar# :: GHC.Internal.Prim.Char# -> GHC.Internal.Prim.Char# -> GHC.Internal.Prim.Int#
  gtFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Int#
  gtInt16# :: GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int#
  gtInt32# :: GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int#
  gtInt64# :: GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int#
  gtInt8# :: GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int#
  gtWord# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Int#
  gtWord16# :: GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Int#
  gtWord32# :: GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Int#
  gtWord64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Int#
  gtWord8# :: GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Int#
  indexAddrArray# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Addr#
  indexAddrOffAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Addr#
  indexArray# :: forall a_levpoly. GHC.Internal.Prim.Array# a_levpoly -> GHC.Internal.Prim.Int# -> (# a_levpoly #)
  indexCharArray# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Char#
  indexCharOffAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Char#
  indexDoubleArray# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Double#
  indexDoubleOffAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Double#
  indexFloatArray# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Float#
  indexFloatOffAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Float#
  indexInt16Array# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int16#
  indexInt16OffAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int16#
  indexInt32Array# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int32#
  indexInt32OffAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int32#
  indexInt64Array# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int64#
  indexInt64OffAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int64#
  indexInt8Array# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int8#
  indexInt8OffAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int8#
  indexIntArray# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  indexIntOffAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  indexSmallArray# :: forall a_levpoly. GHC.Internal.Prim.SmallArray# a_levpoly -> GHC.Internal.Prim.Int# -> (# a_levpoly #)
  indexStablePtrArray# :: forall a. GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.StablePtr# a
  indexStablePtrOffAddr# :: forall a. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.StablePtr# a
  indexWideCharArray# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Char#
  indexWideCharOffAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Char#
  indexWord16Array# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word16#
  indexWord16OffAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word16#
  indexWord32Array# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word32#
  indexWord32OffAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word32#
  indexWord64Array# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word64#
  indexWord64OffAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word64#
  indexWord8Array# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word8#
  indexWord8ArrayAsAddr# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Addr#
  indexWord8ArrayAsChar# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Char#
  indexWord8ArrayAsDouble# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Double#
  indexWord8ArrayAsFloat# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Float#
  indexWord8ArrayAsInt# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  indexWord8ArrayAsInt16# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int16#
  indexWord8ArrayAsInt32# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int32#
  indexWord8ArrayAsInt64# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int64#
  indexWord8ArrayAsStablePtr# :: forall a. GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.StablePtr# a
  indexWord8ArrayAsWideChar# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Char#
  indexWord8ArrayAsWord# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word#
  indexWord8ArrayAsWord16# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word16#
  indexWord8ArrayAsWord32# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word32#
  indexWord8ArrayAsWord64# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word64#
  indexWord8OffAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word8#
  indexWord8OffAddrAsAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Addr#
  indexWord8OffAddrAsChar# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Char#
  indexWord8OffAddrAsDouble# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Double#
  indexWord8OffAddrAsFloat# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Float#
  indexWord8OffAddrAsInt# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  indexWord8OffAddrAsInt16# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int16#
  indexWord8OffAddrAsInt32# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int32#
  indexWord8OffAddrAsInt64# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int64#
  indexWord8OffAddrAsStablePtr# :: forall a. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.StablePtr# a
  indexWord8OffAddrAsWideChar# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Char#
  indexWord8OffAddrAsWord# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word#
  indexWord8OffAddrAsWord16# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word16#
  indexWord8OffAddrAsWord32# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word32#
  indexWord8OffAddrAsWord64# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word64#
  indexWordArray# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word#
  indexWordOffAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word#
  int16ToInt# :: GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int#
  int16ToWord16# :: GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Word16#
  int2Addr# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Addr#
  int2Double# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Double#
  int2Float# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Float#
  int2Word# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word#
  int32ToInt# :: GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int#
  int32ToWord32# :: GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Word32#
  int64ToInt# :: GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int#
  int64ToWord64# :: GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Word64#
  int8ToInt# :: GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int#
  int8ToWord8# :: GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Word8#
  intToInt16# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int16#
  intToInt32# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int32#
  intToInt64# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int64#
  intToInt8# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int8#
  isByteArrayPinned# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int#
  isByteArrayWeaklyPinned# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int#
  isCurrentThreadBound# :: GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.Int# #)
  isEmptyMVar# :: forall s a_levpoly. GHC.Internal.Prim.MVar# s a_levpoly -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int# #)
  isMutableByteArrayPinned# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int#
  isMutableByteArrayWeaklyPinned# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int#
  keepAlive# :: forall a_levpoly s b_reppoly. a_levpoly -> GHC.Internal.Prim.State# s -> (GHC.Internal.Prim.State# s -> b_reppoly) -> b_reppoly
  killThread# :: forall a. GHC.Internal.Prim.ThreadId# -> a -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld
  labelThread# :: GHC.Internal.Prim.ThreadId# -> GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld
  leAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int#
  leChar# :: GHC.Internal.Prim.Char# -> GHC.Internal.Prim.Char# -> GHC.Internal.Prim.Int#
  leFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Int#
  leInt16# :: GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int#
  leInt32# :: GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int#
  leInt64# :: GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int#
  leInt8# :: GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int#
  leWord# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Int#
  leWord16# :: GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Int#
  leWord32# :: GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Int#
  leWord64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Int#
  leWord8# :: GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Int#
  listThreads# :: GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.Array# GHC.Internal.Prim.ThreadId# #)
  log1pDouble# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  log1pFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  logDouble# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  logFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  ltAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int#
  ltChar# :: GHC.Internal.Prim.Char# -> GHC.Internal.Prim.Char# -> GHC.Internal.Prim.Int#
  ltFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Int#
  ltInt16# :: GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int#
  ltInt32# :: GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int#
  ltInt64# :: GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int#
  ltInt8# :: GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int#
  ltWord# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Int#
  ltWord16# :: GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Int#
  ltWord32# :: GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Int#
  ltWord64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Int#
  ltWord8# :: GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Int#
  makeStableName# :: forall a_levpoly. a_levpoly -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.StableName# a_levpoly #)
  makeStablePtr# :: forall a_levpoly. a_levpoly -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.StablePtr# a_levpoly #)
  maskAsyncExceptions# :: forall a_reppoly. (GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a_reppoly #)) -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a_reppoly #)
  maskUninterruptible# :: forall a_reppoly. (GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a_reppoly #)) -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a_reppoly #)
  maxDouble# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  maxFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  minDouble# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  minFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  minusAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int#
  minusFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  minusWord# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  mkApUpd0# :: forall a. GHC.Internal.Prim.BCO -> (# a #)
  mkWeak# :: forall a_levpoly b_levpoly c. a_levpoly -> b_levpoly -> (GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, c #)) -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.Weak# b_levpoly #)
  mkWeakNoFinalizer# :: forall a_levpoly b_levpoly. a_levpoly -> b_levpoly -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.Weak# b_levpoly #)
  mulIntMayOflo# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  mutableByteArrayContents# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Addr#
  myThreadId# :: GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.ThreadId# #)
  narrow16Int# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  narrow16Word# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  narrow32Int# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  narrow32Word# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  narrow8Int# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  narrow8Word# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  neAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int#
  neChar# :: GHC.Internal.Prim.Char# -> GHC.Internal.Prim.Char# -> GHC.Internal.Prim.Int#
  neFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Int#
  neInt16# :: GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int#
  neInt32# :: GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int#
  neInt64# :: GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int#
  neInt8# :: GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int#
  neWord# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Int#
  neWord16# :: GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Int#
  neWord32# :: GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Int#
  neWord64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Int#
  neWord8# :: GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Int#
  negateDouble# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  negateFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  negateInt# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  negateInt16# :: GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int16#
  negateInt32# :: GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int32#
  negateInt64# :: GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int64#
  negateInt8# :: GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int8#
  newAlignedPinnedByteArray# :: forall s. GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.MutableByteArray# s #)
  newArray# :: forall a_levpoly s. GHC.Internal.Prim.Int# -> a_levpoly -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.MutableArray# s a_levpoly #)
  newBCO# :: forall a s. GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Array# a -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.BCO #)
  newByteArray# :: forall s. GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.MutableByteArray# s #)
  newIOPort# :: forall s a_levpoly. GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.IOPort# s a_levpoly #)
  newMVar# :: forall s a_levpoly. GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.MVar# s a_levpoly #)
  newMutVar# :: forall a_levpoly s. a_levpoly -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.MutVar# s a_levpoly #)
  newPinnedByteArray# :: forall s. GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.MutableByteArray# s #)
  newPromptTag# :: forall a. GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.PromptTag# a #)
  newSmallArray# :: forall a_levpoly s. GHC.Internal.Prim.Int# -> a_levpoly -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.SmallMutableArray# s a_levpoly #)
  newTVar# :: forall a_levpoly s. a_levpoly -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.TVar# s a_levpoly #)
  noDuplicate# :: forall s. GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  not# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  not64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64#
  notI# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  notWord16# :: GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16#
  notWord32# :: GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32#
  notWord8# :: GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8#
  numSparks# :: forall s. GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int# #)
  or# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  or64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64#
  orI# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  orWord16# :: GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16#
  orWord32# :: GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32#
  orWord8# :: GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8#
  ord# :: GHC.Internal.Prim.Char# -> GHC.Internal.Prim.Int#
  par# :: forall a. a -> GHC.Internal.Prim.Int#
  pdep# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  pdep16# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  pdep32# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  pdep64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64#
  pdep8# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  pext# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  pext16# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  pext32# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  pext64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64#
  pext8# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  plusAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Addr#
  plusFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  plusInt16# :: GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int16#
  plusInt32# :: GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int32#
  plusInt64# :: GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int64#
  plusInt8# :: GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int8#
  plusWord# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  plusWord16# :: GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16#
  plusWord2# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> (# GHC.Internal.Prim.Word#, GHC.Internal.Prim.Word# #)
  plusWord32# :: GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32#
  plusWord64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64#
  plusWord8# :: GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8#
  popCnt# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  popCnt16# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  popCnt32# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  popCnt64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word#
  popCnt8# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  powerFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  prefetchAddr0# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  prefetchAddr1# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  prefetchAddr2# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  prefetchAddr3# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  prefetchByteArray0# :: forall s. GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  prefetchByteArray1# :: forall s. GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  prefetchByteArray2# :: forall s. GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  prefetchByteArray3# :: forall s. GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  prefetchMutableByteArray0# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  prefetchMutableByteArray1# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  prefetchMutableByteArray2# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  prefetchMutableByteArray3# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  prefetchValue0# :: forall a s. a -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  prefetchValue1# :: forall a s. a -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  prefetchValue2# :: forall a s. a -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  prefetchValue3# :: forall a s. a -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  prompt# :: forall a. GHC.Internal.Prim.PromptTag# a -> (GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a #)) -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a #)
  putMVar# :: forall s a_levpoly. GHC.Internal.Prim.MVar# s a_levpoly -> a_levpoly -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  quotInt# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  quotInt16# :: GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int16#
  quotInt32# :: GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int32#
  quotInt64# :: GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int64#
  quotInt8# :: GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int8#
  quotRemInt# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> (# GHC.Internal.Prim.Int#, GHC.Internal.Prim.Int# #)
  quotRemInt16# :: GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int16# -> (# GHC.Internal.Prim.Int16#, GHC.Internal.Prim.Int16# #)
  quotRemInt32# :: GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int32# -> (# GHC.Internal.Prim.Int32#, GHC.Internal.Prim.Int32# #)
  quotRemInt8# :: GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int8# -> (# GHC.Internal.Prim.Int8#, GHC.Internal.Prim.Int8# #)
  quotRemWord# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> (# GHC.Internal.Prim.Word#, GHC.Internal.Prim.Word# #)
  quotRemWord16# :: GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16# -> (# GHC.Internal.Prim.Word16#, GHC.Internal.Prim.Word16# #)
  quotRemWord2# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> (# GHC.Internal.Prim.Word#, GHC.Internal.Prim.Word# #)
  quotRemWord32# :: GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32# -> (# GHC.Internal.Prim.Word32#, GHC.Internal.Prim.Word32# #)
  quotRemWord8# :: GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8# -> (# GHC.Internal.Prim.Word8#, GHC.Internal.Prim.Word8# #)
  quotWord# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  quotWord16# :: GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16#
  quotWord32# :: GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32#
  quotWord64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64#
  quotWord8# :: GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8#
  raise# :: forall a_levpoly b_reppoly. a_levpoly -> b_reppoly
  raiseDivZero# :: forall b_reppoly. (# #) -> b_reppoly
  raiseIO# :: forall a_levpoly b_reppoly. a_levpoly -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, b_reppoly #)
  raiseOverflow# :: forall b_reppoly. (# #) -> b_reppoly
  raiseUnderflow# :: forall b_reppoly. (# #) -> b_reppoly
  readAddrArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Addr# #)
  readAddrOffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Addr# #)
  readArray# :: forall s a_levpoly. GHC.Internal.Prim.MutableArray# s a_levpoly -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, a_levpoly #)
  readCharArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Char# #)
  readCharOffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Char# #)
  readDoubleArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Double# #)
  readDoubleOffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Double# #)
  readFloatArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Float# #)
  readFloatOffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Float# #)
  readIOPort# :: forall s a_levpoly. GHC.Internal.Prim.IOPort# s a_levpoly -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, a_levpoly #)
  readInt16Array# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int16# #)
  readInt16OffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int16# #)
  readInt32Array# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int32# #)
  readInt32OffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int32# #)
  readInt64Array# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int64# #)
  readInt64OffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int64# #)
  readInt8Array# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int8# #)
  readInt8OffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int8# #)
  readIntArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int# #)
  readIntOffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int# #)
  readMVar# :: forall s a_levpoly. GHC.Internal.Prim.MVar# s a_levpoly -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, a_levpoly #)
  readMutVar# :: forall s a_levpoly. GHC.Internal.Prim.MutVar# s a_levpoly -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, a_levpoly #)
  readSmallArray# :: forall s a_levpoly. GHC.Internal.Prim.SmallMutableArray# s a_levpoly -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, a_levpoly #)
  readStablePtrArray# :: forall s a. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.StablePtr# a #)
  readStablePtrOffAddr# :: forall s a. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.StablePtr# a #)
  readTVar# :: forall s a_levpoly. GHC.Internal.Prim.TVar# s a_levpoly -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, a_levpoly #)
  readTVarIO# :: forall s a_levpoly. GHC.Internal.Prim.TVar# s a_levpoly -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, a_levpoly #)
  readWideCharArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Char# #)
  readWideCharOffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Char# #)
  readWord16Array# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word16# #)
  readWord16OffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word16# #)
  readWord32Array# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word32# #)
  readWord32OffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word32# #)
  readWord64Array# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word64# #)
  readWord64OffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word64# #)
  readWord8Array# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word8# #)
  readWord8ArrayAsAddr# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Addr# #)
  readWord8ArrayAsChar# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Char# #)
  readWord8ArrayAsDouble# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Double# #)
  readWord8ArrayAsFloat# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Float# #)
  readWord8ArrayAsInt# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int# #)
  readWord8ArrayAsInt16# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int16# #)
  readWord8ArrayAsInt32# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int32# #)
  readWord8ArrayAsInt64# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int64# #)
  readWord8ArrayAsStablePtr# :: forall s a. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.StablePtr# a #)
  readWord8ArrayAsWideChar# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Char# #)
  readWord8ArrayAsWord# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word# #)
  readWord8ArrayAsWord16# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word16# #)
  readWord8ArrayAsWord32# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word32# #)
  readWord8ArrayAsWord64# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word64# #)
  readWord8OffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word8# #)
  readWord8OffAddrAsAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Addr# #)
  readWord8OffAddrAsChar# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Char# #)
  readWord8OffAddrAsDouble# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Double# #)
  readWord8OffAddrAsFloat# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Float# #)
  readWord8OffAddrAsInt# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int# #)
  readWord8OffAddrAsInt16# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int16# #)
  readWord8OffAddrAsInt32# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int32# #)
  readWord8OffAddrAsInt64# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int64# #)
  readWord8OffAddrAsStablePtr# :: forall s a. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.StablePtr# a #)
  readWord8OffAddrAsWideChar# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Char# #)
  readWord8OffAddrAsWord# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word# #)
  readWord8OffAddrAsWord16# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word16# #)
  readWord8OffAddrAsWord32# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word32# #)
  readWord8OffAddrAsWord64# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word64# #)
  readWordArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word# #)
  readWordOffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Word# #)
  reallyUnsafePtrEquality# :: forall a_levpoly b_levpoly. a_levpoly -> b_levpoly -> GHC.Internal.Prim.Int#
  remAddr# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  remInt# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  remInt16# :: GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int16#
  remInt32# :: GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int32#
  remInt64# :: GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int64#
  remInt8# :: GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int8#
  remWord# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  remWord16# :: GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16#
  remWord32# :: GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32#
  remWord64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64#
  remWord8# :: GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8#
  resizeMutableByteArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.MutableByteArray# s #)
  retry# :: forall a_levpoly. GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a_levpoly #)
  setAddrRange# :: GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld
  setByteArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  setThreadAllocationCounter# :: GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld
  shrinkMutableByteArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  shrinkSmallMutableArray# :: forall s a_levpoly. GHC.Internal.Prim.SmallMutableArray# s a_levpoly -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  sinDouble# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  sinFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  sinhDouble# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  sinhFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  sizeofArray# :: forall a_levpoly. GHC.Internal.Prim.Array# a_levpoly -> GHC.Internal.Prim.Int#
  sizeofByteArray# :: GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.Int#
  sizeofMutableArray# :: forall s a_levpoly. GHC.Internal.Prim.MutableArray# s a_levpoly -> GHC.Internal.Prim.Int#
  sizeofMutableByteArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int#
  sizeofSmallArray# :: forall a_levpoly. GHC.Internal.Prim.SmallArray# a_levpoly -> GHC.Internal.Prim.Int#
  sizeofSmallMutableArray# :: forall s a_levpoly. GHC.Internal.Prim.SmallMutableArray# s a_levpoly -> GHC.Internal.Prim.Int#
  spark# :: forall a s. a -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, a #)
  sqrtDouble# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  sqrtFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  stableNameToInt# :: forall a_levpoly. GHC.Internal.Prim.StableName# a_levpoly -> GHC.Internal.Prim.Int#
  subInt16# :: GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int16#
  subInt32# :: GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int32#
  subInt64# :: GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int64#
  subInt8# :: GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int8#
  subIntC# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> (# GHC.Internal.Prim.Int#, GHC.Internal.Prim.Int# #)
  subWord16# :: GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16#
  subWord32# :: GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32#
  subWord64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64#
  subWord8# :: GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8#
  subWordC# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> (# GHC.Internal.Prim.Word#, GHC.Internal.Prim.Int# #)
  takeMVar# :: forall s a_levpoly. GHC.Internal.Prim.MVar# s a_levpoly -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, a_levpoly #)
  tanDouble# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  tanFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  tanhDouble# :: GHC.Internal.Prim.Double# -> GHC.Internal.Prim.Double#
  tanhFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  thawArray# :: forall a_levpoly s. GHC.Internal.Prim.Array# a_levpoly -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.MutableArray# s a_levpoly #)
  thawSmallArray# :: forall a_levpoly s. GHC.Internal.Prim.SmallArray# a_levpoly -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.SmallMutableArray# s a_levpoly #)
  threadLabel# :: GHC.Internal.Prim.ThreadId# -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.Int#, GHC.Internal.Prim.ByteArray# #)
  threadStatus# :: GHC.Internal.Prim.ThreadId# -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, GHC.Internal.Prim.Int#, GHC.Internal.Prim.Int#, GHC.Internal.Prim.Int# #)
  timesFloat# :: GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.Float#
  timesInt16# :: GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int16#
  timesInt2# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> (# GHC.Internal.Prim.Int#, GHC.Internal.Prim.Int#, GHC.Internal.Prim.Int# #)
  timesInt32# :: GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int32#
  timesInt64# :: GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int64#
  timesInt8# :: GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int8#
  timesWord# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  timesWord16# :: GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16#
  timesWord2# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> (# GHC.Internal.Prim.Word#, GHC.Internal.Prim.Word# #)
  timesWord32# :: GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32#
  timesWord64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64#
  timesWord8# :: GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8#
  touch# :: forall a_levpoly s. a_levpoly -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  traceBinaryEvent# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  traceEvent# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  traceMarker# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  tryPutMVar# :: forall s a_levpoly. GHC.Internal.Prim.MVar# s a_levpoly -> a_levpoly -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int# #)
  tryReadMVar# :: forall s a_levpoly. GHC.Internal.Prim.MVar# s a_levpoly -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int#, a_levpoly #)
  tryTakeMVar# :: forall s a_levpoly. GHC.Internal.Prim.MVar# s a_levpoly -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int#, a_levpoly #)
  uncheckedIShiftL# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  uncheckedIShiftL64# :: GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int64#
  uncheckedIShiftRA# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  uncheckedIShiftRA64# :: GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int64#
  uncheckedIShiftRL# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  uncheckedIShiftRL64# :: GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int64#
  uncheckedShiftL# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word#
  uncheckedShiftL64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word64#
  uncheckedShiftLInt16# :: GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int16#
  uncheckedShiftLInt32# :: GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int32#
  uncheckedShiftLInt8# :: GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int8#
  uncheckedShiftLWord16# :: GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word16#
  uncheckedShiftLWord32# :: GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word32#
  uncheckedShiftLWord8# :: GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word8#
  uncheckedShiftRAInt16# :: GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int16#
  uncheckedShiftRAInt32# :: GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int32#
  uncheckedShiftRAInt8# :: GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int8#
  uncheckedShiftRL# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word#
  uncheckedShiftRL64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word64#
  uncheckedShiftRLInt16# :: GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int16#
  uncheckedShiftRLInt32# :: GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int32#
  uncheckedShiftRLInt8# :: GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int8#
  uncheckedShiftRLWord16# :: GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word16#
  uncheckedShiftRLWord32# :: GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word32#
  uncheckedShiftRLWord8# :: GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word8#
  unmaskAsyncExceptions# :: forall a_reppoly. (GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a_reppoly #)) -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a_reppoly #)
  unpackClosure# :: forall a b. a -> (# GHC.Internal.Prim.Addr#, GHC.Internal.Prim.ByteArray#, GHC.Internal.Prim.Array# b #)
  unsafeFreezeArray# :: forall s a_levpoly. GHC.Internal.Prim.MutableArray# s a_levpoly -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Array# a_levpoly #)
  unsafeFreezeByteArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.ByteArray# #)
  unsafeFreezeSmallArray# :: forall s a_levpoly. GHC.Internal.Prim.SmallMutableArray# s a_levpoly -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.SmallArray# a_levpoly #)
  unsafeThawArray# :: forall a_levpoly s. GHC.Internal.Prim.Array# a_levpoly -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.MutableArray# s a_levpoly #)
  unsafeThawByteArray# :: forall s. GHC.Internal.Prim.ByteArray# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.MutableByteArray# s #)
  unsafeThawSmallArray# :: forall a_levpoly s. GHC.Internal.Prim.SmallArray# a_levpoly -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.SmallMutableArray# s a_levpoly #)
  waitRead# :: forall s. GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  waitWrite# :: forall s. GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  whereFrom# :: forall a s. a -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int# #)
  word16ToInt16# :: GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Int16#
  word16ToWord# :: GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word#
  word2Double# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Double#
  word2Float# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Float#
  word2Int# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Int#
  word32ToInt32# :: GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Int32#
  word32ToWord# :: GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word#
  word64ToInt64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Int64#
  word64ToWord# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word#
  word8ToInt8# :: GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Int8#
  word8ToWord# :: GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word#
  wordToWord16# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word16#
  wordToWord32# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word32#
  wordToWord64# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word64#
  wordToWord8# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word8#
  writeAddrArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeAddrOffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeArray# :: forall s a_levpoly. GHC.Internal.Prim.MutableArray# s a_levpoly -> GHC.Internal.Prim.Int# -> a_levpoly -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeCharArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Char# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeCharOffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Char# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeDoubleArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeDoubleOffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeFloatArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeFloatOffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeIOPort# :: forall s a_levpoly. GHC.Internal.Prim.IOPort# s a_levpoly -> a_levpoly -> GHC.Internal.Prim.State# s -> (# GHC.Internal.Prim.State# s, GHC.Internal.Prim.Int# #)
  writeInt16Array# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeInt16OffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeInt32Array# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeInt32OffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeInt64Array# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeInt64OffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeInt8Array# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeInt8OffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int8# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeIntArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeIntOffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeMutVar# :: forall s a_levpoly. GHC.Internal.Prim.MutVar# s a_levpoly -> a_levpoly -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeSmallArray# :: forall s a_levpoly. GHC.Internal.Prim.SmallMutableArray# s a_levpoly -> GHC.Internal.Prim.Int# -> a_levpoly -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeStablePtrArray# :: forall s a. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.StablePtr# a -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeStablePtrOffAddr# :: forall a s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.StablePtr# a -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeTVar# :: forall s a_levpoly. GHC.Internal.Prim.TVar# s a_levpoly -> a_levpoly -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWideCharArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Char# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWideCharOffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Char# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord16Array# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord16OffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord32Array# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord32OffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord64Array# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord64OffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8Array# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8ArrayAsAddr# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8ArrayAsChar# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Char# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8ArrayAsDouble# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8ArrayAsFloat# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8ArrayAsInt# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8ArrayAsInt16# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8ArrayAsInt32# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8ArrayAsInt64# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8ArrayAsStablePtr# :: forall s a. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.StablePtr# a -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8ArrayAsWideChar# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Char# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8ArrayAsWord# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8ArrayAsWord16# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8ArrayAsWord32# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8ArrayAsWord64# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8OffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8OffAddrAsAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8OffAddrAsChar# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Char# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8OffAddrAsDouble# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Double# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8OffAddrAsFloat# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Float# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8OffAddrAsInt# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8OffAddrAsInt16# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int16# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8OffAddrAsInt32# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int32# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8OffAddrAsInt64# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int64# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8OffAddrAsStablePtr# :: forall a s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.StablePtr# a -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8OffAddrAsWideChar# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Char# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8OffAddrAsWord# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8OffAddrAsWord16# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8OffAddrAsWord32# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWord8OffAddrAsWord64# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWordArray# :: forall s. GHC.Internal.Prim.MutableByteArray# s -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  writeWordOffAddr# :: forall s. GHC.Internal.Prim.Addr# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.State# s -> GHC.Internal.Prim.State# s
  xor# :: GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word# -> GHC.Internal.Prim.Word#
  xor64# :: GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64# -> GHC.Internal.Prim.Word64#
  xorI# :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int#
  xorWord16# :: GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16# -> GHC.Internal.Prim.Word16#
  xorWord32# :: GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32# -> GHC.Internal.Prim.Word32#
  xorWord8# :: GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8# -> GHC.Internal.Prim.Word8#
  yield# :: GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld

module GHC.Tuple where
  -- Safety: Trustworthy
  pattern Solo :: forall a. a -> Solo a
  type Solo :: * -> *
  data Solo a = MkSolo a
  type Tuple0 :: *
  type Tuple0 = ()
  type Tuple1 :: * -> *
  type Tuple1 = Solo
  type Tuple10 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple10 a b c d e f g h i j = (,,,,,,,,,) a b c d e f g h i j
  type Tuple11 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple11 a b c d e f g h i j k = (,,,,,,,,,,) a b c d e f g h i j k
  type Tuple12 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple12 a b c d e f g h i j k l = (,,,,,,,,,,,) a b c d e f g h i j k l
  type Tuple13 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple13 a b c d e f g h i j k l m = (,,,,,,,,,,,,) a b c d e f g h i j k l m
  type Tuple14 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple14 a b c d e f g h i j k l m n = (,,,,,,,,,,,,,) a b c d e f g h i j k l m n
  type Tuple15 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple15 a b c d e f g h i j k l m n o = (,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o
  type Tuple16 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple16 a b c d e f g h i j k l m n o p = (,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p
  type Tuple17 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple17 a b c d e f g h i j k l m n o p q = (,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q
  type Tuple18 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple18 a b c d e f g h i j k l m n o p q r = (,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r
  type Tuple19 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple19 a b c d e f g h i j k l m n o p q r s = (,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s
  type Tuple2 :: * -> * -> *
  data Tuple2 a b = (,) a b
  type Tuple20 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple20 a b c d e f g h i j k l m n o p q r s t = (,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t
  type Tuple21 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple21 a b c d e f g h i j k l m n o p q r s t u = (,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u
  type Tuple22 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple22 a b c d e f g h i j k l m n o p q r s t u v = (,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v
  type Tuple23 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple23 a b c d e f g h i j k l m n o p q r s t u v w = (,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w
  type Tuple24 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple24 a b c d e f g h i j k l m n o p q r s t u v w x = (,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x
  type Tuple25 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple25 a b c d e f g h i j k l m n o p q r s t u v w x y = (,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y
  type Tuple26 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple26 a b c d e f g h i j k l m n o p q r s t u v w x y z = (,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z
  type Tuple27 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple27 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 = (,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26
  type Tuple28 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple28 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27
  type Tuple29 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple29 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28
  type Tuple3 :: * -> * -> * -> *
  data Tuple3 a b c = (,,) a b c
  type Tuple30 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple30 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29
  type Tuple31 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple31 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30
  type Tuple32 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple32 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31
  type Tuple33 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple33 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32
  type Tuple34 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple34 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33
  type Tuple35 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple35 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34
  type Tuple36 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple36 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35
  type Tuple37 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple37 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36
  type Tuple38 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple38 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37
  type Tuple39 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple39 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38
  type Tuple4 :: * -> * -> * -> * -> *
  data Tuple4 a b c d = (,,,) a b c d
  type Tuple40 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple40 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39
  type Tuple41 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple41 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40
  type Tuple42 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple42 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41
  type Tuple43 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple43 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42
  type Tuple44 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple44 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43
  type Tuple45 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple45 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44
  type Tuple46 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple46 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45
  type Tuple47 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple47 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46
  type Tuple48 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple48 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47
  type Tuple49 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple49 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48
  type Tuple5 :: * -> * -> * -> * -> * -> *
  data Tuple5 a b c d e = (,,,,) a b c d e
  type Tuple50 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple50 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49
  type Tuple51 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple51 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50
  type Tuple52 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple52 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51
  type Tuple53 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple53 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52
  type Tuple54 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple54 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53
  type Tuple55 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple55 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54
  type Tuple56 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple56 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55
  type Tuple57 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple57 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56
  type Tuple58 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple58 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57
  type Tuple59 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple59 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58
  type Tuple6 :: * -> * -> * -> * -> * -> * -> *
  data Tuple6 a b c d e f = (,,,,,) a b c d e f
  type Tuple60 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple60 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59
  type Tuple61 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple61 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 t60 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 t60
  type Tuple62 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple62 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 t60 t61 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 t60 t61
  type Tuple63 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple63 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 t60 t61 t62 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 t60 t61 t62
  type Tuple64 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple64 a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 t60 t61 t62 t63 = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 t60 t61 t62 t63
  type Tuple7 :: * -> * -> * -> * -> * -> * -> * -> *
  data Tuple7 a b c d e f g = (,,,,,,) a b c d e f g
  type Tuple8 :: * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple8 a b c d e f g h = (,,,,,,,) a b c d e f g h
  type Tuple9 :: * -> * -> * -> * -> * -> * -> * -> * -> * -> *
  data Tuple9 a b c d e f g h i = (,,,,,,,,) a b c d e f g h i
  type Unit :: *
  data Unit = ()
  getSolo :: forall a. Solo a -> a

module GHC.Types where
  -- Safety: None
  type Any :: forall k. k
  type family Any @k where
  type Bool :: *
  data Bool = False | True
  type role CONSTRAINT nominal
  type CONSTRAINT :: RuntimeRep -> *
  data CONSTRAINT a
  type Char :: *
  data Char = C# GHC.Internal.Prim.Char#
  type role Coercible representational representational
  type Coercible :: forall k. k -> k -> Constraint
  class Coercible a b => Coercible a b
    {-# MINIMAL #-}
  type Constraint :: *
  type Constraint = CONSTRAINT LiftedRep
  type DictBox :: Constraint -> *
  data DictBox a = a => MkDictBox
  type Double :: *
  data Double = D# GHC.Internal.Prim.Double#
  type DoubleBox :: TYPE DoubleRep -> *
  data DoubleBox a = MkDoubleBox a
  type Float :: *
  data Float = F# GHC.Internal.Prim.Float#
  type FloatBox :: TYPE FloatRep -> *
  data FloatBox a = MkFloatBox a
  type IO :: * -> *
  newtype IO a = IO (GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld -> (# GHC.Internal.Prim.State# GHC.Internal.Prim.RealWorld, a #))
  type Int :: *
  data Int = I# GHC.Internal.Prim.Int#
  type IntBox :: TYPE IntRep -> *
  data IntBox a = MkIntBox a
  type KindBndr :: *
  type KindBndr = Int
  type KindRep :: *
  data KindRep = KindRepTyConApp TyCon [KindRep] | KindRepVar {-# UNPACK #-} !KindBndr | KindRepApp KindRep KindRep | KindRepFun KindRep KindRep | KindRepTYPE !RuntimeRep | KindRepTypeLitS TypeLitSort GHC.Internal.Prim.Addr# | KindRepTypeLitD TypeLitSort [Char]
  type Levity :: *
  data Levity = Lifted | Unlifted
  type LiftedRep :: RuntimeRep
  type LiftedRep = BoxedRep Lifted
  type List :: * -> *
  data List a = ...
  type Module :: *
  data Module = Module TrName TrName
  type MultMul :: Multiplicity -> Multiplicity -> Multiplicity
  type family MultMul a b where
    forall (x :: Multiplicity). MultMul One x = x
    forall (x :: Multiplicity). MultMul x One = x
    forall (x :: Multiplicity). MultMul Many x = Many
    forall (x :: Multiplicity). MultMul x Many = Many
  type Multiplicity :: *
  data Multiplicity = One | Many
  type Ordering :: *
  data Ordering = LT | EQ | GT
  type RuntimeRep :: *
  data RuntimeRep = VecRep VecCount VecElem | TupleRep [RuntimeRep] | SumRep [RuntimeRep] | BoxedRep Levity | IntRep | Int8Rep | Int16Rep | Int32Rep | Int64Rep | WordRep | Word8Rep | Word16Rep | Word32Rep | Word64Rep | AddrRep | FloatRep | DoubleRep
  type SPEC :: *
  data SPEC = SPEC | SPEC2
  type Solo# :: forall (k :: RuntimeRep). TYPE k -> TYPE (TupleRep '[k])
  data Solo# a = MkSolo# a
  type Sum10# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9])
  data Sum10# a b c d e f g h i j = ...
  type Sum11# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10])
  data Sum11# a b c d e f g h i j k = ...
  type Sum12# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11])
  data Sum12# a b c d e f g h i j k l = ...
  type Sum13# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12])
  data Sum13# a b c d e f g h i j k l m = ...
  type Sum14# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13])
  data Sum14# a b c d e f g h i j k l m n = ...
  type Sum15# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14])
  data Sum15# a b c d e f g h i j k l m n o = ...
  type Sum16# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15])
  data Sum16# a b c d e f g h i j k l m n o p = ...
  type Sum17# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16])
  data Sum17# a b c d e f g h i j k l m n o p q = ...
  type Sum18# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep).
                 TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17])
  data Sum18# a b c d e f g h i j k l m n o p q r = ...
  type Sum19# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep).
                 TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18])
  data Sum19# a b c d e f g h i j k l m n o p q r s = ...
  type Sum2# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE (SumRep [k0, k1])
  data Sum2# a b = ...
  type Sum20# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep).
                 TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19])
  data Sum20# a b c d e f g h i j k l m n o p q r s t = ...
  type Sum21# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep).
                 TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20])
  data Sum21# a b c d e f g h i j k l m n o p q r s t u = ...
  type Sum22# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep).
                 TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21])
  data Sum22# a b c d e f g h i j k l m n o p q r s t u v = ...
  type Sum23# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep).
                 TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22])
  data Sum23# a b c d e f g h i j k l m n o p q r s t u v w = ...
  type Sum24# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep).
                 TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23])
  data Sum24# a b c d e f g h i j k l m n o p q r s t u v w x = ...
  type Sum25# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep).
                 TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24])
  data Sum25# a b c d e f g h i j k l m n o p q r s t u v w x y = ...
  type Sum26# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep).
                 TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25])
  data Sum26# a b c d e f g h i j k l m n o p q r s t u v w x y z = ...
  type Sum27# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep).
                 TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26])
  data Sum27# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 = ...
  type Sum28# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep).
                 TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27])
  data Sum28# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 = ...
  type Sum29# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep).
                 TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE k28 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28])
  data Sum29# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 = ...
  type Sum3# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE (SumRep [k0, k1, k2])
  data Sum3# a b c = ...
  type Sum30# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep).
                 TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE k28 -> TYPE k29 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29])
  data Sum30# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 = ...
  type Sum31# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep).
                 TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE k28 -> TYPE k29 -> TYPE k30 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30])
  data Sum31# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 = ...
  type Sum32# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep).
                 TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE k28 -> TYPE k29 -> TYPE k30 -> TYPE k31 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31])
  data Sum32# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 = ...
  type Sum33# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep).
                 TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE k28 -> TYPE k29 -> TYPE k30 -> TYPE k31 -> TYPE k32 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32])
  data Sum33# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 = ...
  type Sum34# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep).
                 TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE k28 -> TYPE k29 -> TYPE k30 -> TYPE k31 -> TYPE k32 -> TYPE k33 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33])
  data Sum34# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 = ...
  type Sum35# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep).
                 TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE k28 -> TYPE k29 -> TYPE k30 -> TYPE k31 -> TYPE k32 -> TYPE k33 -> TYPE k34 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34])
  data Sum35# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 = ...
  type Sum36# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep).
                 TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE k28 -> TYPE k29 -> TYPE k30 -> TYPE k31 -> TYPE k32 -> TYPE k33 -> TYPE k34 -> TYPE k35 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35])
  data Sum36# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 = ...
  type Sum37# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep).
                 TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE k28 -> TYPE k29 -> TYPE k30 -> TYPE k31 -> TYPE k32 -> TYPE k33 -> TYPE k34 -> TYPE k35 -> TYPE k36 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36])
  data Sum37# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 = ...
  type Sum38# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep).
                 TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE k28 -> TYPE k29 -> TYPE k30 -> TYPE k31 -> TYPE k32 -> TYPE k33 -> TYPE k34 -> TYPE k35 -> TYPE k36 -> TYPE k37 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37])
  data Sum38# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 = ...
  type Sum39# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep).
                 TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE k28 -> TYPE k29 -> TYPE k30 -> TYPE k31 -> TYPE k32 -> TYPE k33 -> TYPE k34 -> TYPE k35 -> TYPE k36 -> TYPE k37 -> TYPE k38 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38])
  data Sum39# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 = ...
  type Sum4# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE (SumRep [k0, k1, k2, k3])
  data Sum4# a b c d = ...
  type Sum40# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep).
                 TYPE k0
                 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE k28 -> TYPE k29 -> TYPE k30 -> TYPE k31 -> TYPE k32 -> TYPE k33 -> TYPE k34 -> TYPE k35 -> TYPE k36 -> TYPE k37 -> TYPE k38 -> TYPE k39 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39])
  data Sum40# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 = ...
  type Sum41# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep).
                 TYPE k0
                 -> TYPE k1
                 -> TYPE k2
                 -> TYPE k3
                 -> TYPE k4
                 -> TYPE k5
                 -> TYPE k6
                 -> TYPE k7
                 -> TYPE k8
                 -> TYPE k9
                 -> TYPE k10
                 -> TYPE k11
                 -> TYPE k12
                 -> TYPE k13
                 -> TYPE k14
                 -> TYPE k15
                 -> TYPE k16
                 -> TYPE k17
                 -> TYPE k18
                 -> TYPE k19
                 -> TYPE k20
                 -> TYPE k21
                 -> TYPE k22
                 -> TYPE k23
                 -> TYPE k24
                 -> TYPE k25
                 -> TYPE k26
                 -> TYPE k27
                 -> TYPE k28
                 -> TYPE k29
                 -> TYPE k30
                 -> TYPE k31
                 -> TYPE k32
                 -> TYPE k33
                 -> TYPE k34
                 -> TYPE k35
                 -> TYPE k36
                 -> TYPE k37
                 -> TYPE k38
                 -> TYPE k39
                 -> TYPE k40
                 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40])
  data Sum41# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 = ...
  type Sum42# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep).
                 TYPE k0
                 -> TYPE k1
                 -> TYPE k2
                 -> TYPE k3
                 -> TYPE k4
                 -> TYPE k5
                 -> TYPE k6
                 -> TYPE k7
                 -> TYPE k8
                 -> TYPE k9
                 -> TYPE k10
                 -> TYPE k11
                 -> TYPE k12
                 -> TYPE k13
                 -> TYPE k14
                 -> TYPE k15
                 -> TYPE k16
                 -> TYPE k17
                 -> TYPE k18
                 -> TYPE k19
                 -> TYPE k20
                 -> TYPE k21
                 -> TYPE k22
                 -> TYPE k23
                 -> TYPE k24
                 -> TYPE k25
                 -> TYPE k26
                 -> TYPE k27
                 -> TYPE k28
                 -> TYPE k29
                 -> TYPE k30
                 -> TYPE k31
                 -> TYPE k32
                 -> TYPE k33
                 -> TYPE k34
                 -> TYPE k35
                 -> TYPE k36
                 -> TYPE k37
                 -> TYPE k38
                 -> TYPE k39
                 -> TYPE k40
                 -> TYPE k41
                 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41])
  data Sum42# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 = ...
  type Sum43# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep).
                 TYPE k0
                 -> TYPE k1
                 -> TYPE k2
                 -> TYPE k3
                 -> TYPE k4
                 -> TYPE k5
                 -> TYPE k6
                 -> TYPE k7
                 -> TYPE k8
                 -> TYPE k9
                 -> TYPE k10
                 -> TYPE k11
                 -> TYPE k12
                 -> TYPE k13
                 -> TYPE k14
                 -> TYPE k15
                 -> TYPE k16
                 -> TYPE k17
                 -> TYPE k18
                 -> TYPE k19
                 -> TYPE k20
                 -> TYPE k21
                 -> TYPE k22
                 -> TYPE k23
                 -> TYPE k24
                 -> TYPE k25
                 -> TYPE k26
                 -> TYPE k27
                 -> TYPE k28
                 -> TYPE k29
                 -> TYPE k30
                 -> TYPE k31
                 -> TYPE k32
                 -> TYPE k33
                 -> TYPE k34
                 -> TYPE k35
                 -> TYPE k36
                 -> TYPE k37
                 -> TYPE k38
                 -> TYPE k39
                 -> TYPE k40
                 -> TYPE k41
                 -> TYPE k42
                 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42])
  data Sum43# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 = ...
  type Sum44# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep).
                 TYPE k0
                 -> TYPE k1
                 -> TYPE k2
                 -> TYPE k3
                 -> TYPE k4
                 -> TYPE k5
                 -> TYPE k6
                 -> TYPE k7
                 -> TYPE k8
                 -> TYPE k9
                 -> TYPE k10
                 -> TYPE k11
                 -> TYPE k12
                 -> TYPE k13
                 -> TYPE k14
                 -> TYPE k15
                 -> TYPE k16
                 -> TYPE k17
                 -> TYPE k18
                 -> TYPE k19
                 -> TYPE k20
                 -> TYPE k21
                 -> TYPE k22
                 -> TYPE k23
                 -> TYPE k24
                 -> TYPE k25
                 -> TYPE k26
                 -> TYPE k27
                 -> TYPE k28
                 -> TYPE k29
                 -> TYPE k30
                 -> TYPE k31
                 -> TYPE k32
                 -> TYPE k33
                 -> TYPE k34
                 -> TYPE k35
                 -> TYPE k36
                 -> TYPE k37
                 -> TYPE k38
                 -> TYPE k39
                 -> TYPE k40
                 -> TYPE k41
                 -> TYPE k42
                 -> TYPE k43
                 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43])
  data Sum44# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 = ...
  type Sum45# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep).
                 TYPE k0
                 -> TYPE k1
                 -> TYPE k2
                 -> TYPE k3
                 -> TYPE k4
                 -> TYPE k5
                 -> TYPE k6
                 -> TYPE k7
                 -> TYPE k8
                 -> TYPE k9
                 -> TYPE k10
                 -> TYPE k11
                 -> TYPE k12
                 -> TYPE k13
                 -> TYPE k14
                 -> TYPE k15
                 -> TYPE k16
                 -> TYPE k17
                 -> TYPE k18
                 -> TYPE k19
                 -> TYPE k20
                 -> TYPE k21
                 -> TYPE k22
                 -> TYPE k23
                 -> TYPE k24
                 -> TYPE k25
                 -> TYPE k26
                 -> TYPE k27
                 -> TYPE k28
                 -> TYPE k29
                 -> TYPE k30
                 -> TYPE k31
                 -> TYPE k32
                 -> TYPE k33
                 -> TYPE k34
                 -> TYPE k35
                 -> TYPE k36
                 -> TYPE k37
                 -> TYPE k38
                 -> TYPE k39
                 -> TYPE k40
                 -> TYPE k41
                 -> TYPE k42
                 -> TYPE k43
                 -> TYPE k44
                 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44])
  data Sum45# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 = ...
  type Sum46# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep).
                 TYPE k0
                 -> TYPE k1
                 -> TYPE k2
                 -> TYPE k3
                 -> TYPE k4
                 -> TYPE k5
                 -> TYPE k6
                 -> TYPE k7
                 -> TYPE k8
                 -> TYPE k9
                 -> TYPE k10
                 -> TYPE k11
                 -> TYPE k12
                 -> TYPE k13
                 -> TYPE k14
                 -> TYPE k15
                 -> TYPE k16
                 -> TYPE k17
                 -> TYPE k18
                 -> TYPE k19
                 -> TYPE k20
                 -> TYPE k21
                 -> TYPE k22
                 -> TYPE k23
                 -> TYPE k24
                 -> TYPE k25
                 -> TYPE k26
                 -> TYPE k27
                 -> TYPE k28
                 -> TYPE k29
                 -> TYPE k30
                 -> TYPE k31
                 -> TYPE k32
                 -> TYPE k33
                 -> TYPE k34
                 -> TYPE k35
                 -> TYPE k36
                 -> TYPE k37
                 -> TYPE k38
                 -> TYPE k39
                 -> TYPE k40
                 -> TYPE k41
                 -> TYPE k42
                 -> TYPE k43
                 -> TYPE k44
                 -> TYPE k45
                 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45])
  data Sum46# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 = ...
  type Sum47# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep).
                 TYPE k0
                 -> TYPE k1
                 -> TYPE k2
                 -> TYPE k3
                 -> TYPE k4
                 -> TYPE k5
                 -> TYPE k6
                 -> TYPE k7
                 -> TYPE k8
                 -> TYPE k9
                 -> TYPE k10
                 -> TYPE k11
                 -> TYPE k12
                 -> TYPE k13
                 -> TYPE k14
                 -> TYPE k15
                 -> TYPE k16
                 -> TYPE k17
                 -> TYPE k18
                 -> TYPE k19
                 -> TYPE k20
                 -> TYPE k21
                 -> TYPE k22
                 -> TYPE k23
                 -> TYPE k24
                 -> TYPE k25
                 -> TYPE k26
                 -> TYPE k27
                 -> TYPE k28
                 -> TYPE k29
                 -> TYPE k30
                 -> TYPE k31
                 -> TYPE k32
                 -> TYPE k33
                 -> TYPE k34
                 -> TYPE k35
                 -> TYPE k36
                 -> TYPE k37
                 -> TYPE k38
                 -> TYPE k39
                 -> TYPE k40
                 -> TYPE k41
                 -> TYPE k42
                 -> TYPE k43
                 -> TYPE k44
                 -> TYPE k45
                 -> TYPE k46
                 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46])
  data Sum47# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 = ...
  type Sum48# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep).
                 TYPE k0
                 -> TYPE k1
                 -> TYPE k2
                 -> TYPE k3
                 -> TYPE k4
                 -> TYPE k5
                 -> TYPE k6
                 -> TYPE k7
                 -> TYPE k8
                 -> TYPE k9
                 -> TYPE k10
                 -> TYPE k11
                 -> TYPE k12
                 -> TYPE k13
                 -> TYPE k14
                 -> TYPE k15
                 -> TYPE k16
                 -> TYPE k17
                 -> TYPE k18
                 -> TYPE k19
                 -> TYPE k20
                 -> TYPE k21
                 -> TYPE k22
                 -> TYPE k23
                 -> TYPE k24
                 -> TYPE k25
                 -> TYPE k26
                 -> TYPE k27
                 -> TYPE k28
                 -> TYPE k29
                 -> TYPE k30
                 -> TYPE k31
                 -> TYPE k32
                 -> TYPE k33
                 -> TYPE k34
                 -> TYPE k35
                 -> TYPE k36
                 -> TYPE k37
                 -> TYPE k38
                 -> TYPE k39
                 -> TYPE k40
                 -> TYPE k41
                 -> TYPE k42
                 -> TYPE k43
                 -> TYPE k44
                 -> TYPE k45
                 -> TYPE k46
                 -> TYPE k47
                 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47])
  data Sum48# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 = ...
  type Sum49# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep).
                 TYPE k0
                 -> TYPE k1
                 -> TYPE k2
                 -> TYPE k3
                 -> TYPE k4
                 -> TYPE k5
                 -> TYPE k6
                 -> TYPE k7
                 -> TYPE k8
                 -> TYPE k9
                 -> TYPE k10
                 -> TYPE k11
                 -> TYPE k12
                 -> TYPE k13
                 -> TYPE k14
                 -> TYPE k15
                 -> TYPE k16
                 -> TYPE k17
                 -> TYPE k18
                 -> TYPE k19
                 -> TYPE k20
                 -> TYPE k21
                 -> TYPE k22
                 -> TYPE k23
                 -> TYPE k24
                 -> TYPE k25
                 -> TYPE k26
                 -> TYPE k27
                 -> TYPE k28
                 -> TYPE k29
                 -> TYPE k30
                 -> TYPE k31
                 -> TYPE k32
                 -> TYPE k33
                 -> TYPE k34
                 -> TYPE k35
                 -> TYPE k36
                 -> TYPE k37
                 -> TYPE k38
                 -> TYPE k39
                 -> TYPE k40
                 -> TYPE k41
                 -> TYPE k42
                 -> TYPE k43
                 -> TYPE k44
                 -> TYPE k45
                 -> TYPE k46
                 -> TYPE k47
                 -> TYPE k48
                 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48])
  data Sum49# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 = ...
  type Sum5# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE (SumRep [k0, k1, k2, k3, k4])
  data Sum5# a b c d e = ...
  type Sum50# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep).
                 TYPE k0
                 -> TYPE k1
                 -> TYPE k2
                 -> TYPE k3
                 -> TYPE k4
                 -> TYPE k5
                 -> TYPE k6
                 -> TYPE k7
                 -> TYPE k8
                 -> TYPE k9
                 -> TYPE k10
                 -> TYPE k11
                 -> TYPE k12
                 -> TYPE k13
                 -> TYPE k14
                 -> TYPE k15
                 -> TYPE k16
                 -> TYPE k17
                 -> TYPE k18
                 -> TYPE k19
                 -> TYPE k20
                 -> TYPE k21
                 -> TYPE k22
                 -> TYPE k23
                 -> TYPE k24
                 -> TYPE k25
                 -> TYPE k26
                 -> TYPE k27
                 -> TYPE k28
                 -> TYPE k29
                 -> TYPE k30
                 -> TYPE k31
                 -> TYPE k32
                 -> TYPE k33
                 -> TYPE k34
                 -> TYPE k35
                 -> TYPE k36
                 -> TYPE k37
                 -> TYPE k38
                 -> TYPE k39
                 -> TYPE k40
                 -> TYPE k41
                 -> TYPE k42
                 -> TYPE k43
                 -> TYPE k44
                 -> TYPE k45
                 -> TYPE k46
                 -> TYPE k47
                 -> TYPE k48
                 -> TYPE k49
                 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49])
  data Sum50# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 = ...
  type Sum51# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep).
                 TYPE k0
                 -> TYPE k1
                 -> TYPE k2
                 -> TYPE k3
                 -> TYPE k4
                 -> TYPE k5
                 -> TYPE k6
                 -> TYPE k7
                 -> TYPE k8
                 -> TYPE k9
                 -> TYPE k10
                 -> TYPE k11
                 -> TYPE k12
                 -> TYPE k13
                 -> TYPE k14
                 -> TYPE k15
                 -> TYPE k16
                 -> TYPE k17
                 -> TYPE k18
                 -> TYPE k19
                 -> TYPE k20
                 -> TYPE k21
                 -> TYPE k22
                 -> TYPE k23
                 -> TYPE k24
                 -> TYPE k25
                 -> TYPE k26
                 -> TYPE k27
                 -> TYPE k28
                 -> TYPE k29
                 -> TYPE k30
                 -> TYPE k31
                 -> TYPE k32
                 -> TYPE k33
                 -> TYPE k34
                 -> TYPE k35
                 -> TYPE k36
                 -> TYPE k37
                 -> TYPE k38
                 -> TYPE k39
                 -> TYPE k40
                 -> TYPE k41
                 -> TYPE k42
                 -> TYPE k43
                 -> TYPE k44
                 -> TYPE k45
                 -> TYPE k46
                 -> TYPE k47
                 -> TYPE k48
                 -> TYPE k49
                 -> TYPE k50
                 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50])
  data Sum51# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 = ...
  type Sum52# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep).
                 TYPE k0
                 -> TYPE k1
                 -> TYPE k2
                 -> TYPE k3
                 -> TYPE k4
                 -> TYPE k5
                 -> TYPE k6
                 -> TYPE k7
                 -> TYPE k8
                 -> TYPE k9
                 -> TYPE k10
                 -> TYPE k11
                 -> TYPE k12
                 -> TYPE k13
                 -> TYPE k14
                 -> TYPE k15
                 -> TYPE k16
                 -> TYPE k17
                 -> TYPE k18
                 -> TYPE k19
                 -> TYPE k20
                 -> TYPE k21
                 -> TYPE k22
                 -> TYPE k23
                 -> TYPE k24
                 -> TYPE k25
                 -> TYPE k26
                 -> TYPE k27
                 -> TYPE k28
                 -> TYPE k29
                 -> TYPE k30
                 -> TYPE k31
                 -> TYPE k32
                 -> TYPE k33
                 -> TYPE k34
                 -> TYPE k35
                 -> TYPE k36
                 -> TYPE k37
                 -> TYPE k38
                 -> TYPE k39
                 -> TYPE k40
                 -> TYPE k41
                 -> TYPE k42
                 -> TYPE k43
                 -> TYPE k44
                 -> TYPE k45
                 -> TYPE k46
                 -> TYPE k47
                 -> TYPE k48
                 -> TYPE k49
                 -> TYPE k50
                 -> TYPE k51
                 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51])
  data Sum52# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 = ...
  type Sum53# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep) (k52 :: RuntimeRep).
                 TYPE k0
                 -> TYPE k1
                 -> TYPE k2
                 -> TYPE k3
                 -> TYPE k4
                 -> TYPE k5
                 -> TYPE k6
                 -> TYPE k7
                 -> TYPE k8
                 -> TYPE k9
                 -> TYPE k10
                 -> TYPE k11
                 -> TYPE k12
                 -> TYPE k13
                 -> TYPE k14
                 -> TYPE k15
                 -> TYPE k16
                 -> TYPE k17
                 -> TYPE k18
                 -> TYPE k19
                 -> TYPE k20
                 -> TYPE k21
                 -> TYPE k22
                 -> TYPE k23
                 -> TYPE k24
                 -> TYPE k25
                 -> TYPE k26
                 -> TYPE k27
                 -> TYPE k28
                 -> TYPE k29
                 -> TYPE k30
                 -> TYPE k31
                 -> TYPE k32
                 -> TYPE k33
                 -> TYPE k34
                 -> TYPE k35
                 -> TYPE k36
                 -> TYPE k37
                 -> TYPE k38
                 -> TYPE k39
                 -> TYPE k40
                 -> TYPE k41
                 -> TYPE k42
                 -> TYPE k43
                 -> TYPE k44
                 -> TYPE k45
                 -> TYPE k46
                 -> TYPE k47
                 -> TYPE k48
                 -> TYPE k49
                 -> TYPE k50
                 -> TYPE k51
                 -> TYPE k52
                 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52])
  data Sum53# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 = ...
  type Sum54# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep) (k52 :: RuntimeRep) (k53 :: RuntimeRep).
                 TYPE k0
                 -> TYPE k1
                 -> TYPE k2
                 -> TYPE k3
                 -> TYPE k4
                 -> TYPE k5
                 -> TYPE k6
                 -> TYPE k7
                 -> TYPE k8
                 -> TYPE k9
                 -> TYPE k10
                 -> TYPE k11
                 -> TYPE k12
                 -> TYPE k13
                 -> TYPE k14
                 -> TYPE k15
                 -> TYPE k16
                 -> TYPE k17
                 -> TYPE k18
                 -> TYPE k19
                 -> TYPE k20
                 -> TYPE k21
                 -> TYPE k22
                 -> TYPE k23
                 -> TYPE k24
                 -> TYPE k25
                 -> TYPE k26
                 -> TYPE k27
                 -> TYPE k28
                 -> TYPE k29
                 -> TYPE k30
                 -> TYPE k31
                 -> TYPE k32
                 -> TYPE k33
                 -> TYPE k34
                 -> TYPE k35
                 -> TYPE k36
                 -> TYPE k37
                 -> TYPE k38
                 -> TYPE k39
                 -> TYPE k40
                 -> TYPE k41
                 -> TYPE k42
                 -> TYPE k43
                 -> TYPE k44
                 -> TYPE k45
                 -> TYPE k46
                 -> TYPE k47
                 -> TYPE k48
                 -> TYPE k49
                 -> TYPE k50
                 -> TYPE k51
                 -> TYPE k52
                 -> TYPE k53
                 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52, k53])
  data Sum54# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 = ...
  type Sum55# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep) (k52 :: RuntimeRep) (k53 :: RuntimeRep) (k54 :: RuntimeRep).
                 TYPE k0
                 -> TYPE k1
                 -> TYPE k2
                 -> TYPE k3
                 -> TYPE k4
                 -> TYPE k5
                 -> TYPE k6
                 -> TYPE k7
                 -> TYPE k8
                 -> TYPE k9
                 -> TYPE k10
                 -> TYPE k11
                 -> TYPE k12
                 -> TYPE k13
                 -> TYPE k14
                 -> TYPE k15
                 -> TYPE k16
                 -> TYPE k17
                 -> TYPE k18
                 -> TYPE k19
                 -> TYPE k20
                 -> TYPE k21
                 -> TYPE k22
                 -> TYPE k23
                 -> TYPE k24
                 -> TYPE k25
                 -> TYPE k26
                 -> TYPE k27
                 -> TYPE k28
                 -> TYPE k29
                 -> TYPE k30
                 -> TYPE k31
                 -> TYPE k32
                 -> TYPE k33
                 -> TYPE k34
                 -> TYPE k35
                 -> TYPE k36
                 -> TYPE k37
                 -> TYPE k38
                 -> TYPE k39
                 -> TYPE k40
                 -> TYPE k41
                 -> TYPE k42
                 -> TYPE k43
                 -> TYPE k44
                 -> TYPE k45
                 -> TYPE k46
                 -> TYPE k47
                 -> TYPE k48
                 -> TYPE k49
                 -> TYPE k50
                 -> TYPE k51
                 -> TYPE k52
                 -> TYPE k53
                 -> TYPE k54
                 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52, k53, k54])
  data Sum55# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 = ...
  type Sum56# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep) (k52 :: RuntimeRep) (k53 :: RuntimeRep) (k54 :: RuntimeRep) (k55 :: RuntimeRep).
                 TYPE k0
                 -> TYPE k1
                 -> TYPE k2
                 -> TYPE k3
                 -> TYPE k4
                 -> TYPE k5
                 -> TYPE k6
                 -> TYPE k7
                 -> TYPE k8
                 -> TYPE k9
                 -> TYPE k10
                 -> TYPE k11
                 -> TYPE k12
                 -> TYPE k13
                 -> TYPE k14
                 -> TYPE k15
                 -> TYPE k16
                 -> TYPE k17
                 -> TYPE k18
                 -> TYPE k19
                 -> TYPE k20
                 -> TYPE k21
                 -> TYPE k22
                 -> TYPE k23
                 -> TYPE k24
                 -> TYPE k25
                 -> TYPE k26
                 -> TYPE k27
                 -> TYPE k28
                 -> TYPE k29
                 -> TYPE k30
                 -> TYPE k31
                 -> TYPE k32
                 -> TYPE k33
                 -> TYPE k34
                 -> TYPE k35
                 -> TYPE k36
                 -> TYPE k37
                 -> TYPE k38
                 -> TYPE k39
                 -> TYPE k40
                 -> TYPE k41
                 -> TYPE k42
                 -> TYPE k43
                 -> TYPE k44
                 -> TYPE k45
                 -> TYPE k46
                 -> TYPE k47
                 -> TYPE k48
                 -> TYPE k49
                 -> TYPE k50
                 -> TYPE k51
                 -> TYPE k52
                 -> TYPE k53
                 -> TYPE k54
                 -> TYPE k55
                 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52, k53, k54, k55])
  data Sum56# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 = ...
  type Sum57# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep) (k52 :: RuntimeRep) (k53 :: RuntimeRep) (k54 :: RuntimeRep) (k55 :: RuntimeRep) (k56 :: RuntimeRep).
                 TYPE k0
                 -> TYPE k1
                 -> TYPE k2
                 -> TYPE k3
                 -> TYPE k4
                 -> TYPE k5
                 -> TYPE k6
                 -> TYPE k7
                 -> TYPE k8
                 -> TYPE k9
                 -> TYPE k10
                 -> TYPE k11
                 -> TYPE k12
                 -> TYPE k13
                 -> TYPE k14
                 -> TYPE k15
                 -> TYPE k16
                 -> TYPE k17
                 -> TYPE k18
                 -> TYPE k19
                 -> TYPE k20
                 -> TYPE k21
                 -> TYPE k22
                 -> TYPE k23
                 -> TYPE k24
                 -> TYPE k25
                 -> TYPE k26
                 -> TYPE k27
                 -> TYPE k28
                 -> TYPE k29
                 -> TYPE k30
                 -> TYPE k31
                 -> TYPE k32
                 -> TYPE k33
                 -> TYPE k34
                 -> TYPE k35
                 -> TYPE k36
                 -> TYPE k37
                 -> TYPE k38
                 -> TYPE k39
                 -> TYPE k40
                 -> TYPE k41
                 -> TYPE k42
                 -> TYPE k43
                 -> TYPE k44
                 -> TYPE k45
                 -> TYPE k46
                 -> TYPE k47
                 -> TYPE k48
                 -> TYPE k49
                 -> TYPE k50
                 -> TYPE k51
                 -> TYPE k52
                 -> TYPE k53
                 -> TYPE k54
                 -> TYPE k55
                 -> TYPE k56
                 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52, k53, k54, k55, k56])
  data Sum57# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 = ...
  type Sum58# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep) (k52 :: RuntimeRep) (k53 :: RuntimeRep) (k54 :: RuntimeRep) (k55 :: RuntimeRep) (k56 :: RuntimeRep) (k57 :: RuntimeRep).
                 TYPE k0
                 -> TYPE k1
                 -> TYPE k2
                 -> TYPE k3
                 -> TYPE k4
                 -> TYPE k5
                 -> TYPE k6
                 -> TYPE k7
                 -> TYPE k8
                 -> TYPE k9
                 -> TYPE k10
                 -> TYPE k11
                 -> TYPE k12
                 -> TYPE k13
                 -> TYPE k14
                 -> TYPE k15
                 -> TYPE k16
                 -> TYPE k17
                 -> TYPE k18
                 -> TYPE k19
                 -> TYPE k20
                 -> TYPE k21
                 -> TYPE k22
                 -> TYPE k23
                 -> TYPE k24
                 -> TYPE k25
                 -> TYPE k26
                 -> TYPE k27
                 -> TYPE k28
                 -> TYPE k29
                 -> TYPE k30
                 -> TYPE k31
                 -> TYPE k32
                 -> TYPE k33
                 -> TYPE k34
                 -> TYPE k35
                 -> TYPE k36
                 -> TYPE k37
                 -> TYPE k38
                 -> TYPE k39
                 -> TYPE k40
                 -> TYPE k41
                 -> TYPE k42
                 -> TYPE k43
                 -> TYPE k44
                 -> TYPE k45
                 -> TYPE k46
                 -> TYPE k47
                 -> TYPE k48
                 -> TYPE k49
                 -> TYPE k50
                 -> TYPE k51
                 -> TYPE k52
                 -> TYPE k53
                 -> TYPE k54
                 -> TYPE k55
                 -> TYPE k56
                 -> TYPE k57
                 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52, k53, k54, k55, k56, k57])
  data Sum58# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 = ...
  type Sum59# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep) (k52 :: RuntimeRep) (k53 :: RuntimeRep) (k54 :: RuntimeRep) (k55 :: RuntimeRep) (k56 :: RuntimeRep) (k57 :: RuntimeRep) (k58 :: RuntimeRep).
                 TYPE k0
                 -> TYPE k1
                 -> TYPE k2
                 -> TYPE k3
                 -> TYPE k4
                 -> TYPE k5
                 -> TYPE k6
                 -> TYPE k7
                 -> TYPE k8
                 -> TYPE k9
                 -> TYPE k10
                 -> TYPE k11
                 -> TYPE k12
                 -> TYPE k13
                 -> TYPE k14
                 -> TYPE k15
                 -> TYPE k16
                 -> TYPE k17
                 -> TYPE k18
                 -> TYPE k19
                 -> TYPE k20
                 -> TYPE k21
                 -> TYPE k22
                 -> TYPE k23
                 -> TYPE k24
                 -> TYPE k25
                 -> TYPE k26
                 -> TYPE k27
                 -> TYPE k28
                 -> TYPE k29
                 -> TYPE k30
                 -> TYPE k31
                 -> TYPE k32
                 -> TYPE k33
                 -> TYPE k34
                 -> TYPE k35
                 -> TYPE k36
                 -> TYPE k37
                 -> TYPE k38
                 -> TYPE k39
                 -> TYPE k40
                 -> TYPE k41
                 -> TYPE k42
                 -> TYPE k43
                 -> TYPE k44
                 -> TYPE k45
                 -> TYPE k46
                 -> TYPE k47
                 -> TYPE k48
                 -> TYPE k49
                 -> TYPE k50
                 -> TYPE k51
                 -> TYPE k52
                 -> TYPE k53
                 -> TYPE k54
                 -> TYPE k55
                 -> TYPE k56
                 -> TYPE k57
                 -> TYPE k58
                 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52, k53, k54, k55, k56, k57, k58])
  data Sum59# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 = ...
  type Sum6# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5])
  data Sum6# a b c d e f = ...
  type Sum60# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep) (k52 :: RuntimeRep) (k53 :: RuntimeRep) (k54 :: RuntimeRep) (k55 :: RuntimeRep) (k56 :: RuntimeRep) (k57 :: RuntimeRep) (k58 :: RuntimeRep) (k59 :: RuntimeRep).
                 TYPE k0
                 -> TYPE k1
                 -> TYPE k2
                 -> TYPE k3
                 -> TYPE k4
                 -> TYPE k5
                 -> TYPE k6
                 -> TYPE k7
                 -> TYPE k8
                 -> TYPE k9
                 -> TYPE k10
                 -> TYPE k11
                 -> TYPE k12
                 -> TYPE k13
                 -> TYPE k14
                 -> TYPE k15
                 -> TYPE k16
                 -> TYPE k17
                 -> TYPE k18
                 -> TYPE k19
                 -> TYPE k20
                 -> TYPE k21
                 -> TYPE k22
                 -> TYPE k23
                 -> TYPE k24
                 -> TYPE k25
                 -> TYPE k26
                 -> TYPE k27
                 -> TYPE k28
                 -> TYPE k29
                 -> TYPE k30
                 -> TYPE k31
                 -> TYPE k32
                 -> TYPE k33
                 -> TYPE k34
                 -> TYPE k35
                 -> TYPE k36
                 -> TYPE k37
                 -> TYPE k38
                 -> TYPE k39
                 -> TYPE k40
                 -> TYPE k41
                 -> TYPE k42
                 -> TYPE k43
                 -> TYPE k44
                 -> TYPE k45
                 -> TYPE k46
                 -> TYPE k47
                 -> TYPE k48
                 -> TYPE k49
                 -> TYPE k50
                 -> TYPE k51
                 -> TYPE k52
                 -> TYPE k53
                 -> TYPE k54
                 -> TYPE k55
                 -> TYPE k56
                 -> TYPE k57
                 -> TYPE k58
                 -> TYPE k59
                 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52, k53, k54, k55, k56, k57, k58, k59])
  data Sum60# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 = ...
  type Sum61# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep) (k52 :: RuntimeRep) (k53 :: RuntimeRep) (k54 :: RuntimeRep) (k55 :: RuntimeRep) (k56 :: RuntimeRep) (k57 :: RuntimeRep) (k58 :: RuntimeRep) (k59 :: RuntimeRep) (k60 :: RuntimeRep).
                 TYPE k0
                 -> TYPE k1
                 -> TYPE k2
                 -> TYPE k3
                 -> TYPE k4
                 -> TYPE k5
                 -> TYPE k6
                 -> TYPE k7
                 -> TYPE k8
                 -> TYPE k9
                 -> TYPE k10
                 -> TYPE k11
                 -> TYPE k12
                 -> TYPE k13
                 -> TYPE k14
                 -> TYPE k15
                 -> TYPE k16
                 -> TYPE k17
                 -> TYPE k18
                 -> TYPE k19
                 -> TYPE k20
                 -> TYPE k21
                 -> TYPE k22
                 -> TYPE k23
                 -> TYPE k24
                 -> TYPE k25
                 -> TYPE k26
                 -> TYPE k27
                 -> TYPE k28
                 -> TYPE k29
                 -> TYPE k30
                 -> TYPE k31
                 -> TYPE k32
                 -> TYPE k33
                 -> TYPE k34
                 -> TYPE k35
                 -> TYPE k36
                 -> TYPE k37
                 -> TYPE k38
                 -> TYPE k39
                 -> TYPE k40
                 -> TYPE k41
                 -> TYPE k42
                 -> TYPE k43
                 -> TYPE k44
                 -> TYPE k45
                 -> TYPE k46
                 -> TYPE k47
                 -> TYPE k48
                 -> TYPE k49
                 -> TYPE k50
                 -> TYPE k51
                 -> TYPE k52
                 -> TYPE k53
                 -> TYPE k54
                 -> TYPE k55
                 -> TYPE k56
                 -> TYPE k57
                 -> TYPE k58
                 -> TYPE k59
                 -> TYPE k60
                 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52, k53, k54, k55, k56, k57, k58, k59, k60])
  data Sum61# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 t60 = ...
  type Sum62# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep) (k52 :: RuntimeRep) (k53 :: RuntimeRep) (k54 :: RuntimeRep) (k55 :: RuntimeRep) (k56 :: RuntimeRep) (k57 :: RuntimeRep) (k58 :: RuntimeRep) (k59 :: RuntimeRep) (k60 :: RuntimeRep) (k61 :: RuntimeRep).
                 TYPE k0
                 -> TYPE k1
                 -> TYPE k2
                 -> TYPE k3
                 -> TYPE k4
                 -> TYPE k5
                 -> TYPE k6
                 -> TYPE k7
                 -> TYPE k8
                 -> TYPE k9
                 -> TYPE k10
                 -> TYPE k11
                 -> TYPE k12
                 -> TYPE k13
                 -> TYPE k14
                 -> TYPE k15
                 -> TYPE k16
                 -> TYPE k17
                 -> TYPE k18
                 -> TYPE k19
                 -> TYPE k20
                 -> TYPE k21
                 -> TYPE k22
                 -> TYPE k23
                 -> TYPE k24
                 -> TYPE k25
                 -> TYPE k26
                 -> TYPE k27
                 -> TYPE k28
                 -> TYPE k29
                 -> TYPE k30
                 -> TYPE k31
                 -> TYPE k32
                 -> TYPE k33
                 -> TYPE k34
                 -> TYPE k35
                 -> TYPE k36
                 -> TYPE k37
                 -> TYPE k38
                 -> TYPE k39
                 -> TYPE k40
                 -> TYPE k41
                 -> TYPE k42
                 -> TYPE k43
                 -> TYPE k44
                 -> TYPE k45
                 -> TYPE k46
                 -> TYPE k47
                 -> TYPE k48
                 -> TYPE k49
                 -> TYPE k50
                 -> TYPE k51
                 -> TYPE k52
                 -> TYPE k53
                 -> TYPE k54
                 -> TYPE k55
                 -> TYPE k56
                 -> TYPE k57
                 -> TYPE k58
                 -> TYPE k59
                 -> TYPE k60
                 -> TYPE k61
                 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52, k53, k54, k55, k56, k57, k58, k59, k60, k61])
  data Sum62# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 t60 t61 = ...
  type Sum63# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                        (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep) (k52 :: RuntimeRep) (k53 :: RuntimeRep) (k54 :: RuntimeRep) (k55 :: RuntimeRep) (k56 :: RuntimeRep) (k57 :: RuntimeRep) (k58 :: RuntimeRep) (k59 :: RuntimeRep) (k60 :: RuntimeRep) (k61 :: RuntimeRep) (k62 :: RuntimeRep).
                 TYPE k0
                 -> TYPE k1
                 -> TYPE k2
                 -> TYPE k3
                 -> TYPE k4
                 -> TYPE k5
                 -> TYPE k6
                 -> TYPE k7
                 -> TYPE k8
                 -> TYPE k9
                 -> TYPE k10
                 -> TYPE k11
                 -> TYPE k12
                 -> TYPE k13
                 -> TYPE k14
                 -> TYPE k15
                 -> TYPE k16
                 -> TYPE k17
                 -> TYPE k18
                 -> TYPE k19
                 -> TYPE k20
                 -> TYPE k21
                 -> TYPE k22
                 -> TYPE k23
                 -> TYPE k24
                 -> TYPE k25
                 -> TYPE k26
                 -> TYPE k27
                 -> TYPE k28
                 -> TYPE k29
                 -> TYPE k30
                 -> TYPE k31
                 -> TYPE k32
                 -> TYPE k33
                 -> TYPE k34
                 -> TYPE k35
                 -> TYPE k36
                 -> TYPE k37
                 -> TYPE k38
                 -> TYPE k39
                 -> TYPE k40
                 -> TYPE k41
                 -> TYPE k42
                 -> TYPE k43
                 -> TYPE k44
                 -> TYPE k45
                 -> TYPE k46
                 -> TYPE k47
                 -> TYPE k48
                 -> TYPE k49
                 -> TYPE k50
                 -> TYPE k51
                 -> TYPE k52
                 -> TYPE k53
                 -> TYPE k54
                 -> TYPE k55
                 -> TYPE k56
                 -> TYPE k57
                 -> TYPE k58
                 -> TYPE k59
                 -> TYPE k60
                 -> TYPE k61
                 -> TYPE k62
                 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52, k53, k54, k55, k56, k57, k58, k59, k60, k61, k62])
  data Sum63# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 t60 t61 t62 = ...
  type Sum7# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6])
  data Sum7# a b c d e f g = ...
  type Sum8# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7])
  data Sum8# a b c d e f g h = ...
  type Sum9# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE (SumRep [k0, k1, k2, k3, k4, k5, k6, k7, k8])
  data Sum9# a b c d e f g h i = ...
  type Symbol :: *
  data Symbol
  type role TYPE nominal
  type TYPE :: RuntimeRep -> *
  data TYPE a
  type TrName :: *
  data TrName = TrNameS GHC.Internal.Prim.Addr# | TrNameD [Char]
  type Tuple0# :: ZeroBitType
  type Tuple0# = (# #)
  type Tuple1# :: * -> TYPE (TupleRep '[LiftedRep])
  type Tuple1# = Solo#
  type Tuple10# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9])
  data Tuple10# a b c d e f g h i j = ...
  type Tuple11# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10])
  data Tuple11# a b c d e f g h i j k = ...
  type Tuple12# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11])
  data Tuple12# a b c d e f g h i j k l = ...
  type Tuple13# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12])
  data Tuple13# a b c d e f g h i j k l m = ...
  type Tuple14# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13])
  data Tuple14# a b c d e f g h i j k l m n = ...
  type Tuple15# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14])
  data Tuple15# a b c d e f g h i j k l m n o = ...
  type Tuple16# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15])
  data Tuple16# a b c d e f g h i j k l m n o p = ...
  type Tuple17# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16])
  data Tuple17# a b c d e f g h i j k l m n o p q = ...
  type Tuple18# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep).
                   TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17])
  data Tuple18# a b c d e f g h i j k l m n o p q r = ...
  type Tuple19# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep).
                   TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18])
  data Tuple19# a b c d e f g h i j k l m n o p q r s = ...
  type Tuple2# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE (TupleRep [k0, k1])
  data Tuple2# a b = ...
  type Tuple20# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep).
                   TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19])
  data Tuple20# a b c d e f g h i j k l m n o p q r s t = ...
  type Tuple21# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep).
                   TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20])
  data Tuple21# a b c d e f g h i j k l m n o p q r s t u = ...
  type Tuple22# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep).
                   TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21])
  data Tuple22# a b c d e f g h i j k l m n o p q r s t u v = ...
  type Tuple23# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep).
                   TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22])
  data Tuple23# a b c d e f g h i j k l m n o p q r s t u v w = ...
  type Tuple24# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep).
                   TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23])
  data Tuple24# a b c d e f g h i j k l m n o p q r s t u v w x = ...
  type Tuple25# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep).
                   TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24])
  data Tuple25# a b c d e f g h i j k l m n o p q r s t u v w x y = ...
  type Tuple26# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep).
                   TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25])
  data Tuple26# a b c d e f g h i j k l m n o p q r s t u v w x y z = ...
  type Tuple27# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep).
                   TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26])
  data Tuple27# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 = ...
  type Tuple28# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep).
                   TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27])
  data Tuple28# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 = ...
  type Tuple29# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep).
                   TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE k28 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28])
  data Tuple29# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 = ...
  type Tuple3# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE (TupleRep [k0, k1, k2])
  data Tuple3# a b c = ...
  type Tuple30# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep).
                   TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE k28 -> TYPE k29 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29])
  data Tuple30# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 = ...
  type Tuple31# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep).
                   TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE k28 -> TYPE k29 -> TYPE k30 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30])
  data Tuple31# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 = ...
  type Tuple32# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep).
                   TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE k28 -> TYPE k29 -> TYPE k30 -> TYPE k31 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31])
  data Tuple32# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 = ...
  type Tuple33# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep).
                   TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE k28 -> TYPE k29 -> TYPE k30 -> TYPE k31 -> TYPE k32 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32])
  data Tuple33# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 = ...
  type Tuple34# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep).
                   TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE k28 -> TYPE k29 -> TYPE k30 -> TYPE k31 -> TYPE k32 -> TYPE k33 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33])
  data Tuple34# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 = ...
  type Tuple35# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep).
                   TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE k28 -> TYPE k29 -> TYPE k30 -> TYPE k31 -> TYPE k32 -> TYPE k33 -> TYPE k34 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34])
  data Tuple35# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 = ...
  type Tuple36# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep).
                   TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE k28 -> TYPE k29 -> TYPE k30 -> TYPE k31 -> TYPE k32 -> TYPE k33 -> TYPE k34 -> TYPE k35 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35])
  data Tuple36# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 = ...
  type Tuple37# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep).
                   TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE k28 -> TYPE k29 -> TYPE k30 -> TYPE k31 -> TYPE k32 -> TYPE k33 -> TYPE k34 -> TYPE k35 -> TYPE k36 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36])
  data Tuple37# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 = ...
  type Tuple38# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep).
                   TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE k28 -> TYPE k29 -> TYPE k30 -> TYPE k31 -> TYPE k32 -> TYPE k33 -> TYPE k34 -> TYPE k35 -> TYPE k36 -> TYPE k37 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37])
  data Tuple38# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 = ...
  type Tuple39# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep).
                   TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE k9 -> TYPE k10 -> TYPE k11 -> TYPE k12 -> TYPE k13 -> TYPE k14 -> TYPE k15 -> TYPE k16 -> TYPE k17 -> TYPE k18 -> TYPE k19 -> TYPE k20 -> TYPE k21 -> TYPE k22 -> TYPE k23 -> TYPE k24 -> TYPE k25 -> TYPE k26 -> TYPE k27 -> TYPE k28 -> TYPE k29 -> TYPE k30 -> TYPE k31 -> TYPE k32 -> TYPE k33 -> TYPE k34 -> TYPE k35 -> TYPE k36 -> TYPE k37 -> TYPE k38 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38])
  data Tuple39# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 = ...
  type Tuple4# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE (TupleRep [k0, k1, k2, k3])
  data Tuple4# a b c d = ...
  type Tuple40# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39])
  data Tuple40# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 = ...
  type Tuple41# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE k40
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40])
  data Tuple41# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 = ...
  type Tuple42# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE k40
                   -> TYPE k41
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41])
  data Tuple42# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 = ...
  type Tuple43# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE k40
                   -> TYPE k41
                   -> TYPE k42
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42])
  data Tuple43# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 = ...
  type Tuple44# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE k40
                   -> TYPE k41
                   -> TYPE k42
                   -> TYPE k43
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43])
  data Tuple44# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 = ...
  type Tuple45# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE k40
                   -> TYPE k41
                   -> TYPE k42
                   -> TYPE k43
                   -> TYPE k44
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44])
  data Tuple45# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 = ...
  type Tuple46# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE k40
                   -> TYPE k41
                   -> TYPE k42
                   -> TYPE k43
                   -> TYPE k44
                   -> TYPE k45
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45])
  data Tuple46# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 = ...
  type Tuple47# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE k40
                   -> TYPE k41
                   -> TYPE k42
                   -> TYPE k43
                   -> TYPE k44
                   -> TYPE k45
                   -> TYPE k46
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46])
  data Tuple47# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 = ...
  type Tuple48# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE k40
                   -> TYPE k41
                   -> TYPE k42
                   -> TYPE k43
                   -> TYPE k44
                   -> TYPE k45
                   -> TYPE k46
                   -> TYPE k47
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47])
  data Tuple48# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 = ...
  type Tuple49# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE k40
                   -> TYPE k41
                   -> TYPE k42
                   -> TYPE k43
                   -> TYPE k44
                   -> TYPE k45
                   -> TYPE k46
                   -> TYPE k47
                   -> TYPE k48
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48])
  data Tuple49# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 = ...
  type Tuple5# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE (TupleRep [k0, k1, k2, k3, k4])
  data Tuple5# a b c d e = ...
  type Tuple50# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE k40
                   -> TYPE k41
                   -> TYPE k42
                   -> TYPE k43
                   -> TYPE k44
                   -> TYPE k45
                   -> TYPE k46
                   -> TYPE k47
                   -> TYPE k48
                   -> TYPE k49
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49])
  data Tuple50# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 = ...
  type Tuple51# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE k40
                   -> TYPE k41
                   -> TYPE k42
                   -> TYPE k43
                   -> TYPE k44
                   -> TYPE k45
                   -> TYPE k46
                   -> TYPE k47
                   -> TYPE k48
                   -> TYPE k49
                   -> TYPE k50
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50])
  data Tuple51# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 = ...
  type Tuple52# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE k40
                   -> TYPE k41
                   -> TYPE k42
                   -> TYPE k43
                   -> TYPE k44
                   -> TYPE k45
                   -> TYPE k46
                   -> TYPE k47
                   -> TYPE k48
                   -> TYPE k49
                   -> TYPE k50
                   -> TYPE k51
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51])
  data Tuple52# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 = ...
  type Tuple53# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep) (k52 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE k40
                   -> TYPE k41
                   -> TYPE k42
                   -> TYPE k43
                   -> TYPE k44
                   -> TYPE k45
                   -> TYPE k46
                   -> TYPE k47
                   -> TYPE k48
                   -> TYPE k49
                   -> TYPE k50
                   -> TYPE k51
                   -> TYPE k52
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52])
  data Tuple53# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 = ...
  type Tuple54# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep) (k52 :: RuntimeRep) (k53 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE k40
                   -> TYPE k41
                   -> TYPE k42
                   -> TYPE k43
                   -> TYPE k44
                   -> TYPE k45
                   -> TYPE k46
                   -> TYPE k47
                   -> TYPE k48
                   -> TYPE k49
                   -> TYPE k50
                   -> TYPE k51
                   -> TYPE k52
                   -> TYPE k53
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52, k53])
  data Tuple54# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 = ...
  type Tuple55# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep) (k52 :: RuntimeRep) (k53 :: RuntimeRep) (k54 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE k40
                   -> TYPE k41
                   -> TYPE k42
                   -> TYPE k43
                   -> TYPE k44
                   -> TYPE k45
                   -> TYPE k46
                   -> TYPE k47
                   -> TYPE k48
                   -> TYPE k49
                   -> TYPE k50
                   -> TYPE k51
                   -> TYPE k52
                   -> TYPE k53
                   -> TYPE k54
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52, k53, k54])
  data Tuple55# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 = ...
  type Tuple56# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep) (k52 :: RuntimeRep) (k53 :: RuntimeRep) (k54 :: RuntimeRep) (k55 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE k40
                   -> TYPE k41
                   -> TYPE k42
                   -> TYPE k43
                   -> TYPE k44
                   -> TYPE k45
                   -> TYPE k46
                   -> TYPE k47
                   -> TYPE k48
                   -> TYPE k49
                   -> TYPE k50
                   -> TYPE k51
                   -> TYPE k52
                   -> TYPE k53
                   -> TYPE k54
                   -> TYPE k55
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52, k53, k54, k55])
  data Tuple56# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 = ...
  type Tuple57# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep) (k52 :: RuntimeRep) (k53 :: RuntimeRep) (k54 :: RuntimeRep) (k55 :: RuntimeRep) (k56 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE k40
                   -> TYPE k41
                   -> TYPE k42
                   -> TYPE k43
                   -> TYPE k44
                   -> TYPE k45
                   -> TYPE k46
                   -> TYPE k47
                   -> TYPE k48
                   -> TYPE k49
                   -> TYPE k50
                   -> TYPE k51
                   -> TYPE k52
                   -> TYPE k53
                   -> TYPE k54
                   -> TYPE k55
                   -> TYPE k56
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52, k53, k54, k55, k56])
  data Tuple57# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 = ...
  type Tuple58# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep) (k52 :: RuntimeRep) (k53 :: RuntimeRep) (k54 :: RuntimeRep) (k55 :: RuntimeRep) (k56 :: RuntimeRep) (k57 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE k40
                   -> TYPE k41
                   -> TYPE k42
                   -> TYPE k43
                   -> TYPE k44
                   -> TYPE k45
                   -> TYPE k46
                   -> TYPE k47
                   -> TYPE k48
                   -> TYPE k49
                   -> TYPE k50
                   -> TYPE k51
                   -> TYPE k52
                   -> TYPE k53
                   -> TYPE k54
                   -> TYPE k55
                   -> TYPE k56
                   -> TYPE k57
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52, k53, k54, k55, k56, k57])
  data Tuple58# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 = ...
  type Tuple59# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep) (k52 :: RuntimeRep) (k53 :: RuntimeRep) (k54 :: RuntimeRep) (k55 :: RuntimeRep) (k56 :: RuntimeRep) (k57 :: RuntimeRep) (k58 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE k40
                   -> TYPE k41
                   -> TYPE k42
                   -> TYPE k43
                   -> TYPE k44
                   -> TYPE k45
                   -> TYPE k46
                   -> TYPE k47
                   -> TYPE k48
                   -> TYPE k49
                   -> TYPE k50
                   -> TYPE k51
                   -> TYPE k52
                   -> TYPE k53
                   -> TYPE k54
                   -> TYPE k55
                   -> TYPE k56
                   -> TYPE k57
                   -> TYPE k58
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52, k53, k54, k55, k56, k57, k58])
  data Tuple59# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 = ...
  type Tuple6# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5])
  data Tuple6# a b c d e f = ...
  type Tuple60# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep) (k52 :: RuntimeRep) (k53 :: RuntimeRep) (k54 :: RuntimeRep) (k55 :: RuntimeRep) (k56 :: RuntimeRep) (k57 :: RuntimeRep) (k58 :: RuntimeRep) (k59 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE k40
                   -> TYPE k41
                   -> TYPE k42
                   -> TYPE k43
                   -> TYPE k44
                   -> TYPE k45
                   -> TYPE k46
                   -> TYPE k47
                   -> TYPE k48
                   -> TYPE k49
                   -> TYPE k50
                   -> TYPE k51
                   -> TYPE k52
                   -> TYPE k53
                   -> TYPE k54
                   -> TYPE k55
                   -> TYPE k56
                   -> TYPE k57
                   -> TYPE k58
                   -> TYPE k59
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52, k53, k54, k55, k56, k57, k58, k59])
  data Tuple60# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 = ...
  type Tuple61# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep) (k52 :: RuntimeRep) (k53 :: RuntimeRep) (k54 :: RuntimeRep) (k55 :: RuntimeRep) (k56 :: RuntimeRep) (k57 :: RuntimeRep) (k58 :: RuntimeRep) (k59 :: RuntimeRep) (k60 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE k40
                   -> TYPE k41
                   -> TYPE k42
                   -> TYPE k43
                   -> TYPE k44
                   -> TYPE k45
                   -> TYPE k46
                   -> TYPE k47
                   -> TYPE k48
                   -> TYPE k49
                   -> TYPE k50
                   -> TYPE k51
                   -> TYPE k52
                   -> TYPE k53
                   -> TYPE k54
                   -> TYPE k55
                   -> TYPE k56
                   -> TYPE k57
                   -> TYPE k58
                   -> TYPE k59
                   -> TYPE k60
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52, k53, k54, k55, k56, k57, k58, k59, k60])
  data Tuple61# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 t60 = ...
  type Tuple62# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep) (k52 :: RuntimeRep) (k53 :: RuntimeRep) (k54 :: RuntimeRep) (k55 :: RuntimeRep) (k56 :: RuntimeRep) (k57 :: RuntimeRep) (k58 :: RuntimeRep) (k59 :: RuntimeRep) (k60 :: RuntimeRep) (k61 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE k40
                   -> TYPE k41
                   -> TYPE k42
                   -> TYPE k43
                   -> TYPE k44
                   -> TYPE k45
                   -> TYPE k46
                   -> TYPE k47
                   -> TYPE k48
                   -> TYPE k49
                   -> TYPE k50
                   -> TYPE k51
                   -> TYPE k52
                   -> TYPE k53
                   -> TYPE k54
                   -> TYPE k55
                   -> TYPE k56
                   -> TYPE k57
                   -> TYPE k58
                   -> TYPE k59
                   -> TYPE k60
                   -> TYPE k61
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52, k53, k54, k55, k56, k57, k58, k59, k60, k61])
  data Tuple62# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 t60 t61 = ...
  type Tuple63# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep) (k52 :: RuntimeRep) (k53 :: RuntimeRep) (k54 :: RuntimeRep) (k55 :: RuntimeRep) (k56 :: RuntimeRep) (k57 :: RuntimeRep) (k58 :: RuntimeRep) (k59 :: RuntimeRep) (k60 :: RuntimeRep) (k61 :: RuntimeRep) (k62 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE k40
                   -> TYPE k41
                   -> TYPE k42
                   -> TYPE k43
                   -> TYPE k44
                   -> TYPE k45
                   -> TYPE k46
                   -> TYPE k47
                   -> TYPE k48
                   -> TYPE k49
                   -> TYPE k50
                   -> TYPE k51
                   -> TYPE k52
                   -> TYPE k53
                   -> TYPE k54
                   -> TYPE k55
                   -> TYPE k56
                   -> TYPE k57
                   -> TYPE k58
                   -> TYPE k59
                   -> TYPE k60
                   -> TYPE k61
                   -> TYPE k62
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52, k53, k54, k55, k56, k57, k58, k59, k60, k61, k62])
  data Tuple63# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 t60 t61 t62 = ...
  type Tuple64# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep) (k9 :: RuntimeRep) (k10 :: RuntimeRep) (k11 :: RuntimeRep) (k12 :: RuntimeRep) (k13 :: RuntimeRep) (k14 :: RuntimeRep) (k15 :: RuntimeRep) (k16 :: RuntimeRep) (k17 :: RuntimeRep) (k18 :: RuntimeRep) (k19 :: RuntimeRep) (k20 :: RuntimeRep) (k21 :: RuntimeRep) (k22 :: RuntimeRep) (k23 :: RuntimeRep) (k24 :: RuntimeRep) (k25 :: RuntimeRep) (k26 :: RuntimeRep) (k27 :: RuntimeRep) (k28 :: RuntimeRep) (k29 :: RuntimeRep) (k30 :: RuntimeRep) (k31 :: RuntimeRep)
                          (k32 :: RuntimeRep) (k33 :: RuntimeRep) (k34 :: RuntimeRep) (k35 :: RuntimeRep) (k36 :: RuntimeRep) (k37 :: RuntimeRep) (k38 :: RuntimeRep) (k39 :: RuntimeRep) (k40 :: RuntimeRep) (k41 :: RuntimeRep) (k42 :: RuntimeRep) (k43 :: RuntimeRep) (k44 :: RuntimeRep) (k45 :: RuntimeRep) (k46 :: RuntimeRep) (k47 :: RuntimeRep) (k48 :: RuntimeRep) (k49 :: RuntimeRep) (k50 :: RuntimeRep) (k51 :: RuntimeRep) (k52 :: RuntimeRep) (k53 :: RuntimeRep) (k54 :: RuntimeRep) (k55 :: RuntimeRep) (k56 :: RuntimeRep) (k57 :: RuntimeRep) (k58 :: RuntimeRep) (k59 :: RuntimeRep) (k60 :: RuntimeRep) (k61 :: RuntimeRep) (k62 :: RuntimeRep) (k63 :: RuntimeRep).
                   TYPE k0
                   -> TYPE k1
                   -> TYPE k2
                   -> TYPE k3
                   -> TYPE k4
                   -> TYPE k5
                   -> TYPE k6
                   -> TYPE k7
                   -> TYPE k8
                   -> TYPE k9
                   -> TYPE k10
                   -> TYPE k11
                   -> TYPE k12
                   -> TYPE k13
                   -> TYPE k14
                   -> TYPE k15
                   -> TYPE k16
                   -> TYPE k17
                   -> TYPE k18
                   -> TYPE k19
                   -> TYPE k20
                   -> TYPE k21
                   -> TYPE k22
                   -> TYPE k23
                   -> TYPE k24
                   -> TYPE k25
                   -> TYPE k26
                   -> TYPE k27
                   -> TYPE k28
                   -> TYPE k29
                   -> TYPE k30
                   -> TYPE k31
                   -> TYPE k32
                   -> TYPE k33
                   -> TYPE k34
                   -> TYPE k35
                   -> TYPE k36
                   -> TYPE k37
                   -> TYPE k38
                   -> TYPE k39
                   -> TYPE k40
                   -> TYPE k41
                   -> TYPE k42
                   -> TYPE k43
                   -> TYPE k44
                   -> TYPE k45
                   -> TYPE k46
                   -> TYPE k47
                   -> TYPE k48
                   -> TYPE k49
                   -> TYPE k50
                   -> TYPE k51
                   -> TYPE k52
                   -> TYPE k53
                   -> TYPE k54
                   -> TYPE k55
                   -> TYPE k56
                   -> TYPE k57
                   -> TYPE k58
                   -> TYPE k59
                   -> TYPE k60
                   -> TYPE k61
                   -> TYPE k62
                   -> TYPE k63
                   -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52, k53, k54, k55, k56, k57, k58, k59, k60, k61, k62, k63])
  data Tuple64# a b c d e f g h i j k l m n o p q r s t u v w x y z t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 t60 t61 t62 t63 = ...
  type Tuple7# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6])
  data Tuple7# a b c d e f g = ...
  type Tuple8# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7])
  data Tuple8# a b c d e f g h = ...
  type Tuple9# :: forall (k0 :: RuntimeRep) (k1 :: RuntimeRep) (k2 :: RuntimeRep) (k3 :: RuntimeRep) (k4 :: RuntimeRep) (k5 :: RuntimeRep) (k6 :: RuntimeRep) (k7 :: RuntimeRep) (k8 :: RuntimeRep). TYPE k0 -> TYPE k1 -> TYPE k2 -> TYPE k3 -> TYPE k4 -> TYPE k5 -> TYPE k6 -> TYPE k7 -> TYPE k8 -> TYPE (TupleRep [k0, k1, k2, k3, k4, k5, k6, k7, k8])
  data Tuple9# a b c d e f g h i = ...
  type TyCon :: *
  data TyCon = TyCon GHC.Internal.Prim.Word64# GHC.Internal.Prim.Word64# Module TrName GHC.Internal.Prim.Int# KindRep
  type Type :: *
  type Type = TYPE LiftedRep
  type TypeLitSort :: *
  data TypeLitSort = TypeLitSymbol | TypeLitNat | TypeLitChar
  type Unit# :: ZeroBitType
  data Unit# = ...
  type UnliftedRep :: RuntimeRep
  type UnliftedRep = BoxedRep Unlifted
  type UnliftedType :: *
  type UnliftedType = TYPE UnliftedRep
  type VecCount :: *
  data VecCount = Vec2 | Vec4 | Vec8 | Vec16 | Vec32 | Vec64
  type VecElem :: *
  data VecElem = Int8ElemRep | Int16ElemRep | Int32ElemRep | Int64ElemRep | Word8ElemRep | Word16ElemRep | Word32ElemRep | Word64ElemRep | FloatElemRep | DoubleElemRep
  type Void# :: ZeroBitType
  type Void# = (# #)
  type Word :: *
  data Word = W# GHC.Internal.Prim.Word#
  type WordBox :: TYPE WordRep -> *
  data WordBox a = MkWordBox a
  type ZeroBitRep :: RuntimeRep
  type ZeroBitRep = TupleRep '[]
  type ZeroBitType :: *
  type ZeroBitType = TYPE ZeroBitRep
  isTrue# :: GHC.Internal.Prim.Int# -> Bool
  type (~) :: forall k. k -> k -> Constraint
  class (a ~ b) => (~) a b
    {-# MINIMAL #-}
  type (~~) :: forall k0 k1. k0 -> k1 -> Constraint
  class (a ~~ b) => (~~) a b
    {-# MINIMAL #-}


-- Instances:
instance GHC.Internal.Classes.Eq GHC.Internal.Types.Bool -- Defined in ‘GHC.Internal.Classes’
instance GHC.Internal.Classes.Eq GHC.Internal.Types.Char -- Defined in ‘GHC.Internal.Classes’
instance GHC.Internal.Classes.Eq GHC.Internal.Types.Double -- Defined in ‘GHC.Internal.Classes’
instance GHC.Internal.Classes.Eq GHC.Internal.Types.Float -- Defined in ‘GHC.Internal.Classes’
instance GHC.Internal.Classes.Eq GHC.Internal.Types.Int -- Defined in ‘GHC.Internal.Classes’
instance forall a. GHC.Internal.Classes.Eq a => GHC.Internal.Classes.Eq [a] -- Defined in ‘GHC.Internal.Classes’
instance GHC.Internal.Classes.Eq GHC.Internal.Types.Module -- Defined in ‘GHC.Internal.Classes’
instance GHC.Internal.Classes.Eq GHC.Internal.Types.Ordering -- Defined in ‘GHC.Internal.Classes’
instance forall a. GHC.Internal.Classes.Eq a => GHC.Internal.Classes.Eq (Solo a) -- Defined in ‘GHC.Internal.Classes’
instance GHC.Internal.Classes.Eq GHC.Internal.Types.TrName -- Defined in ‘GHC.Internal.Classes’
instance forall a b c d e f g h i j. (GHC.Internal.Classes.Eq a, GHC.Internal.Classes.Eq b, GHC.Internal.Classes.Eq c, GHC.Internal.Classes.Eq d, GHC.Internal.Classes.Eq e, GHC.Internal.Classes.Eq f, GHC.Internal.Classes.Eq g, GHC.Internal.Classes.Eq h, GHC.Internal.Classes.Eq i, GHC.Internal.Classes.Eq j) => GHC.Internal.Classes.Eq (a, b, c, d, e, f, g, h, i, j) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c d e f g h i j k. (GHC.Internal.Classes.Eq a, GHC.Internal.Classes.Eq b, GHC.Internal.Classes.Eq c, GHC.Internal.Classes.Eq d, GHC.Internal.Classes.Eq e, GHC.Internal.Classes.Eq f, GHC.Internal.Classes.Eq g, GHC.Internal.Classes.Eq h, GHC.Internal.Classes.Eq i, GHC.Internal.Classes.Eq j, GHC.Internal.Classes.Eq k) => GHC.Internal.Classes.Eq (a, b, c, d, e, f, g, h, i, j, k) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c d e f g h i j k l. (GHC.Internal.Classes.Eq a, GHC.Internal.Classes.Eq b, GHC.Internal.Classes.Eq c, GHC.Internal.Classes.Eq d, GHC.Internal.Classes.Eq e, GHC.Internal.Classes.Eq f, GHC.Internal.Classes.Eq g, GHC.Internal.Classes.Eq h, GHC.Internal.Classes.Eq i, GHC.Internal.Classes.Eq j, GHC.Internal.Classes.Eq k, GHC.Internal.Classes.Eq l) => GHC.Internal.Classes.Eq (a, b, c, d, e, f, g, h, i, j, k, l) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c d e f g h i j k l m. (GHC.Internal.Classes.Eq a, GHC.Internal.Classes.Eq b, GHC.Internal.Classes.Eq c, GHC.Internal.Classes.Eq d, GHC.Internal.Classes.Eq e, GHC.Internal.Classes.Eq f, GHC.Internal.Classes.Eq g, GHC.Internal.Classes.Eq h, GHC.Internal.Classes.Eq i, GHC.Internal.Classes.Eq j, GHC.Internal.Classes.Eq k, GHC.Internal.Classes.Eq l, GHC.Internal.Classes.Eq m) => GHC.Internal.Classes.Eq (a, b, c, d, e, f, g, h, i, j, k, l, m) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c d e f g h i j k l m n. (GHC.Internal.Classes.Eq a, GHC.Internal.Classes.Eq b, GHC.Internal.Classes.Eq c, GHC.Internal.Classes.Eq d, GHC.Internal.Classes.Eq e, GHC.Internal.Classes.Eq f, GHC.Internal.Classes.Eq g, GHC.Internal.Classes.Eq h, GHC.Internal.Classes.Eq i, GHC.Internal.Classes.Eq j, GHC.Internal.Classes.Eq k, GHC.Internal.Classes.Eq l, GHC.Internal.Classes.Eq m, GHC.Internal.Classes.Eq n) => GHC.Internal.Classes.Eq (a, b, c, d, e, f, g, h, i, j, k, l, m, n) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c d e f g h i j k l m n o. (GHC.Internal.Classes.Eq a, GHC.Internal.Classes.Eq b, GHC.Internal.Classes.Eq c, GHC.Internal.Classes.Eq d, GHC.Internal.Classes.Eq e, GHC.Internal.Classes.Eq f, GHC.Internal.Classes.Eq g, GHC.Internal.Classes.Eq h, GHC.Internal.Classes.Eq i, GHC.Internal.Classes.Eq j, GHC.Internal.Classes.Eq k, GHC.Internal.Classes.Eq l, GHC.Internal.Classes.Eq m, GHC.Internal.Classes.Eq n, GHC.Internal.Classes.Eq o) => GHC.Internal.Classes.Eq (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) -- Defined in ‘GHC.Internal.Classes’
instance forall a b. (GHC.Internal.Classes.Eq a, GHC.Internal.Classes.Eq b) => GHC.Internal.Classes.Eq (a, b) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c. (GHC.Internal.Classes.Eq a, GHC.Internal.Classes.Eq b, GHC.Internal.Classes.Eq c) => GHC.Internal.Classes.Eq (a, b, c) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c d. (GHC.Internal.Classes.Eq a, GHC.Internal.Classes.Eq b, GHC.Internal.Classes.Eq c, GHC.Internal.Classes.Eq d) => GHC.Internal.Classes.Eq (a, b, c, d) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c d e. (GHC.Internal.Classes.Eq a, GHC.Internal.Classes.Eq b, GHC.Internal.Classes.Eq c, GHC.Internal.Classes.Eq d, GHC.Internal.Classes.Eq e) => GHC.Internal.Classes.Eq (a, b, c, d, e) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c d e f. (GHC.Internal.Classes.Eq a, GHC.Internal.Classes.Eq b, GHC.Internal.Classes.Eq c, GHC.Internal.Classes.Eq d, GHC.Internal.Classes.Eq e, GHC.Internal.Classes.Eq f) => GHC.Internal.Classes.Eq (a, b, c, d, e, f) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c d e f g. (GHC.Internal.Classes.Eq a, GHC.Internal.Classes.Eq b, GHC.Internal.Classes.Eq c, GHC.Internal.Classes.Eq d, GHC.Internal.Classes.Eq e, GHC.Internal.Classes.Eq f, GHC.Internal.Classes.Eq g) => GHC.Internal.Classes.Eq (a, b, c, d, e, f, g) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c d e f g h. (GHC.Internal.Classes.Eq a, GHC.Internal.Classes.Eq b, GHC.Internal.Classes.Eq c, GHC.Internal.Classes.Eq d, GHC.Internal.Classes.Eq e, GHC.Internal.Classes.Eq f, GHC.Internal.Classes.Eq g, GHC.Internal.Classes.Eq h) => GHC.Internal.Classes.Eq (a, b, c, d, e, f, g, h) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c d e f g h i. (GHC.Internal.Classes.Eq a, GHC.Internal.Classes.Eq b, GHC.Internal.Classes.Eq c, GHC.Internal.Classes.Eq d, GHC.Internal.Classes.Eq e, GHC.Internal.Classes.Eq f, GHC.Internal.Classes.Eq g, GHC.Internal.Classes.Eq h, GHC.Internal.Classes.Eq i) => GHC.Internal.Classes.Eq (a, b, c, d, e, f, g, h, i) -- Defined in ‘GHC.Internal.Classes’
instance GHC.Internal.Classes.Eq GHC.Internal.Types.TyCon -- Defined in ‘GHC.Internal.Classes’
instance GHC.Internal.Classes.Eq () -- Defined in ‘GHC.Internal.Classes’
instance GHC.Internal.Classes.Eq GHC.Internal.Types.Word -- Defined in ‘GHC.Internal.Classes’
instance GHC.Internal.Classes.Ord GHC.Internal.Types.Bool -- Defined in ‘GHC.Internal.Classes’
instance GHC.Internal.Classes.Ord GHC.Internal.Types.Char -- Defined in ‘GHC.Internal.Classes’
instance GHC.Internal.Classes.Ord GHC.Internal.Types.Double -- Defined in ‘GHC.Internal.Classes’
instance GHC.Internal.Classes.Ord GHC.Internal.Types.Float -- Defined in ‘GHC.Internal.Classes’
instance GHC.Internal.Classes.Ord GHC.Internal.Types.Int -- Defined in ‘GHC.Internal.Classes’
instance forall a. GHC.Internal.Classes.Ord a => GHC.Internal.Classes.Ord [a] -- Defined in ‘GHC.Internal.Classes’
instance GHC.Internal.Classes.Ord GHC.Internal.Types.Ordering -- Defined in ‘GHC.Internal.Classes’
instance forall a. GHC.Internal.Classes.Ord a => GHC.Internal.Classes.Ord (Solo a) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c d e f g h i j. (GHC.Internal.Classes.Ord a, GHC.Internal.Classes.Ord b, GHC.Internal.Classes.Ord c, GHC.Internal.Classes.Ord d, GHC.Internal.Classes.Ord e, GHC.Internal.Classes.Ord f, GHC.Internal.Classes.Ord g, GHC.Internal.Classes.Ord h, GHC.Internal.Classes.Ord i, GHC.Internal.Classes.Ord j) => GHC.Internal.Classes.Ord (a, b, c, d, e, f, g, h, i, j) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c d e f g h i j k. (GHC.Internal.Classes.Ord a, GHC.Internal.Classes.Ord b, GHC.Internal.Classes.Ord c, GHC.Internal.Classes.Ord d, GHC.Internal.Classes.Ord e, GHC.Internal.Classes.Ord f, GHC.Internal.Classes.Ord g, GHC.Internal.Classes.Ord h, GHC.Internal.Classes.Ord i, GHC.Internal.Classes.Ord j, GHC.Internal.Classes.Ord k) => GHC.Internal.Classes.Ord (a, b, c, d, e, f, g, h, i, j, k) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c d e f g h i j k l. (GHC.Internal.Classes.Ord a, GHC.Internal.Classes.Ord b, GHC.Internal.Classes.Ord c, GHC.Internal.Classes.Ord d, GHC.Internal.Classes.Ord e, GHC.Internal.Classes.Ord f, GHC.Internal.Classes.Ord g, GHC.Internal.Classes.Ord h, GHC.Internal.Classes.Ord i, GHC.Internal.Classes.Ord j, GHC.Internal.Classes.Ord k, GHC.Internal.Classes.Ord l) => GHC.Internal.Classes.Ord (a, b, c, d, e, f, g, h, i, j, k, l) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c d e f g h i j k l m. (GHC.Internal.Classes.Ord a, GHC.Internal.Classes.Ord b, GHC.Internal.Classes.Ord c, GHC.Internal.Classes.Ord d, GHC.Internal.Classes.Ord e, GHC.Internal.Classes.Ord f, GHC.Internal.Classes.Ord g, GHC.Internal.Classes.Ord h, GHC.Internal.Classes.Ord i, GHC.Internal.Classes.Ord j, GHC.Internal.Classes.Ord k, GHC.Internal.Classes.Ord l, GHC.Internal.Classes.Ord m) => GHC.Internal.Classes.Ord (a, b, c, d, e, f, g, h, i, j, k, l, m) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c d e f g h i j k l m n. (GHC.Internal.Classes.Ord a, GHC.Internal.Classes.Ord b, GHC.Internal.Classes.Ord c, GHC.Internal.Classes.Ord d, GHC.Internal.Classes.Ord e, GHC.Internal.Classes.Ord f, GHC.Internal.Classes.Ord g, GHC.Internal.Classes.Ord h, GHC.Internal.Classes.Ord i, GHC.Internal.Classes.Ord j, GHC.Internal.Classes.Ord k, GHC.Internal.Classes.Ord l, GHC.Internal.Classes.Ord m, GHC.Internal.Classes.Ord n) => GHC.Internal.Classes.Ord (a, b, c, d, e, f, g, h, i, j, k, l, m, n) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c d e f g h i j k l m n o. (GHC.Internal.Classes.Ord a, GHC.Internal.Classes.Ord b, GHC.Internal.Classes.Ord c, GHC.Internal.Classes.Ord d, GHC.Internal.Classes.Ord e, GHC.Internal.Classes.Ord f, GHC.Internal.Classes.Ord g, GHC.Internal.Classes.Ord h, GHC.Internal.Classes.Ord i, GHC.Internal.Classes.Ord j, GHC.Internal.Classes.Ord k, GHC.Internal.Classes.Ord l, GHC.Internal.Classes.Ord m, GHC.Internal.Classes.Ord n, GHC.Internal.Classes.Ord o) => GHC.Internal.Classes.Ord (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) -- Defined in ‘GHC.Internal.Classes’
instance forall a b. (GHC.Internal.Classes.Ord a, GHC.Internal.Classes.Ord b) => GHC.Internal.Classes.Ord (a, b) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c. (GHC.Internal.Classes.Ord a, GHC.Internal.Classes.Ord b, GHC.Internal.Classes.Ord c) => GHC.Internal.Classes.Ord (a, b, c) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c d. (GHC.Internal.Classes.Ord a, GHC.Internal.Classes.Ord b, GHC.Internal.Classes.Ord c, GHC.Internal.Classes.Ord d) => GHC.Internal.Classes.Ord (a, b, c, d) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c d e. (GHC.Internal.Classes.Ord a, GHC.Internal.Classes.Ord b, GHC.Internal.Classes.Ord c, GHC.Internal.Classes.Ord d, GHC.Internal.Classes.Ord e) => GHC.Internal.Classes.Ord (a, b, c, d, e) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c d e f. (GHC.Internal.Classes.Ord a, GHC.Internal.Classes.Ord b, GHC.Internal.Classes.Ord c, GHC.Internal.Classes.Ord d, GHC.Internal.Classes.Ord e, GHC.Internal.Classes.Ord f) => GHC.Internal.Classes.Ord (a, b, c, d, e, f) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c d e f g. (GHC.Internal.Classes.Ord a, GHC.Internal.Classes.Ord b, GHC.Internal.Classes.Ord c, GHC.Internal.Classes.Ord d, GHC.Internal.Classes.Ord e, GHC.Internal.Classes.Ord f, GHC.Internal.Classes.Ord g) => GHC.Internal.Classes.Ord (a, b, c, d, e, f, g) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c d e f g h. (GHC.Internal.Classes.Ord a, GHC.Internal.Classes.Ord b, GHC.Internal.Classes.Ord c, GHC.Internal.Classes.Ord d, GHC.Internal.Classes.Ord e, GHC.Internal.Classes.Ord f, GHC.Internal.Classes.Ord g, GHC.Internal.Classes.Ord h) => GHC.Internal.Classes.Ord (a, b, c, d, e, f, g, h) -- Defined in ‘GHC.Internal.Classes’
instance forall a b c d e f g h i. (GHC.Internal.Classes.Ord a, GHC.Internal.Classes.Ord b, GHC.Internal.Classes.Ord c, GHC.Internal.Classes.Ord d, GHC.Internal.Classes.Ord e, GHC.Internal.Classes.Ord f, GHC.Internal.Classes.Ord g, GHC.Internal.Classes.Ord h, GHC.Internal.Classes.Ord i) => GHC.Internal.Classes.Ord (a, b, c, d, e, f, g, h, i) -- Defined in ‘GHC.Internal.Classes’
instance GHC.Internal.Classes.Ord GHC.Internal.Types.TyCon -- Defined in ‘GHC.Internal.Classes’
instance GHC.Internal.Classes.Ord () -- Defined in ‘GHC.Internal.Classes’
instance GHC.Internal.Classes.Ord GHC.Internal.Types.Word -- Defined in ‘GHC.Internal.Classes’
