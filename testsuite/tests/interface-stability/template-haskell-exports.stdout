
module Language.Haskell.TH where
  -- Safety: Safe
  type AnnLookup :: *
  data AnnLookup = AnnLookupModule GHC.Internal.TH.Syntax.Module | AnnLookupName Name
  type AnnTarget :: *
  data AnnTarget = ModuleAnnotation | TypeAnnotation Name | ValueAnnotation Name
  type Arity :: *
  type Arity = GHC.Internal.Types.Int
  type Bang :: *
  data Bang = Bang SourceUnpackedness SourceStrictness
  type BangQ :: *
  type BangQ = Q Bang
  type BangType :: *
  type BangType = (Bang, Type)
  type BangTypeQ :: *
  type BangTypeQ = Q BangType
  type BndrVis :: *
  data BndrVis = BndrReq | BndrInvis
  type Body :: *
  data Body = GuardedB [(Guard, Exp)] | NormalB Exp
  type BodyQ :: *
  type BodyQ = Q Body
  type Callconv :: *
  data Callconv = CCall | StdCall | CApi | Prim | JavaScript
  type Clause :: *
  data Clause = Clause [Pat] Body [Dec]
  type ClauseQ :: *
  type ClauseQ = Q Clause
  type role Code representational nominal
  type Code :: (* -> *) -> forall (r :: GHC.Internal.Types.RuntimeRep). TYPE r -> *
  newtype Code m a = Code {examineCode :: m (TExp a)}
  type CodeQ :: forall (r :: GHC.Internal.Types.RuntimeRep). TYPE r -> *
  type CodeQ = Code Q
  type Con :: *
  data Con = NormalC Name [BangType] | RecC Name [VarBangType] | InfixC BangType Name BangType | ForallC [TyVarBndr Specificity] Cxt Con | GadtC [Name] [BangType] Type | RecGadtC [Name] [VarBangType] Type
  type ConQ :: *
  type ConQ = Q Con
  type Cxt :: *
  type Cxt = [Pred]
  type CxtQ :: *
  type CxtQ = Q Cxt
  type Dec :: *
  data Dec
    = FunD Name [Clause]
    | ValD Pat Body [Dec]
    | DataD Cxt Name [TyVarBndr BndrVis] (GHC.Internal.Maybe.Maybe Kind) [Con] [DerivClause]
    | NewtypeD Cxt Name [TyVarBndr BndrVis] (GHC.Internal.Maybe.Maybe Kind) Con [DerivClause]
    | TypeDataD Name [TyVarBndr BndrVis] (GHC.Internal.Maybe.Maybe Kind) [Con]
    | TySynD Name [TyVarBndr BndrVis] Type
    | ClassD Cxt Name [TyVarBndr BndrVis] [FunDep] [Dec]
    | InstanceD (GHC.Internal.Maybe.Maybe Overlap) Cxt Type [Dec]
    | SigD Name Type
    | KiSigD Name Kind
    | ForeignD Foreign
    | InfixD Fixity NamespaceSpecifier Name
    | DefaultD [Type]
    | PragmaD Pragma
    | DataFamilyD Name [TyVarBndr BndrVis] (GHC.Internal.Maybe.Maybe Kind)
    | DataInstD Cxt (GHC.Internal.Maybe.Maybe [TyVarBndr ()]) Type (GHC.Internal.Maybe.Maybe Kind) [Con] [DerivClause]
    | NewtypeInstD Cxt (GHC.Internal.Maybe.Maybe [TyVarBndr ()]) Type (GHC.Internal.Maybe.Maybe Kind) Con [DerivClause]
    | TySynInstD TySynEqn
    | OpenTypeFamilyD TypeFamilyHead
    | ClosedTypeFamilyD TypeFamilyHead [TySynEqn]
    | RoleAnnotD Name [Role]
    | StandaloneDerivD (GHC.Internal.Maybe.Maybe DerivStrategy) Cxt Type
    | DefaultSigD Name Type
    | PatSynD Name PatSynArgs PatSynDir Pat
    | PatSynSigD Name PatSynType
    | ImplicitParamBindD GHC.Internal.Base.String Exp
  type DecQ :: *
  type DecQ = Q Dec
  type DecidedStrictness :: *
  data DecidedStrictness = DecidedLazy | DecidedStrict | DecidedUnpack
  type DecsQ :: *
  type DecsQ = Q [Dec]
  type DefaultBndrFlag :: * -> Constraint
  class DefaultBndrFlag flag where
    defaultBndrFlag :: flag
    {-# MINIMAL defaultBndrFlag #-}
  type DerivClause :: *
  data DerivClause = DerivClause (GHC.Internal.Maybe.Maybe DerivStrategy) Cxt
  type DerivClauseQ :: *
  type DerivClauseQ = Q DerivClause
  type DerivStrategy :: *
  data DerivStrategy = StockStrategy | AnyclassStrategy | NewtypeStrategy | ViaStrategy Type
  type DerivStrategyQ :: *
  type DerivStrategyQ = Q DerivStrategy
  type DocLoc :: *
  data DocLoc = ModuleDoc | DeclDoc Name | ArgDoc Name GHC.Internal.Types.Int | InstDoc Type
  type Exp :: *
  data Exp
    = VarE Name
    | ConE Name
    | LitE Lit
    | AppE Exp Exp
    | AppTypeE Exp Type
    | InfixE (GHC.Internal.Maybe.Maybe Exp) Exp (GHC.Internal.Maybe.Maybe Exp)
    | UInfixE Exp Exp Exp
    | ParensE Exp
    | LamE [Pat] Exp
    | LamCaseE [Match]
    | LamCasesE [Clause]
    | TupE [GHC.Internal.Maybe.Maybe Exp]
    | UnboxedTupE [GHC.Internal.Maybe.Maybe Exp]
    | UnboxedSumE Exp SumAlt SumArity
    | CondE Exp Exp Exp
    | MultiIfE [(Guard, Exp)]
    | LetE [Dec] Exp
    | CaseE Exp [Match]
    | DoE (GHC.Internal.Maybe.Maybe GHC.Internal.TH.Syntax.ModName) [Stmt]
    | MDoE (GHC.Internal.Maybe.Maybe GHC.Internal.TH.Syntax.ModName) [Stmt]
    | CompE [Stmt]
    | ArithSeqE Range
    | ListE [Exp]
    | SigE Exp Type
    | RecConE Name [FieldExp]
    | RecUpdE Exp [FieldExp]
    | StaticE Exp
    | UnboundVarE Name
    | LabelE GHC.Internal.Base.String
    | ImplicitParamVarE GHC.Internal.Base.String
    | GetFieldE Exp GHC.Internal.Base.String
    | ProjectionE (GHC.Internal.Base.NonEmpty GHC.Internal.Base.String)
    | TypedBracketE Exp
    | TypedSpliceE Exp
    | TypeE Type
    | ForallE [TyVarBndr Specificity] Exp
    | ForallVisE [TyVarBndr ()] Exp
    | ConstrainedE [Exp] Exp
  type ExpQ :: *
  type ExpQ = Q Exp
  type Extension :: *
  data Extension
    = Cpp
    | OverlappingInstances
    | UndecidableInstances
    | IncoherentInstances
    | UndecidableSuperClasses
    | MonomorphismRestriction
    | MonoLocalBinds
    | DeepSubsumption
    | RelaxedPolyRec
    | ExtendedDefaultRules
    | NamedDefaults
    | ForeignFunctionInterface
    | UnliftedFFITypes
    | InterruptibleFFI
    | CApiFFI
    | GHCForeignImportPrim
    | JavaScriptFFI
    | ParallelArrays
    | Arrows
    | TemplateHaskell
    | TemplateHaskellQuotes
    | QualifiedDo
    | QuasiQuotes
    | ImplicitParams
    | ImplicitPrelude
    | ScopedTypeVariables
    | AllowAmbiguousTypes
    | UnboxedTuples
    | UnboxedSums
    | UnliftedNewtypes
    | UnliftedDatatypes
    | BangPatterns
    | TypeFamilies
    | TypeFamilyDependencies
    | TypeInType
    | OverloadedStrings
    | OverloadedLists
    | NumDecimals
    | DisambiguateRecordFields
    | RecordWildCards
    | NamedFieldPuns
    | ViewPatterns
    | OrPatterns
    | GADTs
    | GADTSyntax
    | NPlusKPatterns
    | DoAndIfThenElse
    | BlockArguments
    | RebindableSyntax
    | ConstraintKinds
    | PolyKinds
    | DataKinds
    | TypeData
    | InstanceSigs
    | ApplicativeDo
    | LinearTypes
    | RequiredTypeArguments
    | StandaloneDeriving
    | DeriveDataTypeable
    | AutoDeriveTypeable
    | DeriveFunctor
    | DeriveTraversable
    | DeriveFoldable
    | DeriveGeneric
    | DefaultSignatures
    | DeriveAnyClass
    | DeriveLift
    | DerivingStrategies
    | DerivingVia
    | TypeSynonymInstances
    | FlexibleContexts
    | FlexibleInstances
    | ConstrainedClassMethods
    | MultiParamTypeClasses
    | NullaryTypeClasses
    | FunctionalDependencies
    | UnicodeSyntax
    | ExistentialQuantification
    | MagicHash
    | EmptyDataDecls
    | KindSignatures
    | RoleAnnotations
    | ParallelListComp
    | TransformListComp
    | MonadComprehensions
    | GeneralizedNewtypeDeriving
    | RecursiveDo
    | PostfixOperators
    | TupleSections
    | PatternGuards
    | LiberalTypeSynonyms
    | RankNTypes
    | ImpredicativeTypes
    | TypeOperators
    | ExplicitNamespaces
    | PackageImports
    | ExplicitForAll
    | AlternativeLayoutRule
    | AlternativeLayoutRuleTransitional
    | DatatypeContexts
    | NondecreasingIndentation
    | RelaxedLayout
    | TraditionalRecordSyntax
    | LambdaCase
    | MultiWayIf
    | BinaryLiterals
    | NegativeLiterals
    | HexFloatLiterals
    | DuplicateRecordFields
    | OverloadedLabels
    | EmptyCase
    | PatternSynonyms
    | PartialTypeSignatures
    | NamedWildCards
    | StaticPointers
    | TypeApplications
    | Strict
    | StrictData
    | EmptyDataDeriving
    | NumericUnderscores
    | QuantifiedConstraints
    | StarIsType
    | ImportQualifiedPost
    | CUSKs
    | StandaloneKindSignatures
    | LexicalNegation
    | FieldSelectors
    | OverloadedRecordDot
    | OverloadedRecordUpdate
    | TypeAbstractions
    | ExtendedLiterals
    | ListTuplePuns
    | MultilineStrings
  type FamilyResultSig :: *
  data FamilyResultSig = NoSig | KindSig Kind | TyVarSig (TyVarBndr ())
  type FamilyResultSigQ :: *
  type FamilyResultSigQ = Q FamilyResultSig
  type FieldExp :: *
  type FieldExp = (Name, Exp)
  type FieldExpQ :: *
  type FieldExpQ = Q FieldExp
  type FieldPat :: *
  type FieldPat = (Name, Pat)
  type FieldPatQ :: *
  type FieldPatQ = Q FieldPat
  type Fixity :: *
  data Fixity = Fixity GHC.Internal.Types.Int FixityDirection
  type FixityDirection :: *
  data FixityDirection = InfixL | InfixR | InfixN
  type Foreign :: *
  data Foreign = ImportF Callconv Safety GHC.Internal.Base.String Name Type | ExportF Callconv GHC.Internal.Base.String Name Type
  type FunDep :: *
  data FunDep = FunDep [Name] [Name]
  type Guard :: *
  data Guard = NormalG Exp | PatG [Stmt]
  type GuardQ :: *
  type GuardQ = Q Guard
  type Info :: *
  data Info = ClassI Dec [InstanceDec] | ClassOpI Name Type ParentName | TyConI Dec | FamilyI Dec [InstanceDec] | PrimTyConI Name Arity Unlifted | DataConI Name Type ParentName | PatSynI Name PatSynType | VarI Name Type (GHC.Internal.Maybe.Maybe Dec) | TyVarI Name Type
  type InfoQ :: *
  type InfoQ = Q Info
  type InjectivityAnn :: *
  data InjectivityAnn = InjectivityAnn Name [Name]
  type Inline :: *
  data Inline = NoInline | Inline | Inlinable
  type InstanceDec :: *
  type InstanceDec = Dec
  type Kind :: *
  type Kind = Type
  type KindQ :: *
  type KindQ = Q Kind
  type Lit :: *
  data Lit = CharL GHC.Internal.Types.Char | StringL GHC.Internal.Base.String | IntegerL GHC.Internal.Bignum.Integer.Integer | RationalL GHC.Internal.Real.Rational | IntPrimL GHC.Internal.Bignum.Integer.Integer | WordPrimL GHC.Internal.Bignum.Integer.Integer | FloatPrimL GHC.Internal.Real.Rational | DoublePrimL GHC.Internal.Real.Rational | StringPrimL [GHC.Internal.Word.Word8] | BytesPrimL GHC.Internal.TH.Syntax.Bytes | CharPrimL GHC.Internal.Types.Char
  type Loc :: *
  data Loc = Loc {loc_filename :: GHC.Internal.Base.String, loc_package :: GHC.Internal.Base.String, loc_module :: GHC.Internal.Base.String, loc_start :: GHC.Internal.TH.Syntax.CharPos, loc_end :: GHC.Internal.TH.Syntax.CharPos}
  type Match :: *
  data Match = Match Pat Body [Dec]
  type MatchQ :: *
  type MatchQ = Q Match
  type ModuleInfo :: *
  data ModuleInfo = ModuleInfo [GHC.Internal.TH.Syntax.Module]
  type Name :: *
  data Name = ...
  type NameSpace :: *
  data NameSpace = ...
  type NamespaceSpecifier :: *
  data NamespaceSpecifier = NoNamespaceSpecifier | TypeNamespaceSpecifier | DataNamespaceSpecifier
  type Overlap :: *
  data Overlap = Overlappable | Overlapping | Overlaps | Incoherent
  type ParentName :: *
  type ParentName = Name
  type Pat :: *
  data Pat = LitP Lit | VarP Name | TupP [Pat] | UnboxedTupP [Pat] | UnboxedSumP Pat SumAlt SumArity | ConP Name [Type] [Pat] | InfixP Pat Name Pat | UInfixP Pat Name Pat | ParensP Pat | TildeP Pat | BangP Pat | AsP Name Pat | WildP | RecP Name [FieldPat] | ListP [Pat] | SigP Pat Type | ViewP Exp Pat | TypeP Type | InvisP Type | OrP (GHC.Internal.Base.NonEmpty Pat)
  type PatQ :: *
  type PatQ = Q Pat
  type PatSynArgs :: *
  data PatSynArgs = PrefixPatSyn [Name] | InfixPatSyn Name Name | RecordPatSyn [Name]
  type PatSynArgsQ :: *
  type PatSynArgsQ = Q PatSynArgs
  type PatSynDir :: *
  data PatSynDir = Unidir | ImplBidir | ExplBidir [Clause]
  type PatSynDirQ :: *
  type PatSynDirQ = Q PatSynDir
  type PatSynType :: *
  type PatSynType = Type
  type Phases :: *
  data Phases = AllPhases | FromPhase GHC.Internal.Types.Int | BeforePhase GHC.Internal.Types.Int
  type Ppr :: * -> Constraint
  class Ppr a where
    ppr :: a -> GHC.Boot.TH.PprLib.Doc
    ppr_list :: [a] -> GHC.Boot.TH.PprLib.Doc
    {-# MINIMAL ppr #-}
  type Pragma :: *
  data Pragma = InlineP Name Inline RuleMatch Phases | OpaqueP Name | SpecialiseP Name Type (GHC.Internal.Maybe.Maybe Inline) Phases | SpecialiseEP (GHC.Internal.Maybe.Maybe [TyVarBndr ()]) [RuleBndr] Exp (GHC.Internal.Maybe.Maybe Inline) Phases | SpecialiseInstP Type | RuleP GHC.Internal.Base.String (GHC.Internal.Maybe.Maybe [TyVarBndr ()]) [RuleBndr] Exp Exp Phases | AnnP AnnTarget Exp | LineP GHC.Internal.Types.Int GHC.Internal.Base.String | CompleteP [Name] (GHC.Internal.Maybe.Maybe Name) | SCCP Name (GHC.Internal.Maybe.Maybe GHC.Internal.Base.String)
  type Pred :: *
  type Pred = Type
  type PredQ :: *
  type PredQ = Q Pred
  type role Q nominal
  type Q :: * -> *
  newtype Q a = ...
  type Quote :: (* -> *) -> Constraint
  class GHC.Internal.Base.Monad m => Quote m where
    newName :: GHC.Internal.Base.String -> m Name
    {-# MINIMAL newName #-}
  type Range :: *
  data Range = FromR Exp | FromThenR Exp Exp | FromToR Exp Exp | FromThenToR Exp Exp Exp
  type RangeQ :: *
  type RangeQ = Q Range
  type Role :: *
  data Role = NominalR | RepresentationalR | PhantomR | InferR
  type RuleBndr :: *
  data RuleBndr = RuleVar Name | TypedRuleVar Name Type
  type RuleBndrQ :: *
  type RuleBndrQ = Q RuleBndr
  type RuleMatch :: *
  data RuleMatch = ConLike | FunLike
  type Safety :: *
  data Safety = Unsafe | Safe | Interruptible
  type SourceStrictness :: *
  data SourceStrictness = NoSourceStrictness | SourceLazy | SourceStrict
  type SourceStrictnessQ :: *
  type SourceStrictnessQ = Q SourceStrictness
  type SourceUnpackedness :: *
  data SourceUnpackedness = NoSourceUnpackedness | SourceNoUnpack | SourceUnpack
  type SourceUnpackednessQ :: *
  type SourceUnpackednessQ = Q SourceUnpackedness
  type Specificity :: *
  data Specificity = SpecifiedSpec | InferredSpec
  type Stmt :: *
  data Stmt = BindS Pat Exp | LetS [Dec] | NoBindS Exp | ParS [[Stmt]] | RecS [Stmt]
  type StmtQ :: *
  type StmtQ = Q Stmt
  type Strict :: *
  type Strict = Bang
  type StrictTypeQ :: *
  type StrictTypeQ = Q GHC.Internal.TH.Syntax.StrictType
  type SumAlt :: *
  type SumAlt = GHC.Internal.Types.Int
  type SumArity :: *
  type SumArity = GHC.Internal.Types.Int
  type role TExp nominal
  type TExp :: forall (r :: GHC.Internal.Types.RuntimeRep). TYPE r -> *
  newtype TExp a = GHC.Internal.TH.Syntax.TExp {unType :: Exp}
  type TExpQ :: forall (r :: GHC.Internal.Types.RuntimeRep). TYPE r -> *
  type TExpQ a = Q (TExp a)
  type TyLit :: *
  data TyLit = NumTyLit GHC.Internal.Bignum.Integer.Integer | StrTyLit GHC.Internal.Base.String | CharTyLit GHC.Internal.Types.Char
  type TyLitQ :: *
  type TyLitQ = Q TyLit
  type TySynEqn :: *
  data TySynEqn = TySynEqn (GHC.Internal.Maybe.Maybe [TyVarBndr ()]) Type Type
  type TySynEqnQ :: *
  type TySynEqnQ = Q TySynEqn
  type TyVarBndr :: * -> *
  data TyVarBndr flag = PlainTV Name flag | KindedTV Name flag Kind
  type TyVarBndrSpec :: *
  type TyVarBndrSpec = TyVarBndr Specificity
  type TyVarBndrUnit :: *
  type TyVarBndrUnit = TyVarBndr ()
  type TyVarBndrVis :: *
  type TyVarBndrVis = TyVarBndr BndrVis
  type Type :: *
  data Type = ForallT [TyVarBndr Specificity] Cxt Type | ForallVisT [TyVarBndr ()] Type | AppT Type Type | AppKindT Type Kind | SigT Type Kind | VarT Name | ConT Name | PromotedT Name | InfixT Type Name Type | UInfixT Type Name Type | PromotedInfixT Type Name Type | PromotedUInfixT Type Name Type | ParensT Type | TupleT GHC.Internal.Types.Int | UnboxedTupleT GHC.Internal.Types.Int | UnboxedSumT SumArity | ArrowT | MulArrowT | EqualityT | ListT | PromotedTupleT GHC.Internal.Types.Int | PromotedNilT | PromotedConsT | StarT | ConstraintT | LitT TyLit | WildCardT | ImplicitParamT GHC.Internal.Base.String Type
  type TypeFamilyHead :: *
  data TypeFamilyHead = TypeFamilyHead Name [TyVarBndr BndrVis] FamilyResultSig (GHC.Internal.Maybe.Maybe InjectivityAnn)
  type TypeQ :: *
  type TypeQ = Q Type
  type Unlifted :: *
  type Unlifted = GHC.Internal.Types.Bool
  type VarBangType :: *
  type VarBangType = (Name, Bang, Type)
  type VarBangTypeQ :: *
  type VarBangTypeQ = Q VarBangType
  type VarStrictTypeQ :: *
  type VarStrictTypeQ = Q GHC.Internal.TH.Syntax.VarStrictType
  anyclassStrategy :: forall (m :: * -> *). Quote m => m DerivStrategy
  appE :: forall (m :: * -> *). Quote m => m Exp -> m Exp -> m Exp
  appK :: Kind -> Kind -> Kind
  appKindT :: forall (m :: * -> *). Quote m => m Type -> m Kind -> m Type
  appT :: forall (m :: * -> *). Quote m => m Type -> m Type -> m Type
  appTypeE :: forall (m :: * -> *). Quote m => m Exp -> m Type -> m Exp
  appsE :: forall (m :: * -> *). Quote m => [m Exp] -> m Exp
  arithSeqE :: forall (m :: * -> *). Quote m => m Range -> m Exp
  arrowK :: Kind
  arrowT :: forall (m :: * -> *). Quote m => m Type
  asP :: forall (m :: * -> *). Quote m => Name -> m Pat -> m Pat
  bang :: forall (m :: * -> *). Quote m => m SourceUnpackedness -> m SourceStrictness -> m Bang
  bangP :: forall (m :: * -> *). Quote m => m Pat -> m Pat
  bangType :: forall (m :: * -> *). Quote m => m Bang -> m Type -> m BangType
  bindCode :: forall (m :: * -> *) a (r :: GHC.Internal.Types.RuntimeRep) (b :: TYPE r). GHC.Internal.Base.Monad m => m a -> (a -> Code m b) -> Code m b
  bindCode_ :: forall (m :: * -> *) a (r :: GHC.Internal.Types.RuntimeRep) (b :: TYPE r). GHC.Internal.Base.Monad m => m a -> Code m b -> Code m b
  bindS :: forall (m :: * -> *). Quote m => m Pat -> m Exp -> m Stmt
  bndrInvis :: BndrVis
  bndrReq :: BndrVis
  bytesPrimL :: GHC.Internal.TH.Syntax.Bytes -> Lit
  cApi :: Callconv
  cCall :: Callconv
  caseE :: forall (m :: * -> *). Quote m => m Exp -> [m Match] -> m Exp
  charL :: GHC.Internal.Types.Char -> Lit
  charPrimL :: GHC.Internal.Types.Char -> Lit
  charTyLit :: forall (m :: * -> *). Quote m => GHC.Internal.Types.Char -> m TyLit
  classD :: forall (m :: * -> *). Quote m => m Cxt -> Name -> [TyVarBndr BndrVis] -> [FunDep] -> [m Dec] -> m Dec
  classP :: forall (m :: * -> *). Quote m => Name -> [m Type] -> m Pred
  clause :: forall (m :: * -> *). Quote m => [m Pat] -> m Body -> [m Dec] -> m Clause
  closedTypeFamilyD :: forall (m :: * -> *). Quote m => Name -> [TyVarBndr BndrVis] -> FamilyResultSig -> GHC.Internal.Maybe.Maybe InjectivityAnn -> [m TySynEqn] -> m Dec
  compE :: forall (m :: * -> *). Quote m => [m Stmt] -> m Exp
  conE :: forall (m :: * -> *). Quote m => Name -> m Exp
  conK :: Name -> Kind
  conP :: forall (m :: * -> *). Quote m => Name -> [m Pat] -> m Pat
  conT :: forall (m :: * -> *). Quote m => Name -> m Type
  condE :: forall (m :: * -> *). Quote m => m Exp -> m Exp -> m Exp -> m Exp
  constrainedE :: forall (m :: * -> *). Quote m => [m Exp] -> m Exp -> m Exp
  constraintK :: Kind
  cxt :: forall (m :: * -> *). Quote m => [m Pred] -> m Cxt
  dataD :: forall (m :: * -> *). Quote m => m Cxt -> Name -> [TyVarBndr BndrVis] -> GHC.Internal.Maybe.Maybe Kind -> [m Con] -> [m DerivClause] -> m Dec
  dataD_doc :: Q Cxt -> Name -> [Q (TyVarBndr BndrVis)] -> GHC.Internal.Maybe.Maybe (Q Kind) -> [(Q Con, GHC.Internal.Maybe.Maybe GHC.Internal.Base.String, [GHC.Internal.Maybe.Maybe GHC.Internal.Base.String])] -> [Q DerivClause] -> GHC.Internal.Maybe.Maybe GHC.Internal.Base.String -> Q Dec
  dataFamilyD :: forall (m :: * -> *). Quote m => Name -> [TyVarBndr BndrVis] -> GHC.Internal.Maybe.Maybe Kind -> m Dec
  dataInstD :: forall (m :: * -> *). Quote m => m Cxt -> Name -> [m Type] -> GHC.Internal.Maybe.Maybe Kind -> [m Con] -> [m DerivClause] -> m Dec
  dataInstD_doc :: Q Cxt -> GHC.Internal.Maybe.Maybe [Q (TyVarBndr ())] -> Q Type -> GHC.Internal.Maybe.Maybe (Q Kind) -> [(Q Con, GHC.Internal.Maybe.Maybe GHC.Internal.Base.String, [GHC.Internal.Maybe.Maybe GHC.Internal.Base.String])] -> [Q DerivClause] -> GHC.Internal.Maybe.Maybe GHC.Internal.Base.String -> Q Dec
  defaultD :: forall (m :: * -> *). Quote m => [m Type] -> m Dec
  defaultFixity :: Fixity
  defaultSigD :: forall (m :: * -> *). Quote m => Name -> m Type -> m Dec
  derivClause :: forall (m :: * -> *). Quote m => GHC.Internal.Maybe.Maybe DerivStrategy -> [m Pred] -> m DerivClause
  doE :: forall (m :: * -> *). Quote m => [m Stmt] -> m Exp
  doublePrimL :: GHC.Internal.Real.Rational -> Lit
  dyn :: forall (m :: * -> *). Quote m => GHC.Internal.Base.String -> m Exp
  equalP :: forall (m :: * -> *). Quote m => m Type -> m Type -> m Pred
  equalityT :: forall (m :: * -> *). Quote m => m Type
  explBidir :: forall (m :: * -> *). Quote m => [m Clause] -> m PatSynDir
  extsEnabled :: Q [Extension]
  fieldExp :: forall (m :: * -> *). Quote m => Name -> m Exp -> m (Name, Exp)
  fieldPat :: forall (m :: * -> *). Quote m => Name -> m Pat -> m FieldPat
  floatPrimL :: GHC.Internal.Real.Rational -> Lit
  forImpD :: forall (m :: * -> *). Quote m => Callconv -> Safety -> GHC.Internal.Base.String -> Name -> m Type -> m Dec
  forallC :: forall (m :: * -> *). Quote m => [TyVarBndr Specificity] -> m Cxt -> m Con -> m Con
  forallE :: forall (m :: * -> *). Quote m => [m (TyVarBndr Specificity)] -> m Exp -> m Exp
  forallT :: forall (m :: * -> *). Quote m => [TyVarBndr Specificity] -> m Cxt -> m Type -> m Type
  forallVisE :: forall (m :: * -> *). Quote m => [m (TyVarBndr ())] -> m Exp -> m Exp
  forallVisT :: forall (m :: * -> *). Quote m => [m (TyVarBndr ())] -> m Type -> m Type
  fromE :: forall (m :: * -> *). Quote m => m Exp -> m Exp
  fromR :: forall (m :: * -> *). Quote m => m Exp -> m Range
  fromThenE :: forall (m :: * -> *). Quote m => m Exp -> m Exp -> m Exp
  fromThenR :: forall (m :: * -> *). Quote m => m Exp -> m Exp -> m Range
  fromThenToE :: forall (m :: * -> *). Quote m => m Exp -> m Exp -> m Exp -> m Exp
  fromThenToR :: forall (m :: * -> *). Quote m => m Exp -> m Exp -> m Exp -> m Range
  fromToE :: forall (m :: * -> *). Quote m => m Exp -> m Exp -> m Exp
  fromToR :: forall (m :: * -> *). Quote m => m Exp -> m Exp -> m Range
  funD :: forall (m :: * -> *). Quote m => Name -> [m Clause] -> m Dec
  funD_doc :: Name -> [Q Clause] -> GHC.Internal.Maybe.Maybe GHC.Internal.Base.String -> [GHC.Internal.Maybe.Maybe GHC.Internal.Base.String] -> Q Dec
  funDep :: [Name] -> [Name] -> FunDep
  gadtC :: forall (m :: * -> *). Quote m => [Name] -> [m GHC.Internal.TH.Syntax.StrictType] -> m Type -> m Con
  getDoc :: DocLoc -> Q (GHC.Internal.Maybe.Maybe GHC.Internal.Base.String)
  getFieldE :: forall (m :: * -> *). Quote m => m Exp -> GHC.Internal.Base.String -> m Exp
  guardedB :: forall (m :: * -> *). Quote m => [m (Guard, Exp)] -> m Body
  hoistCode :: forall (m :: * -> *) (n :: * -> *) (r :: GHC.Internal.Types.RuntimeRep) (a :: TYPE r). GHC.Internal.Base.Monad m => (forall x. m x -> n x) -> Code m a -> Code n a
  implBidir :: forall (m :: * -> *). Quote m => m PatSynDir
  implicitParamBindD :: forall (m :: * -> *). Quote m => GHC.Internal.Base.String -> m Exp -> m Dec
  implicitParamT :: forall (m :: * -> *). Quote m => GHC.Internal.Base.String -> m Type -> m Type
  implicitParamVarE :: forall (m :: * -> *). Quote m => GHC.Internal.Base.String -> m Exp
  inferR :: GHC.Internal.TH.Lib.Role
  inferredSpec :: Specificity
  infixApp :: forall (m :: * -> *). Quote m => m Exp -> m Exp -> m Exp -> m Exp
  infixC :: forall (m :: * -> *). Quote m => m (Bang, Type) -> Name -> m (Bang, Type) -> m Con
  infixE :: forall (m :: * -> *). Quote m => GHC.Internal.Maybe.Maybe (m Exp) -> m Exp -> GHC.Internal.Maybe.Maybe (m Exp) -> m Exp
  infixLD :: forall (m :: * -> *). Quote m => GHC.Internal.Types.Int -> Name -> m Dec
  infixND :: forall (m :: * -> *). Quote m => GHC.Internal.Types.Int -> Name -> m Dec
  infixP :: forall (m :: * -> *). Quote m => m Pat -> Name -> m Pat -> m Pat
  infixPatSyn :: forall (m :: * -> *). Quote m => Name -> Name -> m PatSynArgs
  infixRD :: forall (m :: * -> *). Quote m => GHC.Internal.Types.Int -> Name -> m Dec
  infixT :: forall (m :: * -> *). Quote m => m Type -> Name -> m Type -> m Type
  injectivityAnn :: Name -> [Name] -> GHC.Internal.TH.Lib.InjectivityAnn
  instanceD :: forall (m :: * -> *). Quote m => m Cxt -> m Type -> [m Dec] -> m Dec
  instanceWithOverlapD :: forall (m :: * -> *). Quote m => GHC.Internal.Maybe.Maybe Overlap -> m Cxt -> m Type -> [m Dec] -> m Dec
  intPrimL :: GHC.Internal.Bignum.Integer.Integer -> Lit
  integerL :: GHC.Internal.Bignum.Integer.Integer -> Lit
  interruptible :: Safety
  invisP :: forall (m :: * -> *). Quote m => m Type -> m Pat
  isExtEnabled :: Extension -> Q GHC.Internal.Types.Bool
  isInstance :: Name -> [Type] -> Q GHC.Internal.Types.Bool
  isStrict :: forall (m :: * -> *). Quote m => m Strict
  javaScript :: Callconv
  joinCode :: forall (m :: * -> *) (r :: GHC.Internal.Types.RuntimeRep) (a :: TYPE r). GHC.Internal.Base.Monad m => m (Code m a) -> Code m a
  kiSigD :: forall (m :: * -> *). Quote m => Name -> m Kind -> m Dec
  kindSig :: Kind -> FamilyResultSig
  kindedBndrTV :: forall (m :: * -> *). Quote m => Name -> BndrVis -> m Kind -> m (TyVarBndr BndrVis)
  kindedInvisTV :: forall (m :: * -> *). Quote m => Name -> Specificity -> m Kind -> m (TyVarBndr Specificity)
  kindedTV :: forall flag. DefaultBndrFlag flag => Name -> Kind -> TyVarBndr flag
  labelE :: forall (m :: * -> *). Quote m => GHC.Internal.Base.String -> m Exp
  lam1E :: forall (m :: * -> *). Quote m => m Pat -> m Exp -> m Exp
  lamCaseE :: forall (m :: * -> *). Quote m => [m Match] -> m Exp
  lamCasesE :: forall (m :: * -> *). Quote m => [m Clause] -> m Exp
  lamE :: forall (m :: * -> *). Quote m => [m Pat] -> m Exp -> m Exp
  letE :: forall (m :: * -> *). Quote m => [m Dec] -> m Exp -> m Exp
  letS :: forall (m :: * -> *). Quote m => [m Dec] -> m Stmt
  liftCode :: forall (r :: GHC.Internal.Types.RuntimeRep) (a :: TYPE r) (m :: * -> *). m (TExp a) -> Code m a
  listE :: forall (m :: * -> *). Quote m => [m Exp] -> m Exp
  listK :: Kind
  listP :: forall (m :: * -> *). Quote m => [m Pat] -> m Pat
  listT :: forall (m :: * -> *). Quote m => m Type
  litE :: forall (m :: * -> *). Quote m => Lit -> m Exp
  litP :: forall (m :: * -> *). Quote m => Lit -> m Pat
  litT :: forall (m :: * -> *). Quote m => m TyLit -> m Type
  location :: Q Loc
  lookupTypeName :: GHC.Internal.Base.String -> Q (GHC.Internal.Maybe.Maybe Name)
  lookupValueName :: GHC.Internal.Base.String -> Q (GHC.Internal.Maybe.Maybe Name)
  match :: forall (m :: * -> *). Quote m => m Pat -> m Body -> [m Dec] -> m Match
  maxPrecedence :: GHC.Internal.Types.Int
  mdoE :: forall (m :: * -> *). Quote m => [m Stmt] -> m Exp
  mkBytes :: GHC.Internal.ForeignPtr.ForeignPtr GHC.Internal.Word.Word8 -> GHC.Internal.Types.Word -> GHC.Internal.Types.Word -> GHC.Internal.TH.Syntax.Bytes
  mkName :: GHC.Internal.Base.String -> Name
  moduleAnnotation :: AnnTarget
  mulArrowT :: forall (m :: * -> *). Quote m => m Type
  multiIfE :: forall (m :: * -> *). Quote m => [m (Guard, Exp)] -> m Exp
  nameBase :: Name -> GHC.Internal.Base.String
  nameModule :: Name -> GHC.Internal.Maybe.Maybe GHC.Internal.Base.String
  namePackage :: Name -> GHC.Internal.Maybe.Maybe GHC.Internal.Base.String
  nameSpace :: Name -> GHC.Internal.Maybe.Maybe NameSpace
  newDeclarationGroup :: Q [Dec]
  newtypeD :: forall (m :: * -> *). Quote m => m Cxt -> Name -> [TyVarBndr BndrVis] -> GHC.Internal.Maybe.Maybe Kind -> m Con -> [m DerivClause] -> m Dec
  newtypeD_doc :: Q Cxt -> Name -> [Q (TyVarBndr BndrVis)] -> GHC.Internal.Maybe.Maybe (Q Kind) -> (Q Con, GHC.Internal.Maybe.Maybe GHC.Internal.Base.String, [GHC.Internal.Maybe.Maybe GHC.Internal.Base.String]) -> [Q DerivClause] -> GHC.Internal.Maybe.Maybe GHC.Internal.Base.String -> Q Dec
  newtypeInstD :: forall (m :: * -> *). Quote m => m Cxt -> Name -> [m Type] -> GHC.Internal.Maybe.Maybe Kind -> m Con -> [m DerivClause] -> m Dec
  newtypeInstD_doc :: Q Cxt -> GHC.Internal.Maybe.Maybe [Q (TyVarBndr ())] -> Q Type -> GHC.Internal.Maybe.Maybe (Q Kind) -> (Q Con, GHC.Internal.Maybe.Maybe GHC.Internal.Base.String, [GHC.Internal.Maybe.Maybe GHC.Internal.Base.String]) -> [Q DerivClause] -> GHC.Internal.Maybe.Maybe GHC.Internal.Base.String -> Q Dec
  newtypeStrategy :: forall (m :: * -> *). Quote m => m DerivStrategy
  noBindS :: forall (m :: * -> *). Quote m => m Exp -> m Stmt
  noSig :: FamilyResultSig
  noSourceStrictness :: forall (m :: * -> *). Quote m => m SourceStrictness
  noSourceUnpackedness :: forall (m :: * -> *). Quote m => m SourceUnpackedness
  nominalR :: GHC.Internal.TH.Lib.Role
  normalB :: forall (m :: * -> *). Quote m => m Exp -> m Body
  normalC :: forall (m :: * -> *). Quote m => Name -> [m BangType] -> m Con
  normalG :: forall (m :: * -> *). Quote m => m Exp -> m Guard
  normalGE :: forall (m :: * -> *). Quote m => m Exp -> m Exp -> m (Guard, Exp)
  notStrict :: forall (m :: * -> *). Quote m => m Strict
  numTyLit :: forall (m :: * -> *). Quote m => GHC.Internal.Bignum.Integer.Integer -> m TyLit
  openTypeFamilyD :: forall (m :: * -> *). Quote m => Name -> [TyVarBndr BndrVis] -> FamilyResultSig -> GHC.Internal.Maybe.Maybe InjectivityAnn -> m Dec
  parS :: forall (m :: * -> *). Quote m => [[m Stmt]] -> m Stmt
  parensE :: forall (m :: * -> *). Quote m => m Exp -> m Exp
  parensP :: forall (m :: * -> *). Quote m => m Pat -> m Pat
  parensT :: forall (m :: * -> *). Quote m => m Type -> m Type
  patG :: forall (m :: * -> *). Quote m => [m Stmt] -> m Guard
  patGE :: forall (m :: * -> *). Quote m => [m Stmt] -> m Exp -> m (Guard, Exp)
  patSynD :: forall (m :: * -> *). Quote m => Name -> m PatSynArgs -> m PatSynDir -> m Pat -> m Dec
  patSynD_doc :: Name -> Q PatSynArgs -> Q PatSynDir -> Q Pat -> GHC.Internal.Maybe.Maybe GHC.Internal.Base.String -> [GHC.Internal.Maybe.Maybe GHC.Internal.Base.String] -> Q Dec
  patSynSigD :: forall (m :: * -> *). Quote m => Name -> m Type -> m Dec
  phantomR :: GHC.Internal.TH.Lib.Role
  plainBndrTV :: forall (m :: * -> *). Quote m => Name -> BndrVis -> m (TyVarBndr BndrVis)
  plainInvisTV :: forall (m :: * -> *). Quote m => Name -> Specificity -> m (TyVarBndr Specificity)
  plainTV :: forall flag. DefaultBndrFlag flag => Name -> TyVarBndr flag
  pprExp :: GHC.Boot.TH.Ppr.Precedence -> Exp -> GHC.Boot.TH.PprLib.Doc
  pprLit :: GHC.Boot.TH.Ppr.Precedence -> Lit -> GHC.Boot.TH.PprLib.Doc
  pprParendType :: Type -> GHC.Boot.TH.PprLib.Doc
  pprPat :: GHC.Boot.TH.Ppr.Precedence -> Pat -> GHC.Boot.TH.PprLib.Doc
  pprint :: forall a. Ppr a => a -> GHC.Internal.Base.String
  pragAnnD :: forall (m :: * -> *). Quote m => AnnTarget -> m Exp -> m Dec
  pragCompleteD :: forall (m :: * -> *). Quote m => [Name] -> GHC.Internal.Maybe.Maybe Name -> m Dec
  pragInlD :: forall (m :: * -> *). Quote m => Name -> Inline -> RuleMatch -> Phases -> m Dec
  pragLineD :: forall (m :: * -> *). Quote m => GHC.Internal.Types.Int -> GHC.Internal.Base.String -> m Dec
  pragRuleD :: forall (m :: * -> *). Quote m => GHC.Internal.Base.String -> [m RuleBndr] -> m Exp -> m Exp -> Phases -> m Dec
  pragSpecD :: forall (m :: * -> *). Quote m => Name -> m Type -> Phases -> m Dec
  pragSpecED :: forall (m :: * -> *). Quote m => GHC.Internal.Maybe.Maybe [m (TyVarBndr ())] -> [m RuleBndr] -> m Exp -> Phases -> m Dec
  pragSpecInlD :: forall (m :: * -> *). Quote m => Name -> m Type -> Inline -> Phases -> m Dec
  pragSpecInlED :: forall (m :: * -> *). Quote m => GHC.Internal.Maybe.Maybe [m (TyVarBndr ())] -> [m RuleBndr] -> m Exp -> Inline -> Phases -> m Dec
  pragSpecInstD :: forall (m :: * -> *). Quote m => m Type -> m Dec
  prefixPatSyn :: forall (m :: * -> *). Quote m => [Name] -> m PatSynArgs
  prim :: Callconv
  projectionE :: forall (m :: * -> *). Quote m => GHC.Internal.Base.NonEmpty GHC.Internal.Base.String -> m Exp
  promotedConsT :: forall (m :: * -> *). Quote m => m Type
  promotedInfixT :: forall (m :: * -> *). Quote m => m Type -> Name -> m Type -> m Type
  promotedNilT :: forall (m :: * -> *). Quote m => m Type
  promotedT :: forall (m :: * -> *). Quote m => Name -> m Type
  promotedTupleT :: forall (m :: * -> *). Quote m => GHC.Internal.Types.Int -> m Type
  promotedUInfixT :: forall (m :: * -> *). Quote m => m Type -> Name -> m Type -> m Type
  putDoc :: DocLoc -> GHC.Internal.Base.String -> Q ()
  rationalL :: GHC.Internal.Real.Rational -> Lit
  recC :: forall (m :: * -> *). Quote m => Name -> [m VarBangType] -> m Con
  recConE :: forall (m :: * -> *). Quote m => Name -> [m (Name, Exp)] -> m Exp
  recGadtC :: forall (m :: * -> *). Quote m => [Name] -> [m GHC.Internal.TH.Syntax.VarStrictType] -> m Type -> m Con
  recP :: forall (m :: * -> *). Quote m => Name -> [m FieldPat] -> m Pat
  recS :: forall (m :: * -> *). Quote m => [m Stmt] -> m Stmt
  recUpdE :: forall (m :: * -> *). Quote m => m Exp -> [m (Name, Exp)] -> m Exp
  recordPatSyn :: forall (m :: * -> *). Quote m => [Name] -> m PatSynArgs
  recover :: forall a. Q a -> Q a -> Q a
  reify :: Name -> Q Info
  reifyAnnotations :: forall a. GHC.Internal.Data.Data.Data a => AnnLookup -> Q [a]
  reifyConStrictness :: Name -> Q [DecidedStrictness]
  reifyFixity :: Name -> Q (GHC.Internal.Maybe.Maybe Fixity)
  reifyInstances :: Name -> [Type] -> Q [InstanceDec]
  reifyModule :: GHC.Internal.TH.Syntax.Module -> Q ModuleInfo
  reifyRoles :: Name -> Q [Role]
  reifyType :: Name -> Q Type
  report :: GHC.Internal.Types.Bool -> GHC.Internal.Base.String -> Q ()
  reportError :: GHC.Internal.Base.String -> Q ()
  reportWarning :: GHC.Internal.Base.String -> Q ()
  representationalR :: GHC.Internal.TH.Lib.Role
  roleAnnotD :: forall (m :: * -> *). Quote m => Name -> [GHC.Internal.TH.Lib.Role] -> m Dec
  ruleVar :: forall (m :: * -> *). Quote m => Name -> m RuleBndr
  runIO :: forall a. GHC.Internal.Types.IO a -> Q a
  runQ :: forall (m :: * -> *) a. GHC.Internal.TH.Syntax.Quasi m => Q a -> m a
  safe :: Safety
  sectionL :: forall (m :: * -> *). Quote m => m Exp -> m Exp -> m Exp
  sectionR :: forall (m :: * -> *). Quote m => m Exp -> m Exp -> m Exp
  sigD :: forall (m :: * -> *). Quote m => Name -> m Type -> m Dec
  sigE :: forall (m :: * -> *). Quote m => m Exp -> m Type -> m Exp
  sigP :: forall (m :: * -> *). Quote m => m Pat -> m Type -> m Pat
  sigT :: forall (m :: * -> *). Quote m => m Type -> Kind -> m Type
  sourceLazy :: forall (m :: * -> *). Quote m => m SourceStrictness
  sourceNoUnpack :: forall (m :: * -> *). Quote m => m SourceUnpackedness
  sourceStrict :: forall (m :: * -> *). Quote m => m SourceStrictness
  sourceUnpack :: forall (m :: * -> *). Quote m => m SourceUnpackedness
  specifiedSpec :: Specificity
  standaloneDerivD :: forall (m :: * -> *). Quote m => m Cxt -> m Type -> m Dec
  standaloneDerivWithStrategyD :: forall (m :: * -> *). Quote m => GHC.Internal.Maybe.Maybe DerivStrategy -> m Cxt -> m Type -> m Dec
  starK :: Kind
  staticE :: forall (m :: * -> *). Quote m => m Exp -> m Exp
  stdCall :: Callconv
  stockStrategy :: forall (m :: * -> *). Quote m => m DerivStrategy
  strTyLit :: forall (m :: * -> *). Quote m => GHC.Internal.Base.String -> m TyLit
  strictType :: forall (m :: * -> *). Quote m => m Strict -> m Type -> m GHC.Internal.TH.Syntax.StrictType
  stringE :: forall (m :: * -> *). Quote m => GHC.Internal.Base.String -> m Exp
  stringL :: GHC.Internal.Base.String -> Lit
  stringPrimL :: [GHC.Internal.Word.Word8] -> Lit
  thisModule :: Q GHC.Internal.TH.Syntax.Module
  tildeP :: forall (m :: * -> *). Quote m => m Pat -> m Pat
  tupE :: forall (m :: * -> *). Quote m => [m Exp] -> m Exp
  tupP :: forall (m :: * -> *). Quote m => [m Pat] -> m Pat
  tupleDataName :: GHC.Internal.Types.Int -> Name
  tupleK :: GHC.Internal.Types.Int -> Kind
  tupleT :: forall (m :: * -> *). Quote m => GHC.Internal.Types.Int -> m Type
  tupleTypeName :: GHC.Internal.Types.Int -> Name
  tySynD :: forall (m :: * -> *). Quote m => Name -> [TyVarBndr BndrVis] -> m Type -> m Dec
  tySynEqn :: forall (m :: * -> *). Quote m => GHC.Internal.Maybe.Maybe [TyVarBndr ()] -> m Type -> m Type -> m TySynEqn
  tySynInstD :: forall (m :: * -> *). Quote m => m TySynEqn -> m Dec
  tyVarSig :: TyVarBndr () -> FamilyResultSig
  typeAnnotation :: Name -> AnnTarget
  typeDataD :: forall (m :: * -> *). Quote m => Name -> [TyVarBndr BndrVis] -> GHC.Internal.Maybe.Maybe Kind -> [m Con] -> m Dec
  typeDataD_doc :: Name -> [Q (TyVarBndr BndrVis)] -> GHC.Internal.Maybe.Maybe (Q Kind) -> [(Q Con, GHC.Internal.Maybe.Maybe GHC.Internal.Base.String, [GHC.Internal.Maybe.Maybe GHC.Internal.Base.String])] -> GHC.Internal.Maybe.Maybe GHC.Internal.Base.String -> Q Dec
  typeE :: forall (m :: * -> *). Quote m => m Type -> m Exp
  typeP :: forall (m :: * -> *). Quote m => m Type -> m Pat
  typedBracketE :: forall (m :: * -> *). Quote m => m Exp -> m Exp
  typedRuleVar :: forall (m :: * -> *). Quote m => Name -> m Type -> m RuleBndr
  typedSpliceE :: forall (m :: * -> *). Quote m => m Exp -> m Exp
  uInfixE :: forall (m :: * -> *). Quote m => m Exp -> m Exp -> m Exp -> m Exp
  uInfixP :: forall (m :: * -> *). Quote m => m Pat -> Name -> m Pat -> m Pat
  uInfixT :: forall (m :: * -> *). Quote m => m Type -> Name -> m Type -> m Type
  unTypeCode :: forall (r :: GHC.Internal.Types.RuntimeRep) (a :: TYPE r) (m :: * -> *). Quote m => Code m a -> m Exp
  unboundVarE :: forall (m :: * -> *). Quote m => Name -> m Exp
  unboxedSumDataName :: SumAlt -> SumArity -> Name
  unboxedSumE :: forall (m :: * -> *). Quote m => m Exp -> SumAlt -> SumArity -> m Exp
  unboxedSumP :: forall (m :: * -> *). Quote m => m Pat -> SumAlt -> SumArity -> m Pat
  unboxedSumT :: forall (m :: * -> *). Quote m => SumArity -> m Type
  unboxedSumTypeName :: SumArity -> Name
  unboxedTupE :: forall (m :: * -> *). Quote m => [m Exp] -> m Exp
  unboxedTupP :: forall (m :: * -> *). Quote m => [m Pat] -> m Pat
  unboxedTupleDataName :: GHC.Internal.Types.Int -> Name
  unboxedTupleT :: forall (m :: * -> *). Quote m => GHC.Internal.Types.Int -> m Type
  unboxedTupleTypeName :: GHC.Internal.Types.Int -> Name
  unidir :: forall (m :: * -> *). Quote m => m PatSynDir
  unpacked :: forall (m :: * -> *). Quote m => m Strict
  unsafe :: Safety
  unsafeCodeCoerce :: forall (r :: GHC.Internal.Types.RuntimeRep) (a :: TYPE r) (m :: * -> *). Quote m => m Exp -> Code m a
  valD :: forall (m :: * -> *). Quote m => m Pat -> m Body -> [m Dec] -> m Dec
  valueAnnotation :: Name -> AnnTarget
  varBangType :: forall (m :: * -> *). Quote m => Name -> m BangType -> m VarBangType
  varE :: forall (m :: * -> *). Quote m => Name -> m Exp
  varK :: Name -> Kind
  varP :: forall (m :: * -> *). Quote m => Name -> m Pat
  varStrictType :: forall (m :: * -> *). Quote m => Name -> m GHC.Internal.TH.Syntax.StrictType -> m GHC.Internal.TH.Syntax.VarStrictType
  varT :: forall (m :: * -> *). Quote m => Name -> m Type
  viaStrategy :: forall (m :: * -> *). Quote m => m Type -> m DerivStrategy
  viewP :: forall (m :: * -> *). Quote m => m Exp -> m Pat -> m Pat
  wildCardT :: forall (m :: * -> *). Quote m => m Type
  wildP :: forall (m :: * -> *). Quote m => m Pat
  withDecDoc :: GHC.Internal.Base.String -> Q Dec -> Q Dec
  withDecsDoc :: GHC.Internal.Base.String -> Q [Dec] -> Q [Dec]
  wordPrimL :: GHC.Internal.Bignum.Integer.Integer -> Lit

module Language.Haskell.TH.CodeDo where
  -- Safety: Safe-Inferred
  (>>) :: forall (m :: * -> *) a b. GHC.Internal.Base.Monad m => m a -> GHC.Internal.TH.Syntax.Code m b -> GHC.Internal.TH.Syntax.Code m b
  (>>=) :: forall (m :: * -> *) a b. GHC.Internal.Base.Monad m => m a -> (a -> GHC.Internal.TH.Syntax.Code m b) -> GHC.Internal.TH.Syntax.Code m b

module Language.Haskell.TH.LanguageExtensions where
  -- Safety: Safe
  type Extension :: *
  data Extension
    = Cpp
    | OverlappingInstances
    | UndecidableInstances
    | IncoherentInstances
    | UndecidableSuperClasses
    | MonomorphismRestriction
    | MonoLocalBinds
    | DeepSubsumption
    | RelaxedPolyRec
    | ExtendedDefaultRules
    | NamedDefaults
    | ForeignFunctionInterface
    | UnliftedFFITypes
    | InterruptibleFFI
    | CApiFFI
    | GHCForeignImportPrim
    | JavaScriptFFI
    | ParallelArrays
    | Arrows
    | TemplateHaskell
    | TemplateHaskellQuotes
    | QualifiedDo
    | QuasiQuotes
    | ImplicitParams
    | ImplicitPrelude
    | ScopedTypeVariables
    | AllowAmbiguousTypes
    | UnboxedTuples
    | UnboxedSums
    | UnliftedNewtypes
    | UnliftedDatatypes
    | BangPatterns
    | TypeFamilies
    | TypeFamilyDependencies
    | TypeInType
    | OverloadedStrings
    | OverloadedLists
    | NumDecimals
    | DisambiguateRecordFields
    | RecordWildCards
    | NamedFieldPuns
    | ViewPatterns
    | OrPatterns
    | GADTs
    | GADTSyntax
    | NPlusKPatterns
    | DoAndIfThenElse
    | BlockArguments
    | RebindableSyntax
    | ConstraintKinds
    | PolyKinds
    | DataKinds
    | TypeData
    | InstanceSigs
    | ApplicativeDo
    | LinearTypes
    | RequiredTypeArguments
    | StandaloneDeriving
    | DeriveDataTypeable
    | AutoDeriveTypeable
    | DeriveFunctor
    | DeriveTraversable
    | DeriveFoldable
    | DeriveGeneric
    | DefaultSignatures
    | DeriveAnyClass
    | DeriveLift
    | DerivingStrategies
    | DerivingVia
    | TypeSynonymInstances
    | FlexibleContexts
    | FlexibleInstances
    | ConstrainedClassMethods
    | MultiParamTypeClasses
    | NullaryTypeClasses
    | FunctionalDependencies
    | UnicodeSyntax
    | ExistentialQuantification
    | MagicHash
    | EmptyDataDecls
    | KindSignatures
    | RoleAnnotations
    | ParallelListComp
    | TransformListComp
    | MonadComprehensions
    | GeneralizedNewtypeDeriving
    | RecursiveDo
    | PostfixOperators
    | TupleSections
    | PatternGuards
    | LiberalTypeSynonyms
    | RankNTypes
    | ImpredicativeTypes
    | TypeOperators
    | ExplicitNamespaces
    | PackageImports
    | ExplicitForAll
    | AlternativeLayoutRule
    | AlternativeLayoutRuleTransitional
    | DatatypeContexts
    | NondecreasingIndentation
    | RelaxedLayout
    | TraditionalRecordSyntax
    | LambdaCase
    | MultiWayIf
    | BinaryLiterals
    | NegativeLiterals
    | HexFloatLiterals
    | DuplicateRecordFields
    | OverloadedLabels
    | EmptyCase
    | PatternSynonyms
    | PartialTypeSignatures
    | NamedWildCards
    | StaticPointers
    | TypeApplications
    | Strict
    | StrictData
    | EmptyDataDeriving
    | NumericUnderscores
    | QuantifiedConstraints
    | StarIsType
    | ImportQualifiedPost
    | CUSKs
    | StandaloneKindSignatures
    | LexicalNegation
    | FieldSelectors
    | OverloadedRecordDot
    | OverloadedRecordUpdate
    | TypeAbstractions
    | ExtendedLiterals
    | ListTuplePuns
    | MultilineStrings

module Language.Haskell.TH.Lib where
  -- Safety: Safe
  type BangQ :: *
  type BangQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Bang
  type BangTypeQ :: *
  type BangTypeQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.BangType
  type BodyQ :: *
  type BodyQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Body
  type ClauseQ :: *
  type ClauseQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Clause
  type CodeQ :: forall (r :: GHC.Internal.Types.RuntimeRep). TYPE r -> *
  type CodeQ = GHC.Internal.TH.Syntax.Code GHC.Internal.TH.Syntax.Q
  type ConQ :: *
  type ConQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Con
  type CxtQ :: *
  type CxtQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Cxt
  type DecQ :: *
  type DecQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Dec
  type DecsQ :: *
  type DecsQ = GHC.Internal.TH.Syntax.Q [GHC.Internal.TH.Syntax.Dec]
  type DefaultBndrFlag :: * -> Constraint
  class DefaultBndrFlag flag where
    defaultBndrFlag :: flag
    {-# MINIMAL defaultBndrFlag #-}
  type DerivClause :: *
  data DerivClause = DerivClause (GHC.Internal.Maybe.Maybe DerivStrategy) GHC.Internal.TH.Syntax.Cxt
  type DerivClauseQ :: *
  type DerivClauseQ = GHC.Internal.TH.Syntax.Q DerivClause
  type DerivStrategy :: *
  data DerivStrategy = StockStrategy | AnyclassStrategy | NewtypeStrategy | ViaStrategy GHC.Internal.TH.Syntax.Type
  type DerivStrategyQ :: *
  type DerivStrategyQ = GHC.Internal.TH.Syntax.Q DerivStrategy
  type ExpQ :: *
  type ExpQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Exp
  type FamilyResultSigQ :: *
  type FamilyResultSigQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.FamilyResultSig
  type FieldExpQ :: *
  type FieldExpQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.FieldExp
  type FieldPatQ :: *
  type FieldPatQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.FieldPat
  type GuardQ :: *
  type GuardQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Guard
  type InfoQ :: *
  type InfoQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Info
  type KindQ :: *
  type KindQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Kind
  type MatchQ :: *
  type MatchQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Match
  type Overlap :: *
  data Overlap = Overlappable | Overlapping | Overlaps | Incoherent
  type PatQ :: *
  type PatQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Pat
  type PatSynArgsQ :: *
  type PatSynArgsQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.PatSynArgs
  type PatSynDirQ :: *
  type PatSynDirQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.PatSynDir
  type PredQ :: *
  type PredQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Pred
  type RangeQ :: *
  type RangeQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Range
  type RuleBndrQ :: *
  type RuleBndrQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.RuleBndr
  type SourceStrictnessQ :: *
  type SourceStrictnessQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.SourceStrictness
  type SourceUnpackednessQ :: *
  type SourceUnpackednessQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.SourceUnpackedness
  type StmtQ :: *
  type StmtQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Stmt
  type StrictTypeQ :: *
  type StrictTypeQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.StrictType
  type TExpQ :: forall (r :: GHC.Internal.Types.RuntimeRep). TYPE r -> *
  type TExpQ a = GHC.Internal.TH.Syntax.Q (GHC.Internal.TH.Syntax.TExp a)
  type TyLitQ :: *
  type TyLitQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.TyLit
  type TySynEqnQ :: *
  type TySynEqnQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.TySynEqn
  type TyVarBndrSpec :: *
  type TyVarBndrSpec = GHC.Internal.TH.Syntax.TyVarBndr GHC.Internal.TH.Syntax.Specificity
  type TyVarBndrUnit :: *
  type TyVarBndrUnit = GHC.Internal.TH.Syntax.TyVarBndr ()
  type TyVarBndrVis :: *
  type TyVarBndrVis = GHC.Internal.TH.Syntax.TyVarBndr GHC.Internal.TH.Syntax.BndrVis
  type TypeQ :: *
  type TypeQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Type
  type VarBangTypeQ :: *
  type VarBangTypeQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.VarBangType
  type VarStrictTypeQ :: *
  type VarStrictTypeQ = GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.VarStrictType
  anyclassStrategy :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m DerivStrategy
  appE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp
  appK :: GHC.Internal.TH.Syntax.Kind -> GHC.Internal.TH.Syntax.Kind -> GHC.Internal.TH.Syntax.Kind
  appKindT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Kind -> m GHC.Internal.TH.Syntax.Type
  appT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Type
  appTypeE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Exp
  appsE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m GHC.Internal.TH.Syntax.Exp] -> m GHC.Internal.TH.Syntax.Exp
  arithSeqE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Range -> m GHC.Internal.TH.Syntax.Exp
  arrowK :: GHC.Internal.TH.Syntax.Kind
  arrowT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Type
  asP :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Pat -> m GHC.Internal.TH.Syntax.Pat
  bang :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.SourceUnpackedness -> m GHC.Internal.TH.Syntax.SourceStrictness -> m GHC.Internal.TH.Syntax.Bang
  bangP :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Pat -> m GHC.Internal.TH.Syntax.Pat
  bangType :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Bang -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.BangType
  bindS :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Pat -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Stmt
  bndrInvis :: GHC.Internal.TH.Syntax.BndrVis
  bndrReq :: GHC.Internal.TH.Syntax.BndrVis
  bytesPrimL :: GHC.Internal.TH.Syntax.Bytes -> GHC.Internal.TH.Syntax.Lit
  cApi :: GHC.Internal.TH.Syntax.Callconv
  cCall :: GHC.Internal.TH.Syntax.Callconv
  caseE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> [m GHC.Internal.TH.Syntax.Match] -> m GHC.Internal.TH.Syntax.Exp
  charL :: GHC.Internal.Types.Char -> GHC.Internal.TH.Syntax.Lit
  charPrimL :: GHC.Internal.Types.Char -> GHC.Internal.TH.Syntax.Lit
  charTyLit :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Types.Char -> m GHC.Internal.TH.Syntax.TyLit
  classD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Cxt -> GHC.Internal.TH.Syntax.Name -> [GHC.Internal.TH.Syntax.TyVarBndr GHC.Internal.TH.Syntax.BndrVis] -> [GHC.Internal.TH.Syntax.FunDep] -> [m GHC.Internal.TH.Syntax.Dec] -> m GHC.Internal.TH.Syntax.Dec
  classP :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> [m GHC.Internal.TH.Syntax.Type] -> m GHC.Internal.TH.Syntax.Pred
  clause :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m GHC.Internal.TH.Syntax.Pat] -> m GHC.Internal.TH.Syntax.Body -> [m GHC.Internal.TH.Syntax.Dec] -> m GHC.Internal.TH.Syntax.Clause
  closedTypeFamilyD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> [GHC.Internal.TH.Syntax.TyVarBndr GHC.Internal.TH.Syntax.BndrVis] -> GHC.Internal.TH.Syntax.FamilyResultSig -> GHC.Internal.Maybe.Maybe GHC.Internal.TH.Syntax.InjectivityAnn -> [m GHC.Internal.TH.Syntax.TySynEqn] -> m GHC.Internal.TH.Syntax.Dec
  compE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m GHC.Internal.TH.Syntax.Stmt] -> m GHC.Internal.TH.Syntax.Exp
  conE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Exp
  conK :: GHC.Internal.TH.Syntax.Name -> GHC.Internal.TH.Syntax.Kind
  conP :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> [m GHC.Internal.TH.Syntax.Pat] -> m GHC.Internal.TH.Syntax.Pat
  conT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Type
  condE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp
  constrainedE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m GHC.Internal.TH.Syntax.Exp] -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp
  constraintK :: GHC.Internal.TH.Syntax.Kind
  cxt :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m GHC.Internal.TH.Syntax.Pred] -> m GHC.Internal.TH.Syntax.Cxt
  dataD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Cxt -> GHC.Internal.TH.Syntax.Name -> [GHC.Internal.TH.Syntax.TyVarBndr GHC.Internal.TH.Syntax.BndrVis] -> GHC.Internal.Maybe.Maybe GHC.Internal.TH.Syntax.Kind -> [m GHC.Internal.TH.Syntax.Con] -> [m DerivClause] -> m GHC.Internal.TH.Syntax.Dec
  dataD_doc :: GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Cxt -> GHC.Internal.TH.Syntax.Name -> [GHC.Internal.TH.Syntax.Q (GHC.Internal.TH.Syntax.TyVarBndr GHC.Internal.TH.Syntax.BndrVis)] -> GHC.Internal.Maybe.Maybe (GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Kind) -> [(GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Con, GHC.Internal.Maybe.Maybe GHC.Internal.Base.String, [GHC.Internal.Maybe.Maybe GHC.Internal.Base.String])] -> [GHC.Internal.TH.Syntax.Q DerivClause] -> GHC.Internal.Maybe.Maybe GHC.Internal.Base.String -> GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Dec
  dataFamilyD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> [GHC.Internal.TH.Syntax.TyVarBndr GHC.Internal.TH.Syntax.BndrVis] -> GHC.Internal.Maybe.Maybe GHC.Internal.TH.Syntax.Kind -> m GHC.Internal.TH.Syntax.Dec
  dataInstD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Cxt -> GHC.Internal.TH.Syntax.Name -> [m GHC.Internal.TH.Syntax.Type] -> GHC.Internal.Maybe.Maybe GHC.Internal.TH.Syntax.Kind -> [m GHC.Internal.TH.Syntax.Con] -> [m DerivClause] -> m GHC.Internal.TH.Syntax.Dec
  dataInstD_doc :: GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Cxt -> GHC.Internal.Maybe.Maybe [GHC.Internal.TH.Syntax.Q (GHC.Internal.TH.Syntax.TyVarBndr ())] -> GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Type -> GHC.Internal.Maybe.Maybe (GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Kind) -> [(GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Con, GHC.Internal.Maybe.Maybe GHC.Internal.Base.String, [GHC.Internal.Maybe.Maybe GHC.Internal.Base.String])] -> [GHC.Internal.TH.Syntax.Q DerivClause] -> GHC.Internal.Maybe.Maybe GHC.Internal.Base.String -> GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Dec
  defaultD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m GHC.Internal.TH.Syntax.Type] -> m GHC.Internal.TH.Syntax.Dec
  defaultSigD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Dec
  derivClause :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Maybe.Maybe DerivStrategy -> [m GHC.Internal.TH.Syntax.Pred] -> m DerivClause
  doE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m GHC.Internal.TH.Syntax.Stmt] -> m GHC.Internal.TH.Syntax.Exp
  doublePrimL :: GHC.Internal.Real.Rational -> GHC.Internal.TH.Syntax.Lit
  dyn :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Base.String -> m GHC.Internal.TH.Syntax.Exp
  equalP :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Pred
  equalityT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Type
  explBidir :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m GHC.Internal.TH.Syntax.Clause] -> m GHC.Internal.TH.Syntax.PatSynDir
  fieldExp :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Exp -> m (GHC.Internal.TH.Syntax.Name, GHC.Internal.TH.Syntax.Exp)
  fieldPat :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Pat -> m GHC.Internal.TH.Syntax.FieldPat
  floatPrimL :: GHC.Internal.Real.Rational -> GHC.Internal.TH.Syntax.Lit
  forImpD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Callconv -> GHC.Internal.TH.Syntax.Safety -> GHC.Internal.Base.String -> GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Dec
  forallC :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [GHC.Internal.TH.Syntax.TyVarBndr GHC.Internal.TH.Syntax.Specificity] -> m GHC.Internal.TH.Syntax.Cxt -> m GHC.Internal.TH.Syntax.Con -> m GHC.Internal.TH.Syntax.Con
  forallE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m (GHC.Internal.TH.Syntax.TyVarBndr GHC.Internal.TH.Syntax.Specificity)] -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp
  forallT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [GHC.Internal.TH.Syntax.TyVarBndr GHC.Internal.TH.Syntax.Specificity] -> m GHC.Internal.TH.Syntax.Cxt -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Type
  forallVisE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m (GHC.Internal.TH.Syntax.TyVarBndr ())] -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp
  forallVisT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m (GHC.Internal.TH.Syntax.TyVarBndr ())] -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Type
  fromE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp
  fromR :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Range
  fromThenE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp
  fromThenR :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Range
  fromThenToE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp
  fromThenToR :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Range
  fromToE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp
  fromToR :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Range
  funD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> [m GHC.Internal.TH.Syntax.Clause] -> m GHC.Internal.TH.Syntax.Dec
  funD_doc :: GHC.Internal.TH.Syntax.Name -> [GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Clause] -> GHC.Internal.Maybe.Maybe GHC.Internal.Base.String -> [GHC.Internal.Maybe.Maybe GHC.Internal.Base.String] -> GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Dec
  funDep :: [GHC.Internal.TH.Syntax.Name] -> [GHC.Internal.TH.Syntax.Name] -> GHC.Internal.TH.Syntax.FunDep
  gadtC :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [GHC.Internal.TH.Syntax.Name] -> [m GHC.Internal.TH.Syntax.StrictType] -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Con
  getFieldE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> GHC.Internal.Base.String -> m GHC.Internal.TH.Syntax.Exp
  guardedB :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m (GHC.Internal.TH.Syntax.Guard, GHC.Internal.TH.Syntax.Exp)] -> m GHC.Internal.TH.Syntax.Body
  implBidir :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.PatSynDir
  implicitParamBindD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Base.String -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Dec
  implicitParamT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Base.String -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Type
  implicitParamVarE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Base.String -> m GHC.Internal.TH.Syntax.Exp
  inferR :: GHC.Internal.TH.Lib.Role
  inferredSpec :: GHC.Internal.TH.Syntax.Specificity
  infixApp :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp
  infixC :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m (GHC.Internal.TH.Syntax.Bang, GHC.Internal.TH.Syntax.Type) -> GHC.Internal.TH.Syntax.Name -> m (GHC.Internal.TH.Syntax.Bang, GHC.Internal.TH.Syntax.Type) -> m GHC.Internal.TH.Syntax.Con
  infixE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Maybe.Maybe (m GHC.Internal.TH.Syntax.Exp) -> m GHC.Internal.TH.Syntax.Exp -> GHC.Internal.Maybe.Maybe (m GHC.Internal.TH.Syntax.Exp) -> m GHC.Internal.TH.Syntax.Exp
  infixLD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Types.Int -> GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Dec
  infixND :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Types.Int -> GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Dec
  infixP :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Pat -> GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Pat -> m GHC.Internal.TH.Syntax.Pat
  infixPatSyn :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.PatSynArgs
  infixRD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Types.Int -> GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Dec
  infixT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Type -> GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Type
  injectivityAnn :: GHC.Internal.TH.Syntax.Name -> [GHC.Internal.TH.Syntax.Name] -> GHC.Internal.TH.Lib.InjectivityAnn
  instanceD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Cxt -> m GHC.Internal.TH.Syntax.Type -> [m GHC.Internal.TH.Syntax.Dec] -> m GHC.Internal.TH.Syntax.Dec
  instanceWithOverlapD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Maybe.Maybe Overlap -> m GHC.Internal.TH.Syntax.Cxt -> m GHC.Internal.TH.Syntax.Type -> [m GHC.Internal.TH.Syntax.Dec] -> m GHC.Internal.TH.Syntax.Dec
  intPrimL :: GHC.Internal.Bignum.Integer.Integer -> GHC.Internal.TH.Syntax.Lit
  integerL :: GHC.Internal.Bignum.Integer.Integer -> GHC.Internal.TH.Syntax.Lit
  interruptible :: GHC.Internal.TH.Syntax.Safety
  invisP :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Pat
  isStrict :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Strict
  javaScript :: GHC.Internal.TH.Syntax.Callconv
  kiSigD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Kind -> m GHC.Internal.TH.Syntax.Dec
  kindSig :: GHC.Internal.TH.Syntax.Kind -> GHC.Internal.TH.Syntax.FamilyResultSig
  kindedBndrTV :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> GHC.Internal.TH.Syntax.BndrVis -> m GHC.Internal.TH.Syntax.Kind -> m (GHC.Internal.TH.Syntax.TyVarBndr GHC.Internal.TH.Syntax.BndrVis)
  kindedInvisTV :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> GHC.Internal.TH.Syntax.Specificity -> m GHC.Internal.TH.Syntax.Kind -> m (GHC.Internal.TH.Syntax.TyVarBndr GHC.Internal.TH.Syntax.Specificity)
  kindedTV :: forall flag. DefaultBndrFlag flag => GHC.Internal.TH.Syntax.Name -> GHC.Internal.TH.Syntax.Kind -> GHC.Internal.TH.Syntax.TyVarBndr flag
  labelE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Base.String -> m GHC.Internal.TH.Syntax.Exp
  lam1E :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Pat -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp
  lamCaseE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m GHC.Internal.TH.Syntax.Match] -> m GHC.Internal.TH.Syntax.Exp
  lamCasesE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m GHC.Internal.TH.Syntax.Clause] -> m GHC.Internal.TH.Syntax.Exp
  lamE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m GHC.Internal.TH.Syntax.Pat] -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp
  letE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m GHC.Internal.TH.Syntax.Dec] -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp
  letS :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m GHC.Internal.TH.Syntax.Dec] -> m GHC.Internal.TH.Syntax.Stmt
  listE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m GHC.Internal.TH.Syntax.Exp] -> m GHC.Internal.TH.Syntax.Exp
  listK :: GHC.Internal.TH.Syntax.Kind
  listP :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m GHC.Internal.TH.Syntax.Pat] -> m GHC.Internal.TH.Syntax.Pat
  listT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Type
  litE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Lit -> m GHC.Internal.TH.Syntax.Exp
  litP :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Lit -> m GHC.Internal.TH.Syntax.Pat
  litT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.TyLit -> m GHC.Internal.TH.Syntax.Type
  match :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Pat -> m GHC.Internal.TH.Syntax.Body -> [m GHC.Internal.TH.Syntax.Dec] -> m GHC.Internal.TH.Syntax.Match
  mdoE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m GHC.Internal.TH.Syntax.Stmt] -> m GHC.Internal.TH.Syntax.Exp
  mkBytes :: GHC.Internal.ForeignPtr.ForeignPtr GHC.Internal.Word.Word8 -> GHC.Internal.Types.Word -> GHC.Internal.Types.Word -> GHC.Internal.TH.Syntax.Bytes
  moduleAnnotation :: GHC.Internal.TH.Syntax.AnnTarget
  mulArrowT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Type
  multiIfE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m (GHC.Internal.TH.Syntax.Guard, GHC.Internal.TH.Syntax.Exp)] -> m GHC.Internal.TH.Syntax.Exp
  newtypeD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Cxt -> GHC.Internal.TH.Syntax.Name -> [GHC.Internal.TH.Syntax.TyVarBndr GHC.Internal.TH.Syntax.BndrVis] -> GHC.Internal.Maybe.Maybe GHC.Internal.TH.Syntax.Kind -> m GHC.Internal.TH.Syntax.Con -> [m DerivClause] -> m GHC.Internal.TH.Syntax.Dec
  newtypeD_doc :: GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Cxt -> GHC.Internal.TH.Syntax.Name -> [GHC.Internal.TH.Syntax.Q (GHC.Internal.TH.Syntax.TyVarBndr GHC.Internal.TH.Syntax.BndrVis)] -> GHC.Internal.Maybe.Maybe (GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Kind) -> (GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Con, GHC.Internal.Maybe.Maybe GHC.Internal.Base.String, [GHC.Internal.Maybe.Maybe GHC.Internal.Base.String]) -> [GHC.Internal.TH.Syntax.Q DerivClause] -> GHC.Internal.Maybe.Maybe GHC.Internal.Base.String -> GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Dec
  newtypeInstD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Cxt -> GHC.Internal.TH.Syntax.Name -> [m GHC.Internal.TH.Syntax.Type] -> GHC.Internal.Maybe.Maybe GHC.Internal.TH.Syntax.Kind -> m GHC.Internal.TH.Syntax.Con -> [m DerivClause] -> m GHC.Internal.TH.Syntax.Dec
  newtypeInstD_doc :: GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Cxt -> GHC.Internal.Maybe.Maybe [GHC.Internal.TH.Syntax.Q (GHC.Internal.TH.Syntax.TyVarBndr ())] -> GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Type -> GHC.Internal.Maybe.Maybe (GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Kind) -> (GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Con, GHC.Internal.Maybe.Maybe GHC.Internal.Base.String, [GHC.Internal.Maybe.Maybe GHC.Internal.Base.String]) -> [GHC.Internal.TH.Syntax.Q DerivClause] -> GHC.Internal.Maybe.Maybe GHC.Internal.Base.String -> GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Dec
  newtypeStrategy :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m DerivStrategy
  noBindS :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Stmt
  noSig :: GHC.Internal.TH.Syntax.FamilyResultSig
  noSourceStrictness :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.SourceStrictness
  noSourceUnpackedness :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.SourceUnpackedness
  nominalR :: GHC.Internal.TH.Lib.Role
  normalB :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Body
  normalC :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> [m GHC.Internal.TH.Syntax.BangType] -> m GHC.Internal.TH.Syntax.Con
  normalG :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Guard
  normalGE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp -> m (GHC.Internal.TH.Syntax.Guard, GHC.Internal.TH.Syntax.Exp)
  notStrict :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Strict
  numTyLit :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Bignum.Integer.Integer -> m GHC.Internal.TH.Syntax.TyLit
  openTypeFamilyD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> [GHC.Internal.TH.Syntax.TyVarBndr GHC.Internal.TH.Syntax.BndrVis] -> GHC.Internal.TH.Syntax.FamilyResultSig -> GHC.Internal.Maybe.Maybe GHC.Internal.TH.Syntax.InjectivityAnn -> m GHC.Internal.TH.Syntax.Dec
  parS :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [[m GHC.Internal.TH.Syntax.Stmt]] -> m GHC.Internal.TH.Syntax.Stmt
  parensE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp
  parensP :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Pat -> m GHC.Internal.TH.Syntax.Pat
  parensT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Type
  patG :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m GHC.Internal.TH.Syntax.Stmt] -> m GHC.Internal.TH.Syntax.Guard
  patGE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m GHC.Internal.TH.Syntax.Stmt] -> m GHC.Internal.TH.Syntax.Exp -> m (GHC.Internal.TH.Syntax.Guard, GHC.Internal.TH.Syntax.Exp)
  patSynD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.PatSynArgs -> m GHC.Internal.TH.Syntax.PatSynDir -> m GHC.Internal.TH.Syntax.Pat -> m GHC.Internal.TH.Syntax.Dec
  patSynD_doc :: GHC.Internal.TH.Syntax.Name -> GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.PatSynArgs -> GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.PatSynDir -> GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Pat -> GHC.Internal.Maybe.Maybe GHC.Internal.Base.String -> [GHC.Internal.Maybe.Maybe GHC.Internal.Base.String] -> GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Dec
  patSynSigD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Dec
  phantomR :: GHC.Internal.TH.Lib.Role
  plainBndrTV :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> GHC.Internal.TH.Syntax.BndrVis -> m (GHC.Internal.TH.Syntax.TyVarBndr GHC.Internal.TH.Syntax.BndrVis)
  plainInvisTV :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> GHC.Internal.TH.Syntax.Specificity -> m (GHC.Internal.TH.Syntax.TyVarBndr GHC.Internal.TH.Syntax.Specificity)
  plainTV :: forall flag. DefaultBndrFlag flag => GHC.Internal.TH.Syntax.Name -> GHC.Internal.TH.Syntax.TyVarBndr flag
  pragAnnD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.AnnTarget -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Dec
  pragCompleteD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [GHC.Internal.TH.Syntax.Name] -> GHC.Internal.Maybe.Maybe GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Dec
  pragInlD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> GHC.Internal.TH.Syntax.Inline -> GHC.Internal.TH.Syntax.RuleMatch -> GHC.Internal.TH.Syntax.Phases -> m GHC.Internal.TH.Syntax.Dec
  pragLineD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Types.Int -> GHC.Internal.Base.String -> m GHC.Internal.TH.Syntax.Dec
  pragRuleD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Base.String -> [m GHC.Internal.TH.Syntax.RuleBndr] -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp -> GHC.Internal.TH.Syntax.Phases -> m GHC.Internal.TH.Syntax.Dec
  pragSpecD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Type -> GHC.Internal.TH.Syntax.Phases -> m GHC.Internal.TH.Syntax.Dec
  pragSpecED :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Maybe.Maybe [m (GHC.Internal.TH.Syntax.TyVarBndr ())] -> [m GHC.Internal.TH.Syntax.RuleBndr] -> m GHC.Internal.TH.Syntax.Exp -> GHC.Internal.TH.Syntax.Phases -> m GHC.Internal.TH.Syntax.Dec
  pragSpecInlD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Type -> GHC.Internal.TH.Syntax.Inline -> GHC.Internal.TH.Syntax.Phases -> m GHC.Internal.TH.Syntax.Dec
  pragSpecInlED :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Maybe.Maybe [m (GHC.Internal.TH.Syntax.TyVarBndr ())] -> [m GHC.Internal.TH.Syntax.RuleBndr] -> m GHC.Internal.TH.Syntax.Exp -> GHC.Internal.TH.Syntax.Inline -> GHC.Internal.TH.Syntax.Phases -> m GHC.Internal.TH.Syntax.Dec
  pragSpecInstD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Dec
  prefixPatSyn :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [GHC.Internal.TH.Syntax.Name] -> m GHC.Internal.TH.Syntax.PatSynArgs
  prim :: GHC.Internal.TH.Syntax.Callconv
  projectionE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Base.NonEmpty GHC.Internal.Base.String -> m GHC.Internal.TH.Syntax.Exp
  promotedConsT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Type
  promotedInfixT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Type -> GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Type
  promotedNilT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Type
  promotedT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Type
  promotedTupleT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Types.Int -> m GHC.Internal.TH.Syntax.Type
  promotedUInfixT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Type -> GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Type
  rationalL :: GHC.Internal.Real.Rational -> GHC.Internal.TH.Syntax.Lit
  recC :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> [m GHC.Internal.TH.Syntax.VarBangType] -> m GHC.Internal.TH.Syntax.Con
  recConE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> [m (GHC.Internal.TH.Syntax.Name, GHC.Internal.TH.Syntax.Exp)] -> m GHC.Internal.TH.Syntax.Exp
  recGadtC :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [GHC.Internal.TH.Syntax.Name] -> [m GHC.Internal.TH.Syntax.VarStrictType] -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Con
  recP :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> [m GHC.Internal.TH.Syntax.FieldPat] -> m GHC.Internal.TH.Syntax.Pat
  recS :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m GHC.Internal.TH.Syntax.Stmt] -> m GHC.Internal.TH.Syntax.Stmt
  recUpdE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> [m (GHC.Internal.TH.Syntax.Name, GHC.Internal.TH.Syntax.Exp)] -> m GHC.Internal.TH.Syntax.Exp
  recordPatSyn :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [GHC.Internal.TH.Syntax.Name] -> m GHC.Internal.TH.Syntax.PatSynArgs
  representationalR :: GHC.Internal.TH.Lib.Role
  roleAnnotD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> [GHC.Internal.TH.Lib.Role] -> m GHC.Internal.TH.Syntax.Dec
  ruleVar :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.RuleBndr
  safe :: GHC.Internal.TH.Syntax.Safety
  sectionL :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp
  sectionR :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp
  sigD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Dec
  sigE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Exp
  sigP :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Pat -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Pat
  sigT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Type -> GHC.Internal.TH.Syntax.Kind -> m GHC.Internal.TH.Syntax.Type
  sourceLazy :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.SourceStrictness
  sourceNoUnpack :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.SourceUnpackedness
  sourceStrict :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.SourceStrictness
  sourceUnpack :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.SourceUnpackedness
  specifiedSpec :: GHC.Internal.TH.Syntax.Specificity
  standaloneDerivD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Cxt -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Dec
  standaloneDerivWithStrategyD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Maybe.Maybe DerivStrategy -> m GHC.Internal.TH.Syntax.Cxt -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Dec
  starK :: GHC.Internal.TH.Syntax.Kind
  staticE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp
  stdCall :: GHC.Internal.TH.Syntax.Callconv
  stockStrategy :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m DerivStrategy
  strTyLit :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Base.String -> m GHC.Internal.TH.Syntax.TyLit
  strictType :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Strict -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.StrictType
  stringE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Base.String -> m GHC.Internal.TH.Syntax.Exp
  stringL :: GHC.Internal.Base.String -> GHC.Internal.TH.Syntax.Lit
  stringPrimL :: [GHC.Internal.Word.Word8] -> GHC.Internal.TH.Syntax.Lit
  thisModule :: GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Module
  tildeP :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Pat -> m GHC.Internal.TH.Syntax.Pat
  tupE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m GHC.Internal.TH.Syntax.Exp] -> m GHC.Internal.TH.Syntax.Exp
  tupP :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m GHC.Internal.TH.Syntax.Pat] -> m GHC.Internal.TH.Syntax.Pat
  tupleK :: GHC.Internal.Types.Int -> GHC.Internal.TH.Syntax.Kind
  tupleT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Types.Int -> m GHC.Internal.TH.Syntax.Type
  tySynD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> [GHC.Internal.TH.Syntax.TyVarBndr GHC.Internal.TH.Syntax.BndrVis] -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Dec
  tySynEqn :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Maybe.Maybe [GHC.Internal.TH.Syntax.TyVarBndr ()] -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.TySynEqn
  tySynInstD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.TySynEqn -> m GHC.Internal.TH.Syntax.Dec
  tyVarSig :: GHC.Internal.TH.Syntax.TyVarBndr () -> GHC.Internal.TH.Syntax.FamilyResultSig
  typeAnnotation :: GHC.Internal.TH.Syntax.Name -> GHC.Internal.TH.Syntax.AnnTarget
  typeDataD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> [GHC.Internal.TH.Syntax.TyVarBndr GHC.Internal.TH.Syntax.BndrVis] -> GHC.Internal.Maybe.Maybe GHC.Internal.TH.Syntax.Kind -> [m GHC.Internal.TH.Syntax.Con] -> m GHC.Internal.TH.Syntax.Dec
  typeDataD_doc :: GHC.Internal.TH.Syntax.Name -> [GHC.Internal.TH.Syntax.Q (GHC.Internal.TH.Syntax.TyVarBndr GHC.Internal.TH.Syntax.BndrVis)] -> GHC.Internal.Maybe.Maybe (GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Kind) -> [(GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Con, GHC.Internal.Maybe.Maybe GHC.Internal.Base.String, [GHC.Internal.Maybe.Maybe GHC.Internal.Base.String])] -> GHC.Internal.Maybe.Maybe GHC.Internal.Base.String -> GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Dec
  typeE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Exp
  typeP :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Pat
  typedBracketE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp
  typedRuleVar :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.RuleBndr
  typedSpliceE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp
  uInfixE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Exp
  uInfixP :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Pat -> GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Pat -> m GHC.Internal.TH.Syntax.Pat
  uInfixT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Type -> GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Type -> m GHC.Internal.TH.Syntax.Type
  unboundVarE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Exp
  unboxedSumE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> GHC.Internal.TH.Syntax.SumAlt -> GHC.Internal.TH.Syntax.SumArity -> m GHC.Internal.TH.Syntax.Exp
  unboxedSumP :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Pat -> GHC.Internal.TH.Syntax.SumAlt -> GHC.Internal.TH.Syntax.SumArity -> m GHC.Internal.TH.Syntax.Pat
  unboxedSumT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.SumArity -> m GHC.Internal.TH.Syntax.Type
  unboxedTupE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m GHC.Internal.TH.Syntax.Exp] -> m GHC.Internal.TH.Syntax.Exp
  unboxedTupP :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => [m GHC.Internal.TH.Syntax.Pat] -> m GHC.Internal.TH.Syntax.Pat
  unboxedTupleT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.Types.Int -> m GHC.Internal.TH.Syntax.Type
  unidir :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.PatSynDir
  unpacked :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Strict
  unsafe :: GHC.Internal.TH.Syntax.Safety
  valD :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Pat -> m GHC.Internal.TH.Syntax.Body -> [m GHC.Internal.TH.Syntax.Dec] -> m GHC.Internal.TH.Syntax.Dec
  valueAnnotation :: GHC.Internal.TH.Syntax.Name -> GHC.Internal.TH.Syntax.AnnTarget
  varBangType :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.BangType -> m GHC.Internal.TH.Syntax.VarBangType
  varE :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Exp
  varK :: GHC.Internal.TH.Syntax.Name -> GHC.Internal.TH.Syntax.Kind
  varP :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Pat
  varStrictType :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.StrictType -> m GHC.Internal.TH.Syntax.VarStrictType
  varT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => GHC.Internal.TH.Syntax.Name -> m GHC.Internal.TH.Syntax.Type
  viaStrategy :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Type -> m DerivStrategy
  viewP :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Exp -> m GHC.Internal.TH.Syntax.Pat -> m GHC.Internal.TH.Syntax.Pat
  wildCardT :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Type
  wildP :: forall (m :: * -> *). GHC.Internal.TH.Syntax.Quote m => m GHC.Internal.TH.Syntax.Pat
  withDecDoc :: GHC.Internal.Base.String -> GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Dec -> GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Dec
  withDecsDoc :: GHC.Internal.Base.String -> GHC.Internal.TH.Syntax.Q [GHC.Internal.TH.Syntax.Dec] -> GHC.Internal.TH.Syntax.Q [GHC.Internal.TH.Syntax.Dec]
  wordPrimL :: GHC.Internal.Bignum.Integer.Integer -> GHC.Internal.TH.Syntax.Lit

module Language.Haskell.TH.Ppr where
  -- Safety: Safe
  type ForallVisFlag :: *
  data ForallVisFlag = ForallVis | ForallInvis
  type Ppr :: * -> Constraint
  class Ppr a where
    ppr :: a -> GHC.Boot.TH.PprLib.Doc
    ppr_list :: [a] -> GHC.Boot.TH.PprLib.Doc
    {-# MINIMAL ppr #-}
  type PprFlag :: * -> Constraint
  class PprFlag flag where
    pprTyVarBndr :: GHC.Internal.TH.Syntax.TyVarBndr flag -> GHC.Boot.TH.PprLib.Doc
    {-# MINIMAL pprTyVarBndr #-}
  type Precedence :: *
  type Precedence = GHC.Internal.Types.Int
  type TypeArg :: *
  data TypeArg = TANormal GHC.Internal.TH.Syntax.Type | TyArg GHC.Internal.TH.Syntax.Kind
  appPrec :: Precedence
  bar :: GHC.Boot.TH.PprLib.Doc
  bytesToString :: [GHC.Internal.Word.Word8] -> GHC.Internal.Base.String
  commaSep :: forall a. Ppr a => [a] -> GHC.Boot.TH.PprLib.Doc
  commaSepApplied :: [GHC.Internal.TH.Syntax.Name] -> GHC.Boot.TH.PprLib.Doc
  commaSepWith :: forall a. (a -> GHC.Boot.TH.PprLib.Doc) -> [a] -> GHC.Boot.TH.PprLib.Doc
  fromTANormal :: TypeArg -> GHC.Internal.Maybe.Maybe GHC.Internal.TH.Syntax.Type
  funPrec :: Precedence
  hashParens :: GHC.Boot.TH.PprLib.Doc -> GHC.Boot.TH.PprLib.Doc
  isStarT :: GHC.Internal.TH.Syntax.Type -> GHC.Internal.Types.Bool
  isSymOcc :: GHC.Internal.TH.Syntax.Name -> GHC.Internal.Types.Bool
  nestDepth :: GHC.Internal.Types.Int
  noPrec :: Precedence
  opPrec :: Precedence
  parensIf :: GHC.Internal.Types.Bool -> GHC.Boot.TH.PprLib.Doc -> GHC.Boot.TH.PprLib.Doc
  pprBangType :: GHC.Internal.TH.Syntax.BangType -> GHC.Boot.TH.PprLib.Doc
  pprBndrVis :: GHC.Internal.TH.Syntax.BndrVis -> GHC.Boot.TH.PprLib.Doc -> GHC.Boot.TH.PprLib.Doc
  pprBody :: GHC.Internal.Types.Bool -> GHC.Internal.TH.Syntax.Body -> GHC.Boot.TH.PprLib.Doc
  pprClause :: GHC.Internal.Types.Bool -> GHC.Internal.TH.Syntax.Clause -> GHC.Boot.TH.PprLib.Doc
  pprCtxWith :: forall a. Ppr a => (Precedence -> a -> GHC.Boot.TH.PprLib.Doc) -> [a] -> GHC.Boot.TH.PprLib.Doc
  pprCxt :: GHC.Internal.TH.Syntax.Cxt -> GHC.Boot.TH.PprLib.Doc
  pprExp :: Precedence -> GHC.Internal.TH.Syntax.Exp -> GHC.Boot.TH.PprLib.Doc
  pprFields :: [(GHC.Internal.TH.Syntax.Name, GHC.Internal.TH.Syntax.Exp)] -> GHC.Boot.TH.PprLib.Doc
  pprFixity :: GHC.Internal.TH.Syntax.Name -> GHC.Internal.TH.Syntax.Fixity -> GHC.Internal.TH.Syntax.NamespaceSpecifier -> GHC.Boot.TH.PprLib.Doc
  pprForall :: [GHC.Internal.TH.Syntax.TyVarBndr GHC.Internal.TH.Syntax.Specificity] -> GHC.Internal.TH.Syntax.Cxt -> GHC.Boot.TH.PprLib.Doc
  pprForall' :: forall flag. PprFlag flag => ForallVisFlag -> [GHC.Internal.TH.Syntax.TyVarBndr flag] -> GHC.Internal.TH.Syntax.Cxt -> GHC.Boot.TH.PprLib.Doc
  pprForallVis :: [GHC.Internal.TH.Syntax.TyVarBndr ()] -> GHC.Internal.TH.Syntax.Cxt -> GHC.Boot.TH.PprLib.Doc
  pprFunArgType :: GHC.Internal.TH.Syntax.Type -> GHC.Boot.TH.PprLib.Doc
  pprGadtRHS :: [(GHC.Internal.TH.Syntax.Strict, GHC.Internal.TH.Syntax.Type)] -> GHC.Internal.TH.Syntax.Type -> GHC.Boot.TH.PprLib.Doc
  pprGuarded :: GHC.Boot.TH.PprLib.Doc -> (GHC.Internal.TH.Syntax.Guard, GHC.Internal.TH.Syntax.Exp) -> GHC.Boot.TH.PprLib.Doc
  pprInfixExp :: GHC.Internal.TH.Syntax.Exp -> GHC.Boot.TH.PprLib.Doc
  pprInfixT :: Precedence -> GHC.Internal.TH.Syntax.Type -> GHC.Boot.TH.PprLib.Doc
  pprLit :: Precedence -> GHC.Internal.TH.Syntax.Lit -> GHC.Boot.TH.PprLib.Doc
  pprMatchPat :: GHC.Internal.TH.Syntax.Pat -> GHC.Boot.TH.PprLib.Doc
  pprMaybeExp :: Precedence -> GHC.Internal.Maybe.Maybe GHC.Internal.TH.Syntax.Exp -> GHC.Boot.TH.PprLib.Doc
  pprNamespaceSpecifier :: GHC.Internal.TH.Syntax.NamespaceSpecifier -> GHC.Boot.TH.PprLib.Doc
  pprParendType :: GHC.Internal.TH.Syntax.Type -> GHC.Boot.TH.PprLib.Doc
  pprParendTypeArg :: TypeArg -> GHC.Boot.TH.PprLib.Doc
  pprPat :: Precedence -> GHC.Internal.TH.Syntax.Pat -> GHC.Boot.TH.PprLib.Doc
  pprPatSynSig :: GHC.Internal.TH.Syntax.Name -> GHC.Internal.TH.Syntax.PatSynType -> GHC.Boot.TH.PprLib.Doc
  pprPatSynType :: GHC.Internal.TH.Syntax.PatSynType -> GHC.Boot.TH.PprLib.Doc
  pprPrefixOcc :: GHC.Internal.TH.Syntax.Name -> GHC.Boot.TH.PprLib.Doc
  pprRecFields :: [(GHC.Internal.TH.Syntax.Name, GHC.Internal.TH.Syntax.Strict, GHC.Internal.TH.Syntax.Type)] -> GHC.Internal.TH.Syntax.Type -> GHC.Boot.TH.PprLib.Doc
  pprStrictType :: (GHC.Internal.TH.Syntax.Strict, GHC.Internal.TH.Syntax.Type) -> GHC.Boot.TH.PprLib.Doc
  pprString :: GHC.Internal.Base.String -> GHC.Boot.TH.PprLib.Doc
  pprTyApp :: Precedence -> (GHC.Internal.TH.Syntax.Type, [TypeArg]) -> GHC.Boot.TH.PprLib.Doc
  pprTyLit :: GHC.Internal.TH.Syntax.TyLit -> GHC.Boot.TH.PprLib.Doc
  pprType :: Precedence -> GHC.Internal.TH.Syntax.Type -> GHC.Boot.TH.PprLib.Doc
  pprVarBangType :: GHC.Internal.TH.Syntax.VarBangType -> GHC.Boot.TH.PprLib.Doc
  pprVarStrictType :: (GHC.Internal.TH.Syntax.Name, GHC.Internal.TH.Syntax.Strict, GHC.Internal.TH.Syntax.Type) -> GHC.Boot.TH.PprLib.Doc
  ppr_bndrs :: forall flag. PprFlag flag => GHC.Internal.Maybe.Maybe [GHC.Internal.TH.Syntax.TyVarBndr flag] -> GHC.Boot.TH.PprLib.Doc
  ppr_ctx_preds_with :: forall a. Ppr a => (Precedence -> a -> GHC.Boot.TH.PprLib.Doc) -> Precedence -> [a] -> GHC.Boot.TH.PprLib.Doc
  ppr_cxt_preds :: Precedence -> GHC.Internal.TH.Syntax.Cxt -> GHC.Boot.TH.PprLib.Doc
  ppr_data :: GHC.Internal.Types.Bool -> GHC.Boot.TH.PprLib.Doc -> GHC.Internal.TH.Syntax.Cxt -> GHC.Internal.Maybe.Maybe GHC.Internal.TH.Syntax.Name -> GHC.Boot.TH.PprLib.Doc -> GHC.Internal.Maybe.Maybe GHC.Internal.TH.Syntax.Kind -> [GHC.Internal.TH.Syntax.Con] -> [GHC.Internal.TH.Syntax.DerivClause] -> GHC.Boot.TH.PprLib.Doc
  ppr_dec :: GHC.Internal.Types.Bool -> GHC.Internal.TH.Syntax.Dec -> GHC.Boot.TH.PprLib.Doc
  ppr_deriv_clause :: GHC.Internal.TH.Syntax.DerivClause -> GHC.Boot.TH.PprLib.Doc
  ppr_deriv_strategy :: GHC.Internal.TH.Syntax.DerivStrategy -> GHC.Boot.TH.PprLib.Doc
  ppr_newtype :: GHC.Internal.Types.Bool -> GHC.Boot.TH.PprLib.Doc -> GHC.Internal.TH.Syntax.Cxt -> GHC.Internal.Maybe.Maybe GHC.Internal.TH.Syntax.Name -> GHC.Boot.TH.PprLib.Doc -> GHC.Internal.Maybe.Maybe GHC.Internal.TH.Syntax.Kind -> GHC.Internal.TH.Syntax.Con -> [GHC.Internal.TH.Syntax.DerivClause] -> GHC.Boot.TH.PprLib.Doc
  ppr_overlap :: GHC.Internal.TH.Syntax.Overlap -> GHC.Boot.TH.PprLib.Doc
  ppr_sig :: GHC.Internal.TH.Syntax.Name -> GHC.Internal.TH.Syntax.Type -> GHC.Boot.TH.PprLib.Doc
  ppr_tf_head :: GHC.Internal.TH.Syntax.TypeFamilyHead -> GHC.Boot.TH.PprLib.Doc
  ppr_tySyn :: GHC.Boot.TH.PprLib.Doc -> GHC.Internal.Maybe.Maybe GHC.Internal.TH.Syntax.Name -> GHC.Boot.TH.PprLib.Doc -> GHC.Internal.TH.Syntax.Type -> GHC.Boot.TH.PprLib.Doc
  ppr_type_data :: GHC.Internal.Types.Bool -> GHC.Boot.TH.PprLib.Doc -> GHC.Internal.TH.Syntax.Cxt -> GHC.Internal.Maybe.Maybe GHC.Internal.TH.Syntax.Name -> GHC.Boot.TH.PprLib.Doc -> GHC.Internal.Maybe.Maybe GHC.Internal.TH.Syntax.Kind -> [GHC.Internal.TH.Syntax.Con] -> [GHC.Internal.TH.Syntax.DerivClause] -> GHC.Boot.TH.PprLib.Doc
  ppr_typedef :: GHC.Internal.Base.String -> GHC.Internal.Types.Bool -> GHC.Boot.TH.PprLib.Doc -> GHC.Internal.TH.Syntax.Cxt -> GHC.Internal.Maybe.Maybe GHC.Internal.TH.Syntax.Name -> GHC.Boot.TH.PprLib.Doc -> GHC.Internal.Maybe.Maybe GHC.Internal.TH.Syntax.Kind -> [GHC.Internal.TH.Syntax.Con] -> [GHC.Internal.TH.Syntax.DerivClause] -> GHC.Boot.TH.PprLib.Doc
  pprint :: forall a. Ppr a => a -> GHC.Internal.Base.String
  qualPrec :: Precedence
  quoteParens :: GHC.Boot.TH.PprLib.Doc -> GHC.Boot.TH.PprLib.Doc
  semiSep :: forall a. Ppr a => [a] -> GHC.Boot.TH.PprLib.Doc
  semiSepWith :: forall a. (a -> GHC.Boot.TH.PprLib.Doc) -> [a] -> GHC.Boot.TH.PprLib.Doc
  sepWith :: forall a. GHC.Boot.TH.PprLib.Doc -> (a -> GHC.Boot.TH.PprLib.Doc) -> [a] -> GHC.Boot.TH.PprLib.Doc
  showtextl :: forall a. GHC.Internal.Show.Show a => a -> GHC.Boot.TH.PprLib.Doc
  sigPrec :: Precedence
  split :: GHC.Internal.TH.Syntax.Type -> (GHC.Internal.TH.Syntax.Type, [TypeArg])
  unboxedSumBars :: GHC.Boot.TH.PprLib.Doc -> GHC.Internal.TH.Syntax.SumAlt -> GHC.Internal.TH.Syntax.SumArity -> GHC.Boot.TH.PprLib.Doc
  unopPrec :: Precedence
  where_clause :: [GHC.Internal.TH.Syntax.Dec] -> GHC.Boot.TH.PprLib.Doc

module Language.Haskell.TH.PprLib where
  -- Safety: Safe
  ($$) :: Doc -> Doc -> Doc
  ($+$) :: Doc -> Doc -> Doc
  (<+>) :: Doc -> Doc -> Doc
  (<>) :: Doc -> Doc -> Doc
  type Doc :: *
  type Doc = PprM Text.PrettyPrint.HughesPJ.Doc
  type PprM :: * -> *
  data PprM a = ...
  arrow :: Doc
  braces :: Doc -> Doc
  brackets :: Doc -> Doc
  cat :: [Doc] -> Doc
  char :: GHC.Internal.Types.Char -> Doc
  colon :: Doc
  comma :: Doc
  dcolon :: Doc
  double :: GHC.Internal.Types.Double -> Doc
  doubleQuotes :: Doc -> Doc
  empty :: Doc
  equals :: Doc
  fcat :: [Doc] -> Doc
  float :: GHC.Internal.Types.Float -> Doc
  fsep :: [Doc] -> Doc
  hang :: Doc -> GHC.Internal.Types.Int -> Doc -> Doc
  hcat :: [Doc] -> Doc
  hsep :: [Doc] -> Doc
  int :: GHC.Internal.Types.Int -> Doc
  integer :: GHC.Internal.Bignum.Integer.Integer -> Doc
  isEmpty :: Doc -> PprM GHC.Internal.Types.Bool
  lbrace :: Doc
  lbrack :: Doc
  lparen :: Doc
  nest :: GHC.Internal.Types.Int -> Doc -> Doc
  parens :: Doc -> Doc
  pprName :: GHC.Internal.TH.Syntax.Name -> Doc
  pprName' :: GHC.Internal.TH.Syntax.NameIs -> GHC.Internal.TH.Syntax.Name -> Doc
  ptext :: GHC.Internal.Base.String -> Doc
  punctuate :: Doc -> [Doc] -> [Doc]
  quotes :: Doc -> Doc
  rational :: GHC.Internal.Real.Rational -> Doc
  rbrace :: Doc
  rbrack :: Doc
  rparen :: Doc
  semi :: Doc
  sep :: [Doc] -> Doc
  space :: Doc
  text :: GHC.Internal.Base.String -> Doc
  to_HPJ_Doc :: Doc -> Text.PrettyPrint.HughesPJ.Doc
  vcat :: [Doc] -> Doc

module Language.Haskell.TH.Quote where
  -- Safety: Safe
  type QuasiQuoter :: *
  data QuasiQuoter = QuasiQuoter {quoteExp :: GHC.Internal.Base.String -> GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Exp, quotePat :: GHC.Internal.Base.String -> GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Pat, quoteType :: GHC.Internal.Base.String -> GHC.Internal.TH.Syntax.Q GHC.Internal.TH.Syntax.Type, quoteDec :: GHC.Internal.Base.String -> GHC.Internal.TH.Syntax.Q [GHC.Internal.TH.Syntax.Dec]}
  dataToExpQ :: forall (m :: * -> *) a. (GHC.Internal.TH.Syntax.Quote m, GHC.Internal.Data.Data.Data a) => (forall b. GHC.Internal.Data.Data.Data b => b -> GHC.Internal.Maybe.Maybe (m GHC.Internal.TH.Syntax.Exp)) -> a -> m GHC.Internal.TH.Syntax.Exp
  dataToPatQ :: forall (m :: * -> *) a. (GHC.Internal.TH.Syntax.Quote m, GHC.Internal.Data.Data.Data a) => (forall b. GHC.Internal.Data.Data.Data b => b -> GHC.Internal.Maybe.Maybe (m GHC.Internal.TH.Syntax.Pat)) -> a -> m GHC.Internal.TH.Syntax.Pat
  dataToQa :: forall (m :: * -> *) a k q. (GHC.Internal.TH.Syntax.Quote m, GHC.Internal.Data.Data.Data a) => (GHC.Internal.TH.Syntax.Name -> k) -> (GHC.Internal.TH.Syntax.Lit -> m q) -> (k -> [m q] -> m q) -> (forall b. GHC.Internal.Data.Data.Data b => b -> GHC.Internal.Maybe.Maybe (m q)) -> a -> m q
  quoteFile :: QuasiQuoter -> QuasiQuoter

module Language.Haskell.TH.Syntax where
  -- Safety: Trustworthy
  type AnnLookup :: *
  data AnnLookup = AnnLookupModule Module | AnnLookupName Name
  type AnnTarget :: *
  data AnnTarget = ModuleAnnotation | TypeAnnotation Name | ValueAnnotation Name
  type Arity :: *
  type Arity = GHC.Internal.Types.Int
  type Bang :: *
  data Bang = Bang SourceUnpackedness SourceStrictness
  type BangType :: *
  type BangType = (Bang, Type)
  type BndrVis :: *
  data BndrVis = BndrReq | BndrInvis
  type Body :: *
  data Body = GuardedB [(Guard, Exp)] | NormalB Exp
  type Bytes :: *
  data Bytes = Bytes {bytesPtr :: GHC.Internal.ForeignPtr.ForeignPtr GHC.Internal.Word.Word8, bytesOffset :: GHC.Internal.Types.Word, bytesSize :: GHC.Internal.Types.Word}
  type Callconv :: *
  data Callconv = CCall | StdCall | CApi | Prim | JavaScript
  type CharPos :: *
  type CharPos = (GHC.Internal.Types.Int, GHC.Internal.Types.Int)
  type Clause :: *
  data Clause = Clause [Pat] Body [Dec]
  type role Code representational nominal
  type Code :: (* -> *) -> forall (r :: GHC.Internal.Types.RuntimeRep). TYPE r -> *
  newtype Code m a = Code {examineCode :: m (TExp a)}
  type Con :: *
  data Con = NormalC Name [BangType] | RecC Name [VarBangType] | InfixC BangType Name BangType | ForallC [TyVarBndr Specificity] Cxt Con | GadtC [Name] [BangType] Type | RecGadtC [Name] [VarBangType] Type
  type Cxt :: *
  type Cxt = [Pred]
  type Dec :: *
  data Dec
    = FunD Name [Clause]
    | ValD Pat Body [Dec]
    | DataD Cxt Name [TyVarBndr BndrVis] (GHC.Internal.Maybe.Maybe Kind) [Con] [DerivClause]
    | NewtypeD Cxt Name [TyVarBndr BndrVis] (GHC.Internal.Maybe.Maybe Kind) Con [DerivClause]
    | TypeDataD Name [TyVarBndr BndrVis] (GHC.Internal.Maybe.Maybe Kind) [Con]
    | TySynD Name [TyVarBndr BndrVis] Type
    | ClassD Cxt Name [TyVarBndr BndrVis] [FunDep] [Dec]
    | InstanceD (GHC.Internal.Maybe.Maybe Overlap) Cxt Type [Dec]
    | SigD Name Type
    | KiSigD Name Kind
    | ForeignD Foreign
    | InfixD Fixity NamespaceSpecifier Name
    | DefaultD [Type]
    | PragmaD Pragma
    | DataFamilyD Name [TyVarBndr BndrVis] (GHC.Internal.Maybe.Maybe Kind)
    | DataInstD Cxt (GHC.Internal.Maybe.Maybe [TyVarBndr ()]) Type (GHC.Internal.Maybe.Maybe Kind) [Con] [DerivClause]
    | NewtypeInstD Cxt (GHC.Internal.Maybe.Maybe [TyVarBndr ()]) Type (GHC.Internal.Maybe.Maybe Kind) Con [DerivClause]
    | TySynInstD TySynEqn
    | OpenTypeFamilyD TypeFamilyHead
    | ClosedTypeFamilyD TypeFamilyHead [TySynEqn]
    | RoleAnnotD Name [Role]
    | StandaloneDerivD (GHC.Internal.Maybe.Maybe DerivStrategy) Cxt Type
    | DefaultSigD Name Type
    | PatSynD Name PatSynArgs PatSynDir Pat
    | PatSynSigD Name PatSynType
    | ImplicitParamBindD GHC.Internal.Base.String Exp
  type DecidedStrictness :: *
  data DecidedStrictness = DecidedLazy | DecidedStrict | DecidedUnpack
  type DerivClause :: *
  data DerivClause = DerivClause (GHC.Internal.Maybe.Maybe DerivStrategy) Cxt
  type DerivStrategy :: *
  data DerivStrategy = StockStrategy | AnyclassStrategy | NewtypeStrategy | ViaStrategy Type
  type DocLoc :: *
  data DocLoc = ModuleDoc | DeclDoc Name | ArgDoc Name GHC.Internal.Types.Int | InstDoc Type
  type Exp :: *
  data Exp
    = VarE Name
    | ConE Name
    | LitE Lit
    | AppE Exp Exp
    | AppTypeE Exp Type
    | InfixE (GHC.Internal.Maybe.Maybe Exp) Exp (GHC.Internal.Maybe.Maybe Exp)
    | UInfixE Exp Exp Exp
    | ParensE Exp
    | LamE [Pat] Exp
    | LamCaseE [Match]
    | LamCasesE [Clause]
    | TupE [GHC.Internal.Maybe.Maybe Exp]
    | UnboxedTupE [GHC.Internal.Maybe.Maybe Exp]
    | UnboxedSumE Exp SumAlt SumArity
    | CondE Exp Exp Exp
    | MultiIfE [(Guard, Exp)]
    | LetE [Dec] Exp
    | CaseE Exp [Match]
    | DoE (GHC.Internal.Maybe.Maybe ModName) [Stmt]
    | MDoE (GHC.Internal.Maybe.Maybe ModName) [Stmt]
    | CompE [Stmt]
    | ArithSeqE Range
    | ListE [Exp]
    | SigE Exp Type
    | RecConE Name [FieldExp]
    | RecUpdE Exp [FieldExp]
    | StaticE Exp
    | UnboundVarE Name
    | LabelE GHC.Internal.Base.String
    | ImplicitParamVarE GHC.Internal.Base.String
    | GetFieldE Exp GHC.Internal.Base.String
    | ProjectionE (GHC.Internal.Base.NonEmpty GHC.Internal.Base.String)
    | TypedBracketE Exp
    | TypedSpliceE Exp
    | TypeE Type
    | ForallE [TyVarBndr Specificity] Exp
    | ForallVisE [TyVarBndr ()] Exp
    | ConstrainedE [Exp] Exp
  type Extension :: *
  data Extension
    = Cpp
    | OverlappingInstances
    | UndecidableInstances
    | IncoherentInstances
    | UndecidableSuperClasses
    | MonomorphismRestriction
    | MonoLocalBinds
    | DeepSubsumption
    | RelaxedPolyRec
    | ExtendedDefaultRules
    | NamedDefaults
    | ForeignFunctionInterface
    | UnliftedFFITypes
    | InterruptibleFFI
    | CApiFFI
    | GHCForeignImportPrim
    | JavaScriptFFI
    | ParallelArrays
    | Arrows
    | TemplateHaskell
    | TemplateHaskellQuotes
    | QualifiedDo
    | QuasiQuotes
    | ImplicitParams
    | ImplicitPrelude
    | ScopedTypeVariables
    | AllowAmbiguousTypes
    | UnboxedTuples
    | UnboxedSums
    | UnliftedNewtypes
    | UnliftedDatatypes
    | BangPatterns
    | TypeFamilies
    | TypeFamilyDependencies
    | TypeInType
    | OverloadedStrings
    | OverloadedLists
    | NumDecimals
    | DisambiguateRecordFields
    | RecordWildCards
    | NamedFieldPuns
    | ViewPatterns
    | OrPatterns
    | GADTs
    | GADTSyntax
    | NPlusKPatterns
    | DoAndIfThenElse
    | BlockArguments
    | RebindableSyntax
    | ConstraintKinds
    | PolyKinds
    | DataKinds
    | TypeData
    | InstanceSigs
    | ApplicativeDo
    | LinearTypes
    | RequiredTypeArguments
    | StandaloneDeriving
    | DeriveDataTypeable
    | AutoDeriveTypeable
    | DeriveFunctor
    | DeriveTraversable
    | DeriveFoldable
    | DeriveGeneric
    | DefaultSignatures
    | DeriveAnyClass
    | DeriveLift
    | DerivingStrategies
    | DerivingVia
    | TypeSynonymInstances
    | FlexibleContexts
    | FlexibleInstances
    | ConstrainedClassMethods
    | MultiParamTypeClasses
    | NullaryTypeClasses
    | FunctionalDependencies
    | UnicodeSyntax
    | ExistentialQuantification
    | MagicHash
    | EmptyDataDecls
    | KindSignatures
    | RoleAnnotations
    | ParallelListComp
    | TransformListComp
    | MonadComprehensions
    | GeneralizedNewtypeDeriving
    | RecursiveDo
    | PostfixOperators
    | TupleSections
    | PatternGuards
    | LiberalTypeSynonyms
    | RankNTypes
    | ImpredicativeTypes
    | TypeOperators
    | ExplicitNamespaces
    | PackageImports
    | ExplicitForAll
    | AlternativeLayoutRule
    | AlternativeLayoutRuleTransitional
    | DatatypeContexts
    | NondecreasingIndentation
    | RelaxedLayout
    | TraditionalRecordSyntax
    | LambdaCase
    | MultiWayIf
    | BinaryLiterals
    | NegativeLiterals
    | HexFloatLiterals
    | DuplicateRecordFields
    | OverloadedLabels
    | EmptyCase
    | PatternSynonyms
    | PartialTypeSignatures
    | NamedWildCards
    | StaticPointers
    | TypeApplications
    | Strict
    | StrictData
    | EmptyDataDeriving
    | NumericUnderscores
    | QuantifiedConstraints
    | StarIsType
    | ImportQualifiedPost
    | CUSKs
    | StandaloneKindSignatures
    | LexicalNegation
    | FieldSelectors
    | OverloadedRecordDot
    | OverloadedRecordUpdate
    | TypeAbstractions
    | ExtendedLiterals
    | ListTuplePuns
    | MultilineStrings
  type FamilyResultSig :: *
  data FamilyResultSig = NoSig | KindSig Kind | TyVarSig (TyVarBndr ())
  type FieldExp :: *
  type FieldExp = (Name, Exp)
  type FieldPat :: *
  type FieldPat = (Name, Pat)
  type Fixity :: *
  data Fixity = Fixity GHC.Internal.Types.Int FixityDirection
  type FixityDirection :: *
  data FixityDirection = InfixL | InfixR | InfixN
  type Foreign :: *
  data Foreign = ImportF Callconv Safety GHC.Internal.Base.String Name Type | ExportF Callconv GHC.Internal.Base.String Name Type
  type ForeignSrcLang :: *
  data ForeignSrcLang = LangC | LangCxx | LangObjc | LangObjcxx | LangAsm | LangJs | RawObject
  type FunDep :: *
  data FunDep = FunDep [Name] [Name]
  type Guard :: *
  data Guard = NormalG Exp | PatG [Stmt]
  type Info :: *
  data Info = ClassI Dec [InstanceDec] | ClassOpI Name Type ParentName | TyConI Dec | FamilyI Dec [InstanceDec] | PrimTyConI Name Arity Unlifted | DataConI Name Type ParentName | PatSynI Name PatSynType | VarI Name Type (GHC.Internal.Maybe.Maybe Dec) | TyVarI Name Type
  type InjectivityAnn :: *
  data InjectivityAnn = InjectivityAnn Name [Name]
  type Inline :: *
  data Inline = NoInline | Inline | Inlinable
  type InstanceDec :: *
  type InstanceDec = Dec
  type Kind :: *
  type Kind = Type
  type Lift :: forall (r :: GHC.Internal.Types.RuntimeRep). TYPE r -> Constraint
  class Lift t where
    lift :: forall (m :: * -> *). Quote m => t -> m Exp
    default lift :: forall (m :: * -> *). (r ~ GHC.Internal.Types.LiftedRep, Quote m) => t -> m Exp
    liftTyped :: forall (m :: * -> *). Quote m => t -> Code m t
    {-# MINIMAL liftTyped #-}
  type Lit :: *
  data Lit = CharL GHC.Internal.Types.Char | StringL GHC.Internal.Base.String | IntegerL GHC.Internal.Bignum.Integer.Integer | RationalL GHC.Internal.Real.Rational | IntPrimL GHC.Internal.Bignum.Integer.Integer | WordPrimL GHC.Internal.Bignum.Integer.Integer | FloatPrimL GHC.Internal.Real.Rational | DoublePrimL GHC.Internal.Real.Rational | StringPrimL [GHC.Internal.Word.Word8] | BytesPrimL Bytes | CharPrimL GHC.Internal.Types.Char
  type Loc :: *
  data Loc = Loc {loc_filename :: GHC.Internal.Base.String, loc_package :: GHC.Internal.Base.String, loc_module :: GHC.Internal.Base.String, loc_start :: CharPos, loc_end :: CharPos}
  type Match :: *
  data Match = Match Pat Body [Dec]
  type ModName :: *
  newtype ModName = ModName GHC.Internal.Base.String
  type Module :: *
  data Module = Module PkgName ModName
  type ModuleInfo :: *
  data ModuleInfo = ModuleInfo [Module]
  type Name :: *
  data Name = Name OccName NameFlavour
  type NameFlavour :: *
  data NameFlavour = NameS | NameQ ModName | NameU !Uniq | NameL !Uniq | NameG NameSpace PkgName ModName
  type NameIs :: *
  data NameIs = Alone | Applied | Infix
  type NameSpace :: *
  data NameSpace = VarName | DataName | TcClsName | FldName {fldParent :: !GHC.Internal.Base.String}
  type NamespaceSpecifier :: *
  data NamespaceSpecifier = NoNamespaceSpecifier | TypeNamespaceSpecifier | DataNamespaceSpecifier
  type OccName :: *
  newtype OccName = OccName GHC.Internal.Base.String
  type Overlap :: *
  data Overlap = Overlappable | Overlapping | Overlaps | Incoherent
  type ParentName :: *
  type ParentName = Name
  type Pat :: *
  data Pat = LitP Lit | VarP Name | TupP [Pat] | UnboxedTupP [Pat] | UnboxedSumP Pat SumAlt SumArity | ConP Name [Type] [Pat] | InfixP Pat Name Pat | UInfixP Pat Name Pat | ParensP Pat | TildeP Pat | BangP Pat | AsP Name Pat | WildP | RecP Name [FieldPat] | ListP [Pat] | SigP Pat Type | ViewP Exp Pat | TypeP Type | InvisP Type | OrP (GHC.Internal.Base.NonEmpty Pat)
  type PatSynArgs :: *
  data PatSynArgs = PrefixPatSyn [Name] | InfixPatSyn Name Name | RecordPatSyn [Name]
  type PatSynDir :: *
  data PatSynDir = Unidir | ImplBidir | ExplBidir [Clause]
  type PatSynType :: *
  type PatSynType = Type
  type Phases :: *
  data Phases = AllPhases | FromPhase GHC.Internal.Types.Int | BeforePhase GHC.Internal.Types.Int
  type PkgName :: *
  newtype PkgName = PkgName GHC.Internal.Base.String
  type Pragma :: *
  data Pragma = InlineP Name Inline RuleMatch Phases | OpaqueP Name | SpecialiseP Name Type (GHC.Internal.Maybe.Maybe Inline) Phases | SpecialiseEP (GHC.Internal.Maybe.Maybe [TyVarBndr ()]) [RuleBndr] Exp (GHC.Internal.Maybe.Maybe Inline) Phases | SpecialiseInstP Type | RuleP GHC.Internal.Base.String (GHC.Internal.Maybe.Maybe [TyVarBndr ()]) [RuleBndr] Exp Exp Phases | AnnP AnnTarget Exp | LineP GHC.Internal.Types.Int GHC.Internal.Base.String | CompleteP [Name] (GHC.Internal.Maybe.Maybe Name) | SCCP Name (GHC.Internal.Maybe.Maybe GHC.Internal.Base.String)
  type Pred :: *
  type Pred = Type
  type role Q nominal
  type Q :: * -> *
  newtype Q a = Q {unQ :: forall (m :: * -> *). Quasi m => m a}
  type Quasi :: (* -> *) -> Constraint
  class (GHC.Internal.Control.Monad.IO.Class.MonadIO m, GHC.Internal.Control.Monad.Fail.MonadFail m) => Quasi m where
    qNewName :: GHC.Internal.Base.String -> m Name
    qReport :: GHC.Internal.Types.Bool -> GHC.Internal.Base.String -> m ()
    qRecover :: forall a. m a -> m a -> m a
    qLookupName :: GHC.Internal.Types.Bool -> GHC.Internal.Base.String -> m (GHC.Internal.Maybe.Maybe Name)
    qReify :: Name -> m Info
    qReifyFixity :: Name -> m (GHC.Internal.Maybe.Maybe Fixity)
    qReifyType :: Name -> m Type
    qReifyInstances :: Name -> [Type] -> m [Dec]
    qReifyRoles :: Name -> m [Role]
    qReifyAnnotations :: forall a. GHC.Internal.Data.Data.Data a => AnnLookup -> m [a]
    qReifyModule :: Module -> m ModuleInfo
    qReifyConStrictness :: Name -> m [DecidedStrictness]
    qLocation :: m Loc
    qRunIO :: forall a. GHC.Internal.Types.IO a -> m a
    qGetPackageRoot :: m GHC.Internal.IO.FilePath
    qAddDependentFile :: GHC.Internal.IO.FilePath -> m ()
    qAddTempFile :: GHC.Internal.Base.String -> m GHC.Internal.IO.FilePath
    qAddTopDecls :: [Dec] -> m ()
    qAddForeignFilePath :: ForeignSrcLang -> GHC.Internal.Base.String -> m ()
    qAddModFinalizer :: Q () -> m ()
    qAddCorePlugin :: GHC.Internal.Base.String -> m ()
    qGetQ :: forall a. ghc-internal-9.1300.0:GHC.Internal.Data.Typeable.Internal.Typeable a => m (GHC.Internal.Maybe.Maybe a)
    qPutQ :: forall a. ghc-internal-9.1300.0:GHC.Internal.Data.Typeable.Internal.Typeable a => a -> m ()
    qIsExtEnabled :: Extension -> m GHC.Internal.Types.Bool
    qExtsEnabled :: m [Extension]
    qPutDoc :: DocLoc -> GHC.Internal.Base.String -> m ()
    qGetDoc :: DocLoc -> m (GHC.Internal.Maybe.Maybe GHC.Internal.Base.String)
    {-# MINIMAL qNewName, qReport, qRecover, qLookupName, qReify, qReifyFixity, qReifyType, qReifyInstances, qReifyRoles, qReifyAnnotations, qReifyModule, qReifyConStrictness, qLocation, qGetPackageRoot, qAddDependentFile, qAddTempFile, qAddTopDecls, qAddForeignFilePath, qAddModFinalizer, qAddCorePlugin, qGetQ, qPutQ, qIsExtEnabled, qExtsEnabled, qPutDoc, qGetDoc #-}
  type Quote :: (* -> *) -> Constraint
  class GHC.Internal.Base.Monad m => Quote m where
    newName :: GHC.Internal.Base.String -> m Name
    {-# MINIMAL newName #-}
  type Range :: *
  data Range = FromR Exp | FromThenR Exp Exp | FromToR Exp Exp | FromThenToR Exp Exp Exp
  type Role :: *
  data Role = NominalR | RepresentationalR | PhantomR | InferR
  type RuleBndr :: *
  data RuleBndr = RuleVar Name | TypedRuleVar Name Type
  type RuleMatch :: *
  data RuleMatch = ConLike | FunLike
  type Safety :: *
  data Safety = Unsafe | Safe | Interruptible
  type SourceStrictness :: *
  data SourceStrictness = NoSourceStrictness | SourceLazy | SourceStrict
  type SourceUnpackedness :: *
  data SourceUnpackedness = NoSourceUnpackedness | SourceNoUnpack | SourceUnpack
  type Specificity :: *
  data Specificity = SpecifiedSpec | InferredSpec
  type Stmt :: *
  data Stmt = BindS Pat Exp | LetS [Dec] | NoBindS Exp | ParS [[Stmt]] | RecS [Stmt]
  type Strict :: *
  type Strict = Bang
  type StrictType :: *
  type StrictType = BangType
  type SumAlt :: *
  type SumAlt = GHC.Internal.Types.Int
  type SumArity :: *
  type SumArity = GHC.Internal.Types.Int
  type role TExp nominal
  type TExp :: forall (r :: GHC.Internal.Types.RuntimeRep). TYPE r -> *
  newtype TExp a = TExp {unType :: Exp}
  type TyLit :: *
  data TyLit = NumTyLit GHC.Internal.Bignum.Integer.Integer | StrTyLit GHC.Internal.Base.String | CharTyLit GHC.Internal.Types.Char
  type TySynEqn :: *
  data TySynEqn = TySynEqn (GHC.Internal.Maybe.Maybe [TyVarBndr ()]) Type Type
  type TyVarBndr :: * -> *
  data TyVarBndr flag = PlainTV Name flag | KindedTV Name flag Kind
  type Type :: *
  data Type = ForallT [TyVarBndr Specificity] Cxt Type | ForallVisT [TyVarBndr ()] Type | AppT Type Type | AppKindT Type Kind | SigT Type Kind | VarT Name | ConT Name | PromotedT Name | InfixT Type Name Type | UInfixT Type Name Type | PromotedInfixT Type Name Type | PromotedUInfixT Type Name Type | ParensT Type | TupleT GHC.Internal.Types.Int | UnboxedTupleT GHC.Internal.Types.Int | UnboxedSumT SumArity | ArrowT | MulArrowT | EqualityT | ListT | PromotedTupleT GHC.Internal.Types.Int | PromotedNilT | PromotedConsT | StarT | ConstraintT | LitT TyLit | WildCardT | ImplicitParamT GHC.Internal.Base.String Type
  type TypeFamilyHead :: *
  data TypeFamilyHead = TypeFamilyHead Name [TyVarBndr BndrVis] FamilyResultSig (GHC.Internal.Maybe.Maybe InjectivityAnn)
  type Uniq :: *
  type Uniq = GHC.Internal.Bignum.Integer.Integer
  type Unlifted :: *
  type Unlifted = GHC.Internal.Types.Bool
  type VarBangType :: *
  type VarBangType = (Name, Bang, Type)
  type VarStrictType :: *
  type VarStrictType = VarBangType
  addCorePlugin :: GHC.Internal.Base.String -> Q ()
  addDependentFile :: GHC.Internal.IO.FilePath -> Q ()
  addForeignFile :: ForeignSrcLang -> GHC.Internal.Base.String -> Q ()
  addForeignFilePath :: ForeignSrcLang -> GHC.Internal.IO.FilePath -> Q ()
  addForeignSource :: ForeignSrcLang -> GHC.Internal.Base.String -> Q ()
  addModFinalizer :: Q () -> Q ()
  addTempFile :: GHC.Internal.Base.String -> Q GHC.Internal.IO.FilePath
  addTopDecls :: [Dec] -> Q ()
  addrToByteArray :: GHC.Internal.Types.Int -> GHC.Internal.Prim.Addr# -> Data.Array.Byte.ByteArray
  addrToByteArrayName :: Name
  badIO :: forall a. GHC.Internal.Base.String -> GHC.Internal.Types.IO a
  bindCode :: forall (m :: * -> *) a (r :: GHC.Internal.Types.RuntimeRep) (b :: TYPE r). GHC.Internal.Base.Monad m => m a -> (a -> Code m b) -> Code m b
  bindCode_ :: forall (m :: * -> *) a (r :: GHC.Internal.Types.RuntimeRep) (b :: TYPE r). GHC.Internal.Base.Monad m => m a -> Code m b -> Code m b
  cmpEq :: GHC.Internal.Types.Ordering -> GHC.Internal.Types.Bool
  compareBytes :: Bytes -> Bytes -> GHC.Internal.Types.Ordering
  counter :: GHC.Internal.IORef.IORef Uniq
  dataToCodeQ :: forall (m :: * -> *) a. (Quote m, GHC.Internal.Data.Data.Data a) => (forall b. GHC.Internal.Data.Data.Data b => b -> GHC.Internal.Maybe.Maybe (Code m b)) -> a -> Code m a
  dataToExpQ :: forall (m :: * -> *) a. (Quote m, GHC.Internal.Data.Data.Data a) => (forall b. GHC.Internal.Data.Data.Data b => b -> GHC.Internal.Maybe.Maybe (m Exp)) -> a -> m Exp
  dataToPatQ :: forall (m :: * -> *) a. (Quote m, GHC.Internal.Data.Data.Data a) => (forall b. GHC.Internal.Data.Data.Data b => b -> GHC.Internal.Maybe.Maybe (m Pat)) -> a -> m Pat
  dataToQa :: forall (m :: * -> *) a k q. (Quote m, GHC.Internal.Data.Data.Data a) => (Name -> k) -> (Lit -> m q) -> (k -> [m q] -> m q) -> (forall b. GHC.Internal.Data.Data.Data b => b -> GHC.Internal.Maybe.Maybe (m q)) -> a -> m q
  defaultFixity :: Fixity
  eqBytes :: Bytes -> Bytes -> GHC.Internal.Types.Bool
  extsEnabled :: Q [Extension]
  falseName :: Name
  getDoc :: DocLoc -> Q (GHC.Internal.Maybe.Maybe GHC.Internal.Base.String)
  getPackageRoot :: Q GHC.Internal.IO.FilePath
  getQ :: forall a. ghc-internal-9.1300.0:GHC.Internal.Data.Typeable.Internal.Typeable a => Q (GHC.Internal.Maybe.Maybe a)
  get_cons_names :: Con -> [Name]
  hoistCode :: forall (m :: * -> *) (n :: * -> *) (r :: GHC.Internal.Types.RuntimeRep) (a :: TYPE r). GHC.Internal.Base.Monad m => (forall x. m x -> n x) -> Code m a -> Code n a
  isExtEnabled :: Extension -> Q GHC.Internal.Types.Bool
  isInstance :: Name -> [Type] -> Q GHC.Internal.Types.Bool
  joinCode :: forall (m :: * -> *) (r :: GHC.Internal.Types.RuntimeRep) (a :: TYPE r). GHC.Internal.Base.Monad m => m (Code m a) -> Code m a
  justName :: Name
  leftName :: Name
  liftCode :: forall (r :: GHC.Internal.Types.RuntimeRep) (a :: TYPE r) (m :: * -> *). m (TExp a) -> Code m a
  liftData :: forall (m :: * -> *) a. (Quote m, GHC.Internal.Data.Data.Data a) => a -> m Exp
  liftDataTyped :: forall (m :: * -> *) a. (Quote m, GHC.Internal.Data.Data.Data a) => a -> Code m a
  liftString :: forall (m :: * -> *). Quote m => GHC.Internal.Base.String -> m Exp
  location :: Q Loc
  lookupName :: GHC.Internal.Types.Bool -> GHC.Internal.Base.String -> Q (GHC.Internal.Maybe.Maybe Name)
  lookupTypeName :: GHC.Internal.Base.String -> Q (GHC.Internal.Maybe.Maybe Name)
  lookupValueName :: GHC.Internal.Base.String -> Q (GHC.Internal.Maybe.Maybe Name)
  makeRelativeToProject :: GHC.Internal.IO.FilePath -> Q GHC.Internal.IO.FilePath
  manyName :: Name
  maxPrecedence :: GHC.Internal.Types.Int
  memcmp :: forall a b. GHC.Internal.Ptr.Ptr a -> GHC.Internal.Ptr.Ptr b -> GHC.Internal.Foreign.C.Types.CSize -> GHC.Internal.Types.IO GHC.Internal.Foreign.C.Types.CInt
  mkModName :: GHC.Internal.Base.String -> ModName
  mkName :: GHC.Internal.Base.String -> Name
  mkNameG :: NameSpace -> GHC.Internal.Base.String -> GHC.Internal.Base.String -> GHC.Internal.Base.String -> Name
  mkNameG_d :: GHC.Internal.Base.String -> GHC.Internal.Base.String -> GHC.Internal.Base.String -> Name
  mkNameG_fld :: GHC.Internal.Base.String -> GHC.Internal.Base.String -> GHC.Internal.Base.String -> GHC.Internal.Base.String -> Name
  mkNameG_tc :: GHC.Internal.Base.String -> GHC.Internal.Base.String -> GHC.Internal.Base.String -> Name
  mkNameG_v :: GHC.Internal.Base.String -> GHC.Internal.Base.String -> GHC.Internal.Base.String -> Name
  mkNameL :: GHC.Internal.Base.String -> Uniq -> Name
  mkNameQ :: GHC.Internal.Base.String -> GHC.Internal.Base.String -> Name
  mkNameS :: GHC.Internal.Base.String -> Name
  mkNameU :: GHC.Internal.Base.String -> Uniq -> Name
  mkOccName :: GHC.Internal.Base.String -> OccName
  mkPkgName :: GHC.Internal.Base.String -> PkgName
  mk_tup_name :: GHC.Internal.Types.Int -> NameSpace -> GHC.Internal.Types.Bool -> Name
  modString :: ModName -> GHC.Internal.Base.String
  nameBase :: Name -> GHC.Internal.Base.String
  nameModule :: Name -> GHC.Internal.Maybe.Maybe GHC.Internal.Base.String
  namePackage :: Name -> GHC.Internal.Maybe.Maybe GHC.Internal.Base.String
  nameSpace :: Name -> GHC.Internal.Maybe.Maybe NameSpace
  newDeclarationGroup :: Q [Dec]
  newNameIO :: GHC.Internal.Base.String -> GHC.Internal.Types.IO Name
  nonemptyName :: Name
  nothingName :: Name
  occString :: OccName -> GHC.Internal.Base.String
  oneName :: Name
  pkgString :: PkgName -> GHC.Internal.Base.String
  putDoc :: DocLoc -> GHC.Internal.Base.String -> Q ()
  putQ :: forall a. ghc-internal-9.1300.0:GHC.Internal.Data.Typeable.Internal.Typeable a => a -> Q ()
  recover :: forall a. Q a -> Q a -> Q a
  reify :: Name -> Q Info
  reifyAnnotations :: forall a. GHC.Internal.Data.Data.Data a => AnnLookup -> Q [a]
  reifyConStrictness :: Name -> Q [DecidedStrictness]
  reifyFixity :: Name -> Q (GHC.Internal.Maybe.Maybe Fixity)
  reifyInstances :: Name -> [Type] -> Q [InstanceDec]
  reifyModule :: Module -> Q ModuleInfo
  reifyRoles :: Name -> Q [Role]
  reifyType :: Name -> Q Type
  report :: GHC.Internal.Types.Bool -> GHC.Internal.Base.String -> Q ()
  reportError :: GHC.Internal.Base.String -> Q ()
  reportWarning :: GHC.Internal.Base.String -> Q ()
  rightName :: Name
  runIO :: forall a. GHC.Internal.Types.IO a -> Q a
  runQ :: forall (m :: * -> *) a. Quasi m => Q a -> m a
  sequenceQ :: forall (m :: * -> *) a. GHC.Internal.Base.Monad m => [m a] -> m [a]
  showName :: Name -> GHC.Internal.Base.String
  showName' :: NameIs -> Name -> GHC.Internal.Base.String
  thenCmp :: GHC.Internal.Types.Ordering -> GHC.Internal.Types.Ordering -> GHC.Internal.Types.Ordering
  trueName :: Name
  tupleDataName :: GHC.Internal.Types.Int -> Name
  tupleTypeName :: GHC.Internal.Types.Int -> Name
  unTypeCode :: forall (r :: GHC.Internal.Types.RuntimeRep) (a :: TYPE r) (m :: * -> *). Quote m => Code m a -> m Exp
  unTypeQ :: forall (r :: GHC.Internal.Types.RuntimeRep) (a :: TYPE r) (m :: * -> *). Quote m => m (TExp a) -> m Exp
  unboxedSumDataName :: SumAlt -> SumArity -> Name
  unboxedSumTypeName :: SumArity -> Name
  unboxedTupleDataName :: GHC.Internal.Types.Int -> Name
  unboxedTupleTypeName :: GHC.Internal.Types.Int -> Name
  unsafeCodeCoerce :: forall (r :: GHC.Internal.Types.RuntimeRep) (a :: TYPE r) (m :: * -> *). Quote m => m Exp -> Code m a
  unsafeTExpCoerce :: forall (r :: GHC.Internal.Types.RuntimeRep) (a :: TYPE r) (m :: * -> *). Quote m => m Exp -> m (TExp a)


-- Instances:
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.Bang -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.Clause -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.Con -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.Dec -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.DecidedStrictness -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.Exp -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.FamilyResultSig -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.Foreign -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.FunDep -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.Info -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.InjectivityAnn -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.Inline -- Defined in ‘GHC.Boot.TH.Ppr’
instance forall a. GHC.Boot.TH.Ppr.Ppr a => GHC.Boot.TH.Ppr.Ppr [a] -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.Lit -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.Loc -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.Match -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.Module -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.ModuleInfo -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.Name -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.Pat -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.PatSynArgs -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.PatSynDir -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.Phases -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.Pragma -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.Range -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.Role -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.RuleBndr -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.RuleMatch -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.SourceStrictness -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.SourceUnpackedness -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.Stmt -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.TyLit -- Defined in ‘GHC.Boot.TH.Ppr’
instance forall flag. GHC.Boot.TH.Ppr.PprFlag flag => GHC.Boot.TH.Ppr.Ppr (GHC.Internal.TH.Syntax.TyVarBndr flag) -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Internal.TH.Syntax.Type -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.Ppr GHC.Boot.TH.Ppr.TypeArg -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.PprFlag GHC.Internal.TH.Syntax.BndrVis -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.PprFlag GHC.Internal.TH.Syntax.Specificity -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Boot.TH.Ppr.PprFlag () -- Defined in ‘GHC.Boot.TH.Ppr’
instance GHC.Internal.Base.Applicative GHC.Internal.TH.Syntax.Q -- Defined in ‘GHC.Internal.TH.Syntax’
instance [safe] GHC.Internal.Base.Applicative GHC.Boot.TH.PprLib.PprM -- Defined in ‘GHC.Boot.TH.PprLib’
instance GHC.Internal.Base.Functor GHC.Internal.TH.Syntax.Q -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Base.Functor GHC.Internal.TH.Syntax.TyVarBndr -- Defined in ‘GHC.Internal.TH.Syntax’
instance [safe] GHC.Internal.Base.Functor GHC.Boot.TH.PprLib.PprM -- Defined in ‘GHC.Boot.TH.PprLib’
instance GHC.Internal.Base.Monad GHC.Internal.TH.Syntax.Q -- Defined in ‘GHC.Internal.TH.Syntax’
instance [safe] GHC.Internal.Base.Monad GHC.Boot.TH.PprLib.PprM -- Defined in ‘GHC.Boot.TH.PprLib’
instance forall a. GHC.Internal.Base.Monoid a => GHC.Internal.Base.Monoid (GHC.Internal.TH.Syntax.Q a) -- Defined in ‘GHC.Internal.TH.Syntax’
instance forall a. GHC.Internal.Base.Semigroup a => GHC.Internal.Base.Semigroup (GHC.Internal.TH.Syntax.Q a) -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.AnnLookup -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.AnnTarget -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Bang -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.BndrVis -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Body -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Bytes -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Callconv -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Clause -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Con -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Dec -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.DecidedStrictness -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.DerivClause -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.DerivStrategy -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.DocLoc -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Exp -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.FamilyResultSig -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Fixity -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.FixityDirection -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Foreign -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.FunDep -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Guard -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Info -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.InjectivityAnn -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Inline -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Lit -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Loc -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Match -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.ModName -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Module -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.ModuleInfo -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Name -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.NameFlavour -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.NameSpace -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.NamespaceSpecifier -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.OccName -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Overlap -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Pat -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.PatSynArgs -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.PatSynDir -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Phases -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.PkgName -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Pragma -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Range -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Role -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.RuleBndr -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.RuleMatch -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Safety -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.SourceStrictness -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.SourceUnpackedness -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Specificity -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Stmt -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.TyLit -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.TySynEqn -- Defined in ‘GHC.Internal.TH.Syntax’
instance forall flag. GHC.Internal.Classes.Eq flag => GHC.Internal.Classes.Eq (GHC.Internal.TH.Syntax.TyVarBndr flag) -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.Type -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.TH.Syntax.TypeFamilyHead -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Eq GHC.Internal.LanguageExtensions.Extension -- Defined in ‘GHC.Internal.LanguageExtensions’
instance GHC.Internal.Classes.Eq GHC.Internal.ForeignSrcLang.ForeignSrcLang -- Defined in ‘GHC.Internal.ForeignSrcLang’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.AnnLookup -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.AnnTarget -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Bang -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.BndrVis -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Body -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Bytes -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Callconv -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Clause -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Con -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Dec -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.DecidedStrictness -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.DerivClause -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.DerivStrategy -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.DocLoc -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Exp -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.FamilyResultSig -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Fixity -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.FixityDirection -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Foreign -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.FunDep -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Guard -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Info -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.InjectivityAnn -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Inline -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Lit -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Loc -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Match -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.ModName -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Module -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.ModuleInfo -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Name -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.NameFlavour -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.NameSpace -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.NamespaceSpecifier -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.OccName -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Overlap -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Pat -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.PatSynArgs -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.PatSynDir -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Phases -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.PkgName -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Pragma -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Range -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Role -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.RuleBndr -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.RuleMatch -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Safety -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.SourceStrictness -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.SourceUnpackedness -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Specificity -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Stmt -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.TyLit -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.TySynEqn -- Defined in ‘GHC.Internal.TH.Syntax’
instance forall flag. GHC.Internal.Classes.Ord flag => GHC.Internal.Classes.Ord (GHC.Internal.TH.Syntax.TyVarBndr flag) -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.Type -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.TH.Syntax.TypeFamilyHead -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Classes.Ord GHC.Internal.LanguageExtensions.Extension -- Defined in ‘GHC.Internal.LanguageExtensions’
instance GHC.Internal.Control.Monad.Fail.MonadFail GHC.Internal.TH.Syntax.Q -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Control.Monad.Fix.MonadFix GHC.Internal.TH.Syntax.Q -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Control.Monad.IO.Class.MonadIO GHC.Internal.TH.Syntax.Q -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.AnnLookup -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.AnnTarget -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Bang -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.BndrVis -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Body -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Bytes -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Callconv -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Clause -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Con -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Dec -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.DecidedStrictness -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.DerivClause -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.DerivStrategy -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.DocLoc -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Exp -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.FamilyResultSig -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Fixity -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.FixityDirection -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Foreign -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.FunDep -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Guard -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Info -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.InjectivityAnn -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Inline -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Lit -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Loc -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Match -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.ModName -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Module -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.ModuleInfo -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Name -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.NameFlavour -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.NameSpace -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.NamespaceSpecifier -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.OccName -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Overlap -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Pat -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.PatSynArgs -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.PatSynDir -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Phases -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.PkgName -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Pragma -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Range -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Role -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.RuleBndr -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.RuleMatch -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Safety -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.SourceStrictness -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.SourceUnpackedness -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Specificity -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Stmt -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.TyLit -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.TySynEqn -- Defined in ‘GHC.Internal.TH.Syntax’
instance forall flag. GHC.Internal.Data.Data.Data flag => GHC.Internal.Data.Data.Data (GHC.Internal.TH.Syntax.TyVarBndr flag) -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.Type -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Data.Data GHC.Internal.TH.Syntax.TypeFamilyHead -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Foldable.Foldable GHC.Internal.TH.Syntax.TyVarBndr -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Data.Traversable.Traversable GHC.Internal.TH.Syntax.TyVarBndr -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Enum.Bounded GHC.Internal.LanguageExtensions.Extension -- Defined in ‘GHC.Internal.LanguageExtensions’
instance GHC.Internal.Enum.Enum GHC.Internal.LanguageExtensions.Extension -- Defined in ‘GHC.Internal.LanguageExtensions’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.AnnLookup -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.AnnTarget -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Bang -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.BndrVis -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Body -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Bytes -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Callconv -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Clause -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Con -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Dec -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.DecidedStrictness -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.DerivClause -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.DerivStrategy -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.DocLoc -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Exp -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.FamilyResultSig -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Fixity -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.FixityDirection -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Foreign -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.FunDep -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Guard -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Info -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.InjectivityAnn -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Inline -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Lit -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Loc -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Match -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.ModName -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Module -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.ModuleInfo -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Name -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.NameFlavour -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.NameSpace -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.NamespaceSpecifier -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.OccName -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Overlap -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Pat -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.PatSynArgs -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.PatSynDir -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Phases -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.PkgName -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Pragma -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Range -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Role -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.RuleBndr -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.RuleMatch -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Safety -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.SourceStrictness -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.SourceUnpackedness -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Specificity -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Stmt -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.TyLit -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.TySynEqn -- Defined in ‘GHC.Internal.TH.Syntax’
instance forall flag. GHC.Internal.Generics.Generic (GHC.Internal.TH.Syntax.TyVarBndr flag) -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.Type -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.TH.Syntax.TypeFamilyHead -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Generics.Generic GHC.Internal.LanguageExtensions.Extension -- Defined in ‘GHC.Internal.LanguageExtensions’
instance GHC.Internal.Generics.Generic GHC.Internal.ForeignSrcLang.ForeignSrcLang -- Defined in ‘GHC.Internal.ForeignSrcLang’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.AnnLookup -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.AnnTarget -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Bang -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.BndrVis -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Body -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Bytes -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Callconv -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Clause -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Con -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Dec -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.DecidedStrictness -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.DerivClause -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.DerivStrategy -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.DocLoc -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Exp -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.FamilyResultSig -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Fixity -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.FixityDirection -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Foreign -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.FunDep -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Guard -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Info -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.InjectivityAnn -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Inline -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Lit -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Loc -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Match -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.ModName -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Module -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.ModuleInfo -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Name -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.NameFlavour -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.NameSpace -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.NamespaceSpecifier -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.OccName -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Overlap -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Pat -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.PatSynArgs -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.PatSynDir -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Phases -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.PkgName -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Pragma -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Range -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Role -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.RuleBndr -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.RuleMatch -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Safety -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.SourceStrictness -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.SourceUnpackedness -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Specificity -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Stmt -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.TyLit -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.TySynEqn -- Defined in ‘GHC.Internal.TH.Syntax’
instance forall flag. GHC.Internal.Show.Show flag => GHC.Internal.Show.Show (GHC.Internal.TH.Syntax.TyVarBndr flag) -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.Type -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.TH.Syntax.TypeFamilyHead -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.Show.Show GHC.Internal.LanguageExtensions.Extension -- Defined in ‘GHC.Internal.LanguageExtensions’
instance GHC.Internal.Show.Show GHC.Boot.TH.Ppr.ForallVisFlag -- Defined in ‘GHC.Boot.TH.Ppr’
instance [safe] GHC.Internal.Show.Show GHC.Boot.TH.PprLib.Doc -- Defined in ‘GHC.Boot.TH.PprLib’
instance GHC.Internal.Show.Show GHC.Internal.ForeignSrcLang.ForeignSrcLang -- Defined in ‘GHC.Internal.ForeignSrcLang’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.Prim.Addr# -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.AnnLookup -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.AnnTarget -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Bang -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.BndrVis -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Body -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.Types.Bool -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Bytes -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Callconv -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.Types.Char -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Clause -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Con -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Dec -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.DecidedStrictness -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.DerivClause -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.DerivStrategy -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.DocLoc -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.Types.Double -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a b. (GHC.Internal.TH.Lift.Lift a, GHC.Internal.TH.Lift.Lift b) => GHC.Internal.TH.Lift.Lift (GHC.Internal.Data.Either.Either a b) -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Exp -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.LanguageExtensions.Extension -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.FamilyResultSig -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Fixity -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.FixityDirection -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.Types.Float -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Foreign -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.ForeignSrcLang.ForeignSrcLang -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.FunDep -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Guard -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Info -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.InjectivityAnn -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Inline -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.Types.Int -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.Int.Int16 -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.Int.Int32 -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.Int.Int64 -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.Int.Int8 -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.Bignum.Integer.Integer -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a. GHC.Internal.TH.Lift.Lift a => GHC.Internal.TH.Lift.Lift [a] -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Lit -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Loc -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Match -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a. GHC.Internal.TH.Lift.Lift a => GHC.Internal.TH.Lift.Lift (GHC.Internal.Maybe.Maybe a) -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.ModName -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Module -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Name -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.NameFlavour -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.NameIs -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.NameSpace -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.NamespaceSpecifier -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.Bignum.Natural.Natural -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a. GHC.Internal.TH.Lift.Lift a => GHC.Internal.TH.Lift.Lift (GHC.Internal.Base.NonEmpty a) -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.OccName -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Overlap -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Pat -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.PatSynArgs -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.PatSynDir -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Phases -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.PkgName -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Pragma -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Range -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a. GHC.Internal.Real.Integral a => GHC.Internal.TH.Lift.Lift (GHC.Internal.Real.Ratio a) -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Role -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.RuleBndr -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.RuleMatch -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Safety -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.SourceStrictness -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.SourceUnpackedness -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Specificity -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Stmt -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a. GHC.Internal.TH.Lift.Lift (GHC.Internal.TH.Syntax.TExp a) -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a b. (GHC.Internal.TH.Lift.Lift a, GHC.Internal.TH.Lift.Lift b) => GHC.Internal.TH.Lift.Lift (a, b) -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a b c. (GHC.Internal.TH.Lift.Lift a, GHC.Internal.TH.Lift.Lift b, GHC.Internal.TH.Lift.Lift c) => GHC.Internal.TH.Lift.Lift (a, b, c) -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a b c d. (GHC.Internal.TH.Lift.Lift a, GHC.Internal.TH.Lift.Lift b, GHC.Internal.TH.Lift.Lift c, GHC.Internal.TH.Lift.Lift d) => GHC.Internal.TH.Lift.Lift (a, b, c, d) -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a b c d e. (GHC.Internal.TH.Lift.Lift a, GHC.Internal.TH.Lift.Lift b, GHC.Internal.TH.Lift.Lift c, GHC.Internal.TH.Lift.Lift d, GHC.Internal.TH.Lift.Lift e) => GHC.Internal.TH.Lift.Lift (a, b, c, d, e) -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a b c d e f. (GHC.Internal.TH.Lift.Lift a, GHC.Internal.TH.Lift.Lift b, GHC.Internal.TH.Lift.Lift c, GHC.Internal.TH.Lift.Lift d, GHC.Internal.TH.Lift.Lift e, GHC.Internal.TH.Lift.Lift f) => GHC.Internal.TH.Lift.Lift (a, b, c, d, e, f) -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a b c d e f g. (GHC.Internal.TH.Lift.Lift a, GHC.Internal.TH.Lift.Lift b, GHC.Internal.TH.Lift.Lift c, GHC.Internal.TH.Lift.Lift d, GHC.Internal.TH.Lift.Lift e, GHC.Internal.TH.Lift.Lift f, GHC.Internal.TH.Lift.Lift g) => GHC.Internal.TH.Lift.Lift (a, b, c, d, e, f, g) -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.TyLit -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.TySynEqn -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a. GHC.Internal.TH.Lift.Lift a => GHC.Internal.TH.Lift.Lift (GHC.Internal.TH.Syntax.TyVarBndr a) -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.Type -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.TH.Syntax.TypeFamilyHead -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift () -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.Base.Void -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.Types.Word -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.Word.Word16 -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.Word.Word32 -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.Word.Word64 -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.Word.Word8 -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.Prim.Double# -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.Prim.Float# -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.Prim.Int# -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a b. (GHC.Internal.TH.Lift.Lift a, GHC.Internal.TH.Lift.Lift b) => GHC.Internal.TH.Lift.Lift (# a | b #) -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a b c. (GHC.Internal.TH.Lift.Lift a, GHC.Internal.TH.Lift.Lift b, GHC.Internal.TH.Lift.Lift c) => GHC.Internal.TH.Lift.Lift (# a | b | c #) -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a b c d. (GHC.Internal.TH.Lift.Lift a, GHC.Internal.TH.Lift.Lift b, GHC.Internal.TH.Lift.Lift c, GHC.Internal.TH.Lift.Lift d) => GHC.Internal.TH.Lift.Lift (# a | b | c | d #) -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a b c d e. (GHC.Internal.TH.Lift.Lift a, GHC.Internal.TH.Lift.Lift b, GHC.Internal.TH.Lift.Lift c, GHC.Internal.TH.Lift.Lift d, GHC.Internal.TH.Lift.Lift e) => GHC.Internal.TH.Lift.Lift (# a | b | c | d | e #) -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a b c d e f. (GHC.Internal.TH.Lift.Lift a, GHC.Internal.TH.Lift.Lift b, GHC.Internal.TH.Lift.Lift c, GHC.Internal.TH.Lift.Lift d, GHC.Internal.TH.Lift.Lift e, GHC.Internal.TH.Lift.Lift f) => GHC.Internal.TH.Lift.Lift (# a | b | c | d | e | f #) -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a b c d e f g. (GHC.Internal.TH.Lift.Lift a, GHC.Internal.TH.Lift.Lift b, GHC.Internal.TH.Lift.Lift c, GHC.Internal.TH.Lift.Lift d, GHC.Internal.TH.Lift.Lift e, GHC.Internal.TH.Lift.Lift f, GHC.Internal.TH.Lift.Lift g) => GHC.Internal.TH.Lift.Lift (# a | b | c | d | e | f | g #) -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a. GHC.Internal.TH.Lift.Lift a => GHC.Internal.TH.Lift.Lift (# a #) -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a b. (GHC.Internal.TH.Lift.Lift a, GHC.Internal.TH.Lift.Lift b) => GHC.Internal.TH.Lift.Lift (# a, b #) -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a b c. (GHC.Internal.TH.Lift.Lift a, GHC.Internal.TH.Lift.Lift b, GHC.Internal.TH.Lift.Lift c) => GHC.Internal.TH.Lift.Lift (# a, b, c #) -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a b c d. (GHC.Internal.TH.Lift.Lift a, GHC.Internal.TH.Lift.Lift b, GHC.Internal.TH.Lift.Lift c, GHC.Internal.TH.Lift.Lift d) => GHC.Internal.TH.Lift.Lift (# a, b, c, d #) -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a b c d e. (GHC.Internal.TH.Lift.Lift a, GHC.Internal.TH.Lift.Lift b, GHC.Internal.TH.Lift.Lift c, GHC.Internal.TH.Lift.Lift d, GHC.Internal.TH.Lift.Lift e) => GHC.Internal.TH.Lift.Lift (# a, b, c, d, e #) -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a b c d e f. (GHC.Internal.TH.Lift.Lift a, GHC.Internal.TH.Lift.Lift b, GHC.Internal.TH.Lift.Lift c, GHC.Internal.TH.Lift.Lift d, GHC.Internal.TH.Lift.Lift e, GHC.Internal.TH.Lift.Lift f) => GHC.Internal.TH.Lift.Lift (# a, b, c, d, e, f #) -- Defined in ‘GHC.Internal.TH.Lift’
instance forall a b c d e f g. (GHC.Internal.TH.Lift.Lift a, GHC.Internal.TH.Lift.Lift b, GHC.Internal.TH.Lift.Lift c, GHC.Internal.TH.Lift.Lift d, GHC.Internal.TH.Lift.Lift e, GHC.Internal.TH.Lift.Lift f, GHC.Internal.TH.Lift.Lift g) => GHC.Internal.TH.Lift.Lift (# a, b, c, d, e, f, g #) -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift (# #) -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.Prim.Char# -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Lift.Lift GHC.Internal.Prim.Word# -- Defined in ‘GHC.Internal.TH.Lift’
instance GHC.Internal.TH.Syntax.Quasi GHC.Internal.Types.IO -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.TH.Syntax.Quasi GHC.Internal.TH.Syntax.Q -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.TH.Syntax.Quote GHC.Internal.Types.IO -- Defined in ‘GHC.Internal.TH.Syntax’
instance GHC.Internal.TH.Syntax.Quote GHC.Internal.TH.Syntax.Q -- Defined in ‘GHC.Internal.TH.Syntax’
instance [safe] Language.Haskell.TH.Lib.DefaultBndrFlag GHC.Internal.TH.Syntax.BndrVis -- Defined in ‘Language.Haskell.TH.Lib’
instance [safe] Language.Haskell.TH.Lib.DefaultBndrFlag GHC.Internal.TH.Syntax.Specificity -- Defined in ‘Language.Haskell.TH.Lib’
instance [safe] Language.Haskell.TH.Lib.DefaultBndrFlag () -- Defined in ‘Language.Haskell.TH.Lib’
