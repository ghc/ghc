TH_pragma.hs:(6,2)-(8,28): Splicing declarations
    [d| foo :: Int -> Int
        {-# NOINLINE foo #-}
        foo x = x + 1 |]
  ======>
    foo :: Int -> Int
    {-# NOINLINE foo #-}
    foo x = (x + 1)
TH_pragma.hs:(10,2)-(12,33): Splicing declarations
    [d| bar :: Num a => a -> a
        {-# SPECIALISE INLINE [~1] bar :: Float -> Float #-}
        bar x = x * 10 |]
  ======>
    bar :: Num a => a -> a
    {-# SPECIALISE INLINE [~1] bar :: Float -> Float #-}
    bar x = (x * 10)
TH_pragma.hs:(14,2)-(16,33): Splicing declarations
    [d| baz :: Num a => a -> a
        {-# SPECIALISE INLINE [~1] baz @Double #-}
        baz x = x * 10 |]
  ======>
    baz :: Num a => a -> a
    {-# SPECIALISE INLINE [~1] baz @Double #-}
    baz x = (x * 10)
