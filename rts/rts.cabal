cabal-version: 3.8
name: rts
version: 1.0.3
synopsis: The GHC runtime system
description:
    The GHC runtime system.

    Code produced by GHC links this library to provide missing functionality
    that cannot be written in Haskell itself.
license: BSD-3-Clause
maintainer: glasgow-haskell-users@haskell.org
build-type: Configure

extra-source-files:
    configure
    config.guess
    config.sub
    ghcplatform.h.top.in
    ghcplatform.h.bottom
    ghcautoconf.h.autoconf.in
    configure.ac
    external-symbols.list.in
    rts.buildinfo.in
    linker/ELFRelocs/AArch64.def
    linker/ELFRelocs/ARM.def
    linker/ELFRelocs/i386.def
    linker/ELFRelocs/x86_64.def
    win32/libHSffi.def
    win32/libHSghc-internal.def
    win32/libHSghc-prim.def
    posix/ticker/Pthread.c
    posix/ticker/Setitimer.c
    posix/ticker/TimerCreate.c
    posix/ticker/TimerFd.c
    -- headers files that are not installed by the rts package but only used to
    -- build the rts C code
    xxhash.h
    adjustor/AdjustorPool.h
    Adjustor.h
    Apply.h
    Arena.h
    ARMOutlineAtomicsSymbols.h
    AutoApply.h
    AutoApplyVecs.h
    BeginPrivate.h
    Capability.h
    CheckUnload.h
    CheckVectorSupport.h
    CloneStack.h
    Continuation.h
    Disassembler.h
    EndPrivate.h
    eventlog/EventLog.h
    Excn.h
    FileLock.h
    ForeignExports.h
    fs_rts.h
    fs.h
    GetEnv.h
    GetTime.h
    Globals.h
    Hash.h
    hooks/Hooks.h
    include/Cmm.h
    include/ghcconfig.h
    include/HsFFI.h
    include/MachDeps.h
    include/rts/Adjustor.h
    include/RtsAPI.h
    include/rts/BlockSignals.h
    include/rts/Bytecodes.h
    include/rts/Config.h
    include/rts/Constants.h
    include/rts/EventLogFormat.h
    include/rts/EventLogWriter.h
    include/rts/ExecPage.h
    include/rts/FileLock.h
    include/rts/Flags.h
    include/rts/ForeignExports.h
    include/rts/GetTime.h
    include/rts/ghc_ffi.h
    include/rts/Globals.h
    include/Rts.h
    include/rts/Hpc.h
    include/rts/IOInterface.h
    include/rts/IPE.h
    include/rts/Libdw.h
    include/rts/LibdwPool.h
    include/rts/Linker.h
    include/rts/Main.h
    include/rts/Messages.h
    include/rts/NonMoving.h
    include/rts/OSThreads.h
    include/rts/Parallel.h
    include/rts/PosixSource.h
    include/rts/PrimFloat.h
    include/rts/prof/CCS.h
    include/rts/prof/Heap.h
    include/rts/Profiling.h
    include/rts/prof/LDV.h
    include/rts/Signals.h
    include/rts/SpinLock.h
    include/rts/StableName.h
    include/rts/StablePtr.h
    include/rts/StaticPtrTable.h
    include/rts/storage/Block.h
    include/rts/storage/ClosureMacros.h
    include/rts/storage/Closures.h
    include/rts/storage/ClosureTypes.h
    include/rts/storage/FunTypes.h
    include/rts/storage/GC.h
    include/rts/storage/HeapAlloc.h
    include/rts/storage/Heap.h
    include/rts/storage/InfoTables.h
    include/rts/storage/MBlock.h
    include/rts/storage/TSO.h
    include/rts/Threads.h
    include/rts/Ticky.h
    include/rts/Time.h
    include/rts/Timer.h
    include/rts/TSANUtils.h
    include/rts/TTY.h
    include/rts/Types.h
    include/rts/Utils.h
    include/stg/DLL.h
    include/Stg.h
    include/stg/MachRegs/arm32.h
    include/stg/MachRegs/arm64.h
    include/stg/MachRegsForHost.h
    include/stg/MachRegs.h
    include/stg/MachRegs/loongarch64.h
    include/stg/MachRegs/ppc.h
    include/stg/MachRegs/riscv64.h
    include/stg/MachRegs/s390x.h
    include/stg/MachRegs/wasm32.h
    include/stg/MachRegs/x86.h
    include/stg/MiscClosures.h
    include/stg/Prim.h
    include/stg/Regs.h
    include/stg/SMP.h
    include/stg/Ticky.h
    include/stg/Types.h
    Interpreter.h
    IOManager.h
    IOManagerInternals.h
    IPE.h
    Jumps.h
    LdvProfile.h
    Libdw.h
    LibdwPool.h
    linker/CacheFlush.h
    linker/elf_compat.h
    linker/elf_got.h
    linker/Elf.h
    linker/elf_plt_aarch64.h
    linker/elf_plt_arm.h
    linker/elf_plt.h
    linker/elf_plt_riscv64.h
    linker/elf_reloc_aarch64.h
    linker/elf_reloc.h
    linker/elf_reloc_riscv64.h
    linker/ElfTypes.h
    linker/elf_util.h
    linker/InitFini.h
    LinkerInternals.h
    linker/LoadNativeObjPosix.h
    linker/M32Alloc.h
    linker/MachO.h
    linker/macho/plt_aarch64.h
    linker/macho/plt.h
    linker/MachOTypes.h
    linker/MMap.h
    linker/PEi386.h
    linker/PEi386Types.h
    linker/SymbolExtras.h
    linker/util.h
    linker/Wasm32Types.h
    Messages.h
    PathUtils.h
    Pool.h
    posix/Clock.h
    posix/Select.h
    posix/Signals.h
    posix/TTY.h
    Prelude.h
    Printer.h
    ProfHeap.h
    ProfHeapInternal.h
    ProfilerReport.h
    ProfilerReportJson.h
    Profiling.h
    Proftimer.h
    RaiseAsync.h
    ReportMemoryMap.h
    RetainerProfile.h
    RetainerSet.h
    RtsDllMain.h
    RtsFlags.h
    RtsSignals.h
    RtsSymbolInfo.h
    RtsSymbols.h
    RtsUtils.h
    Schedule.h
    sm/BlockAlloc.h
    sm/CNF.h
    sm/Compact.h
    sm/Evac.h
    sm/GC.h
    sm/GCTDecl.h
    sm/GCThread.h
    sm/GCUtils.h
    sm/HeapUtils.h
    sm/MarkStack.h
    sm/MarkWeak.h
    sm/NonMovingAllocate.h
    sm/NonMovingCensus.h
    sm/NonMoving.h
    sm/NonMovingMark.h
    sm/NonMovingScav.h
    sm/NonMovingShortcut.h
    sm/NonMovingSweep.h
    sm/OSMem.h
    SMPClosureOps.h
    sm/Sanity.h
    sm/Scav.h
    sm/ShouldCompact.h
    sm/Storage.h
    sm/Sweep.h
    Sparks.h
    StableName.h
    StablePtr.h
    StaticPtrTable.h
    Stats.h
    StgPrimFloat.h
    StgRun.h
    STM.h
    Task.h
    ThreadLabels.h
    ThreadPaused.h
    Threads.h
    Ticker.h
    Ticky.h
    Timer.h
    TopHandler.h
    Trace.h
    TraverseHeap.h
    Updates.h
    Weak.h
    win32/AsyncMIO.h
    win32/AsyncWinIO.h
    win32/AwaitEvent.h
    win32/ConsoleHandler.h
    win32/MIOManager.h
    win32/ThrIOManager.h
    win32/veh_excn.h
    win32/WorkQueue.h
    WSDeque.h

extra-tmp-files:
    autom4te.cache
    rts.buildinfo
    config.log
    config.status

source-repository head
    type:     git
    location: https://gitlab.haskell.org/ghc/ghc.git
    subdir:   rts

flag libm
  default: False
  manual: True
flag librt
  default: False
  manual: True
flag libdl
  default: False
  manual: True
flag libffi-adjustors
  default: False
  manual: True
flag need-pthread
  default: False
  manual: True
flag libbfd
  default: False
  manual: True
flag need-atomic
  default: False
  manual: True
flag libdw
  default: False
  manual: True
flag libnuma
  default: False
  manual: True
flag libzstd
  default: False
  manual: True
flag static-libzstd
  default: False
  manual: True
flag leading-underscore
  default: False
  manual: True
flag unregisterised
  default: False
  manual: True
flag tables-next-to-code
  default: False
  manual: True
flag smp
  default: True
  manual: True
flag find-ptr
  default: False
  manual: True
-- Some cabal flags used to control the flavours we want to produce
-- for libHSrts in hadrian. By default, we just produce vanilla and
-- threaded. The flags "compose": if you enable debug and profiling,
-- you will produce vanilla, _thr, _debug, _p but also _thr_p,
-- _thr_debug_p and so on.
flag profiling
  default: False
  manual: True
flag debug
  default: False
  manual: True
flag dynamic
  default: False
  manual: True
flag threaded
  default: False
  manual: True
flag thread-sanitizer
  description:
    Enable checking for data races using the ThreadSanitizer (TSAN)
    mechanism supported by GCC and Clang. See Note [ThreadSanitizer]
    in @rts/include/rts/TSANUtils.h@.
  default: False
  manual: True

library
    -- rts is a wired in package and
    -- expects the unit-id to be
    -- set without version
    ghc-options: -this-unit-id rts
    cmm-options: -this-unit-id rts

    exposed: True
    exposed-modules:

    autogen-includes:
      ghcautoconf.h
      ghcplatform.h
      DerivedConstants.h
      rts/EventLogConstants.h
      rts/EventTypes.h

    install-includes:
      ghcautoconf.h
      ghcplatform.h
      DerivedConstants.h
      rts/EventLogConstants.h
      rts/EventTypes.h

    if arch(javascript)

      include-dirs: include

      js-sources:
        js/config.js
        js/structs.js
        js/arith.js
        js/compact.js
        js/debug.js
        js/enum.js
        js/environment.js
        js/eventlog.js
        js/gc.js
        js/goog.js
        js/hscore.js
        js/md5.js
        js/mem.js
        js/node-exports.js
        js/object.js
        js/profiling.js
        js/rts.js
        js/stableptr.js
        js/staticpointer.js
        js/stm.js
        js/string.js
        js/thread.js
        js/unicode.js
        js/verify.js
        js/weak.js
        js/globals.js
        js/time.js

      install-includes: HsFFI.h MachDeps.h Rts.h RtsAPI.h Stg.h
                        ghcautoconf.h
                        DerivedConstants.h
                        ghcplatform.h
                        ghcconfig.h
                        ghcversion.h
                        stg/MachRegs.h
                        stg/MachRegs/arm32.h
                        stg/MachRegs/arm64.h
                        stg/MachRegs/loongarch64.h
                        stg/MachRegs/ppc.h
                        stg/MachRegs/riscv64.h
                        stg/MachRegs/s390x.h
                        stg/MachRegs/wasm32.h
                        stg/MachRegs/x86.h
                        stg/MachRegsForHost.h
                        stg/Types.h

    else
      -- Here we declare several flavours to be available when passing the
      -- suitable (combination of) flag(s) when configuring the RTS from hadrian,
      -- using Cabal.
      if flag(threaded)
        extra-library-flavours: _thr
        if flag(dynamic)
          extra-dynamic-library-flavours: _thr

      if flag(profiling)
        extra-library-flavours: _p
        if flag(threaded)
          extra-library-flavours: _thr_p
        if flag(debug)
          extra-library-flavours: _debug_p
          if flag(threaded)
            extra-library-flavours: _thr_debug_p
        if flag(dynamic)
          extra-dynamic-library-flavours: _p
          if flag(threaded)
            extra-dynamic-library-flavours: _thr_p
          if flag(debug)
            extra-dynamic-library-flavours: _debug_p
            if flag(threaded)
              extra-dynamic-library-flavours: _thr_debug_p

      if flag(debug)
        extra-library-flavours: _debug
        if flag(dynamic)
          extra-dynamic-library-flavours: _debug
        if flag(threaded)
          extra-library-flavours: _thr_debug
          if flag(dynamic)
            extra-dynamic-library-flavours: _thr_debug

      if flag(thread-sanitizer)
        cc-options: -fsanitize=thread
        ld-options: -fsanitize=thread

      if os(linux)
         -- the RTS depends upon libc. while this dependency is generally
         -- implicitly added by `cc`, we must explicitly add it here to ensure
         -- that it is ordered correctly with libpthread, since ghc-internal.cabal
         -- also explicitly lists libc. See #19029.
         extra-libraries: c
      if flag(libm)
         -- for ldexp()
         extra-libraries: m
      if flag(librt)
         extra-libraries: rt
      if flag(libdl)
         extra-libraries: dl
      if os(windows)
         extra-libraries:
            -- for the linker
            wsock32 gdi32 winmm
            -- for crash dump
            dbghelp
            -- for process information
            psapi
         -- TODO: Hadrian will use this cabal file, so drop WINVER from Hadrian's configs.
         -- Minimum supported Windows version.
         -- These numbers can be found at:
         --  https://msdn.microsoft.com/en-us/library/windows/desktop/aa383745(v=vs.85).aspx
         -- If we're compiling on windows, enforce that we only support Windows 7+
         -- Adding this here means it doesn't have to be done in individual .c files
         -- and also centralizes the versioning.
         cpp-options: -D_WIN32_WINNT=0x06010000
         cc-options: -D_WIN32_WINNT=0x06010000
      if flag(need-pthread)
         -- for pthread_getthreadid_np, pthread_create, ...
         extra-libraries: pthread
      if flag(need-atomic)
         -- for sub-word-sized atomic operations (#19119)
         extra-libraries: atomic
      if flag(libbfd)
         -- for debugging
         extra-libraries: bfd iberty
      if flag(libdw)
         -- for backtraces
         extra-libraries: elf dw
      if flag(libnuma)
         extra-libraries: numa
      if flag(libzstd)
         if flag(static-libzstd)
            if os(darwin)
               buildable: False
            else
               extra-libraries: :libzstd.a
         else
            extra-libraries: zstd
      if !flag(smp)
         cpp-options: -DNOSMP

      include-dirs: include
      -- TODO: move internal headers into include/private?
      include-dirs: .
      includes: Rts.h
      install-includes: Cmm.h HsFFI.h MachDeps.h Jumps.h Rts.h RtsAPI.h RtsSymbols.h Stg.h
                        ghcconfig.h ghcversion.h
                        -- ^ generated
                        rts/ghc_ffi.h
                        rts/Adjustor.h
                        rts/ExecPage.h
                        rts/BlockSignals.h
                        rts/Bytecodes.h
                        rts/Config.h
                        rts/Constants.h
                        rts/EventLogFormat.h
                        rts/EventLogWriter.h
                        rts/FileLock.h
                        rts/Flags.h
                        rts/ForeignExports.h
                        rts/GetTime.h
                        rts/Globals.h
                        rts/Hpc.h
                        rts/IOInterface.h
                        rts/Libdw.h
                        rts/LibdwPool.h
                        rts/Linker.h
                        rts/Main.h
                        rts/Messages.h
                        rts/NonMoving.h
                        rts/OSThreads.h
                        rts/Parallel.h
                        rts/PrimFloat.h
                        rts/Profiling.h
                        rts/IPE.h
                        rts/PosixSource.h
                        rts/Signals.h
                        rts/SpinLock.h
                        rts/StableName.h
                        rts/StablePtr.h
                        rts/StaticPtrTable.h
                        rts/TTY.h
                        rts/Threads.h
                        rts/Ticky.h
                        rts/Time.h
                        rts/Timer.h
                        rts/TSANUtils.h
                        rts/Types.h
                        rts/Utils.h
                        rts/prof/CCS.h
                        rts/prof/Heap.h
                        rts/prof/LDV.h
                        rts/storage/Block.h
                        rts/storage/ClosureMacros.h
                        rts/storage/ClosureTypes.h
                        rts/storage/Closures.h
                        rts/storage/FunTypes.h
                        rts/storage/Heap.h
                        rts/storage/HeapAlloc.h
                        rts/storage/GC.h
                        rts/storage/InfoTables.h
                        rts/storage/MBlock.h
                        rts/storage/TSO.h
                        stg/DLL.h
                        stg/MachRegs.h
                        stg/MachRegs/arm32.h
                        stg/MachRegs/arm64.h
                        stg/MachRegs/loongarch64.h
                        stg/MachRegs/ppc.h
                        stg/MachRegs/riscv64.h
                        stg/MachRegs/s390x.h
                        stg/MachRegs/wasm32.h
                        stg/MachRegs/x86.h
                        stg/MachRegsForHost.h
                        stg/MiscClosures.h
                        stg/Prim.h
                        stg/Regs.h
                        stg/SMP.h
                        stg/Ticky.h
                        stg/Types.h

      if os(osx)
        ld-options: "-Wl,-search_paths_first"
                    -- See Note [Undefined symbols in the RTS]
                    "-Wl,-undefined,dynamic_lookup"
        if !arch(x86_64) && !arch(aarch64)
           ld-options: -read_only_relocs warning

      cmm-sources:
        Apply.cmm
        Compact.cmm
        ContinuationOps.cmm
        Exception.cmm
        HeapStackCheck.cmm
        Jumps_D.cmm
        Jumps_V16.cmm
        PrimOps.cmm
        StgMiscClosures.cmm
        StgStartup.cmm
        StgStdThunks.cmm
        Updates.cmm

      autogen-cmm-sources:
        AutoApply.cmm
        AutoApply_V16.cmm

      if arch(x86_64)
        cmm-sources:
          Jumps_V32.cmm (-mavx2)
          Jumps_V64.cmm (-mavx512f)
        autogen-cmm-sources:
          AutoApply_V32.cmm (-mavx2)
          AutoApply_V64.cmm (-mavx512f)
      else
        cmm-sources:
          Jumps_V32.cmm
          Jumps_V64.cmm
        autogen-cmm-sources:
          AutoApply_V32.cmm
          AutoApply_V64.cmm

      -- we always link against libffi, even without libffi-adjustors enabled.
      -- libffi is used by the Interpreter and some of its symbols are declared
      -- in RtsSymbols.c
      extra-libraries: ffi
      extra-libraries-static: ffi

      -- Adjustor stuff
      if flag(libffi-adjustors)
        c-sources: adjustor/LibffiAdjustor.c
      else
        -- Use GHC's native adjustors
        if arch(i386)
          asm-sources: adjustor/Nativei386Asm.S
          c-sources: adjustor/Nativei386.c
        if arch(x86_64)
          if os(mingw32)
            asm-sources: adjustor/NativeAmd64MingwAsm.S
            c-sources: adjustor/NativeAmd64Mingw.c
          else
            asm-sources: adjustor/NativeAmd64Asm.S
            c-sources: adjustor/NativeAmd64.c
        -- fall back to the LibffiAdjustor if neither i386, or x86_64
        if !arch(x86_64) && !arch(i386)
          c-sources: adjustor/LibffiAdjustor.c

      -- Use assembler STG entrypoint on architectures where it is used
      if arch(ppc) || arch(ppc64) || arch(s390x) || arch(riscv64) || arch(loongarch64)
        asm-sources: StgCRunAsm.S

      c-sources: Adjustor.c
                 adjustor/AdjustorPool.c
                 ExecPage.c
                 Arena.c
                 Capability.c
                 CheckUnload.c
                 CheckVectorSupport.c
                 CloneStack.c
                 ClosureFlags.c
                 ClosureSize.c
                 Continuation.c
                 Disassembler.c
                 FileLock.c
                 ForeignExports.c
                 Globals.c
                 Hash.c
                 Heap.c
                 Hpc.c
                 HsFFI.c
                 Inlines.c
                 Interpreter.c
                 IOManager.c
                 LdvProfile.c
                 Libdw.c
                 LibdwPool.c
                 Linker.c
                 ReportMemoryMap.c
                 Messages.c
                 OldARMAtomic.c
                 PathUtils.c
                 Pool.c
                 Printer.c
                 ProfHeap.c
                 ProfilerReport.c
                 ProfilerReportJson.c
                 Profiling.c
                 IPE.c
                 Proftimer.c
                 RaiseAsync.c
                 RetainerProfile.c
                 RetainerSet.c
                 RtsAPI.c
                 RtsDllMain.c
                 RtsFlags.c
                 RtsMain.c
                 RtsMessages.c
                 RtsStartup.c
                 RtsSymbolInfo.c
                 RtsSymbols.c
                 RtsUtils.c
                 STM.c
                 Schedule.c
                 Sparks.c
                 SpinLock.c
                 StableName.c
                 StablePtr.c
                 StaticPtrTable.c
                 Stats.c
                 StgCRun.c
                 StgPrimFloat.c
                 Task.c
                 ThreadLabels.c
                 ThreadPaused.c
                 Threads.c
                 Ticky.c
                 Timer.c
                 TopHandler.c
                 Trace.c
                 TraverseHeap.c
                 TraverseHeapTest.c
                 TSANUtils.c
                 WSDeque.c
                 Weak.c
                 ZeroSlop.c
                 eventlog/EventLog.c
                 eventlog/EventLogWriter.c
                 hooks/FlagDefaults.c
                 hooks/LongGCSync.c
                 hooks/MallocFail.c
                 hooks/OnExit.c
                 hooks/OutOfHeap.c
                 hooks/StackOverflow.c
                 linker/CacheFlush.c
                 linker/Elf.c
                 linker/InitFini.c
                 linker/LoadArchive.c
                 linker/LoadNativeObjPosix.c
                 linker/M32Alloc.c
                 linker/MMap.c
                 linker/MachO.c
                 linker/macho/plt.c
                 linker/macho/plt_aarch64.c
                 linker/ProddableBlocks.c
                 linker/PEi386.c
                 linker/SymbolExtras.c
                 linker/elf_got.c
                 linker/elf_plt.c
                 linker/elf_plt_aarch64.c
                 linker/elf_plt_riscv64.c
                 linker/elf_plt_arm.c
                 linker/elf_reloc.c
                 linker/elf_reloc_aarch64.c
                 linker/elf_reloc_riscv64.c
                 linker/elf_tlsgd.c
                 linker/elf_util.c
                 sm/BlockAlloc.c
                 sm/CNF.c
                 sm/Compact.c
                 sm/Evac.c
                 sm/Evac_thr.c
                 sm/GC.c
                 sm/GCAux.c
                 sm/GCUtils.c
                 sm/MBlock.c
                 sm/MarkWeak.c
                 sm/NonMoving.c
                 sm/NonMovingAllocate.c
                 sm/NonMovingCensus.c
                 sm/NonMovingMark.c
                 sm/NonMovingScav.c
                 sm/NonMovingShortcut.c
                 sm/NonMovingSweep.c
                 sm/Sanity.c
                 sm/Scav.c
                 sm/Scav_thr.c
                 sm/Storage.c
                 sm/Sweep.c
                 fs.c
                 -- I wish we had wildcards..., this would be:
                 -- *.c hooks/**/*.c sm/**/*.c eventlog/**/*.c linker/**/*.c

      if os(windows)
         c-sources: win32/AsyncMIO.c
                    win32/AsyncWinIO.c
                    win32/AwaitEvent.c
                    win32/ConsoleHandler.c
                    win32/GetEnv.c
                    win32/GetTime.c
                    win32/MIOManager.c
                    win32/OSMem.c
                    win32/OSThreads.c
                    win32/ThrIOManager.c
                    win32/Ticker.c
                    win32/WorkQueue.c
                    win32/veh_excn.c
                    -- win32/**/*.c
      elif arch(wasm32)
        asm-sources: wasm/Wasm.S
        c-sources: wasm/StgRun.c
                   wasm/GetTime.c
                   wasm/OSMem.c
                   wasm/OSThreads.c
                   wasm/JSFFI.c
                   wasm/JSFFIGlobals.c
                   posix/Select.c
        cmm-sources: wasm/jsval.cmm
                     wasm/blocker.cmm
                     wasm/scheduler.cmm
      else
         c-sources: posix/GetEnv.c
                    posix/GetTime.c
                    posix/Ticker.c
                    posix/OSMem.c
                    posix/OSThreads.c
                    posix/Select.c
                    posix/Signals.c
                    posix/TTY.c
                    -- ticker/*.c
                    -- We don't want to compile posix/ticker/*.c, these will be #included
                    -- from Ticker.c

-- Note [Undefined symbols in the RTS]
-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- The RTS is built with a number of `-u` flags. This is to handle cyclic
-- dependencies between the RTS and other libraries which we normally think of as
-- downstream from the RTS. "Regular" dependencies from usages in those libraries
-- to definitions in the RTS are handled normally. "Reverse" dependencies from
-- usages in the RTS to definitions in those libraries get the `-u` flag in the
-- RTS.
--
-- The symbols are specified literally, but follow C ABI conventions (as all 3 of
-- C, C--, and Haskell do currently). Thus, we have to be careful to include a
-- leading underscore or not based on those conventions for the given platform in
-- question.
--
-- A tricky part is that different linkers have different policies regarding
-- undefined symbols (not defined in the current binary, or found in a shared
-- library that could be loaded at run time). GNU Binutils' linker is fine with
-- undefined symbols by default, but Apple's "cctools" linker is not. To appease
-- that linker we either need to do a blanket `-undefined dynamic_lookup` or
-- whitelist each such symbol with an additional `-U` (see the man page for more
-- details).
--
-- GHC already does `-undefined dynamic_lookup`, so we just do that for now, but
-- we might try to get more precise with `-U` in the future.
--
-- Note that the RTS also `-u`s some atomics symbols that *are* defined --- and
-- defined within the RTS! It is not immediately clear why this is needed. This
-- dates back to c06e3f46d24ef69f3a3d794f5f604cb8c2a40cbc which mentions a build
-- failure that it was suggested that this fix, but the precise reasoning is not
-- explained.
