
T13050.hs:4:9: warning: [-Wtyped-holes (in -Wdefault)]
    • Found hole: _ :: Int -> Int -> Int
    • In the expression: _
      In the expression: _ x y
      In an equation for ‘f’: f x y = _ x y
    • Relevant bindings include
        y :: Int (bound at T13050.hs:4:5)
        x :: Int (bound at T13050.hs:4:3)
        f :: Int -> Int -> Int (bound at T13050.hs:4:1)
      Valid substitutions include
        (-) :: forall a. Num a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Num’))
        asTypeOf :: forall a. a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Base’))
        const :: forall a b. a -> b -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Base’))
        (*) :: forall a. Num a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Num’))
        (+) :: forall a. Num a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Num’))
        subtract :: forall a. Num a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Num’))
        (^) :: forall a b. (Num a, Integral b) => a -> b -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Real’))
        div :: forall a. Integral a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Real’))
        gcd :: forall a. Integral a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Real’))
        lcm :: forall a. Integral a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Real’))
        mod :: forall a. Integral a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Real’))
        quot :: forall a. Integral a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Real’))
        rem :: forall a. Integral a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Real’))
        undefined :: forall (a :: TYPE r).
                     GHC.Stack.Types.HasCallStack =>
                     a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Err’))
        max :: forall a. Ord a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Classes’))
        min :: forall a. Ord a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Classes’))
        seq :: forall a b. a -> b -> b
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Prim’))

T13050.hs:5:11: warning: [-Wtyped-holes (in -Wdefault)]
    • Found hole: _ :: Int -> Int -> Int
    • In the expression: _
      In the expression: x `_` y
      In an equation for ‘g’: g x y = x `_` y
    • Relevant bindings include
        y :: Int (bound at T13050.hs:5:5)
        x :: Int (bound at T13050.hs:5:3)
        g :: Int -> Int -> Int (bound at T13050.hs:5:1)
      Valid substitutions include
        f :: Int -> Int -> Int (defined at T13050.hs:4:1)
        (-) :: forall a. Num a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Num’))
        asTypeOf :: forall a. a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Base’))
        const :: forall a b. a -> b -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Base’))
        (*) :: forall a. Num a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Num’))
        (+) :: forall a. Num a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Num’))
        subtract :: forall a. Num a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Num’))
        (^) :: forall a b. (Num a, Integral b) => a -> b -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Real’))
        div :: forall a. Integral a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Real’))
        gcd :: forall a. Integral a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Real’))
        lcm :: forall a. Integral a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Real’))
        mod :: forall a. Integral a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Real’))
        quot :: forall a. Integral a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Real’))
        rem :: forall a. Integral a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Real’))
        undefined :: forall (a :: TYPE r).
                     GHC.Stack.Types.HasCallStack =>
                     a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Err’))
        max :: forall a. Ord a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Classes’))
        min :: forall a. Ord a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Classes’))
        seq :: forall a b. a -> b -> b
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Prim’))

T13050.hs:6:11: warning: [-Wtyped-holes (in -Wdefault)]
    • Found hole: _a :: Int -> Int -> Int
      Or perhaps ‘_a’ is mis-spelled, or not in scope
    • In the expression: _a
      In the expression: x `_a` y
      In an equation for ‘q’: q x y = x `_a` y
    • Relevant bindings include
        y :: Int (bound at T13050.hs:6:5)
        x :: Int (bound at T13050.hs:6:3)
        q :: Int -> Int -> Int (bound at T13050.hs:6:1)
      Valid substitutions include
        f :: Int -> Int -> Int (defined at T13050.hs:4:1)
        g :: Int -> Int -> Int (defined at T13050.hs:5:1)
        (-) :: forall a. Num a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Num’))
        asTypeOf :: forall a. a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Base’))
        const :: forall a b. a -> b -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Base’))
        (*) :: forall a. Num a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Num’))
        (+) :: forall a. Num a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Num’))
        subtract :: forall a. Num a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Num’))
        (^) :: forall a b. (Num a, Integral b) => a -> b -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Real’))
        div :: forall a. Integral a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Real’))
        gcd :: forall a. Integral a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Real’))
        lcm :: forall a. Integral a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Real’))
        mod :: forall a. Integral a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Real’))
        quot :: forall a. Integral a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Real’))
        rem :: forall a. Integral a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Real’))
        undefined :: forall (a :: TYPE r).
                     GHC.Stack.Types.HasCallStack =>
                     a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Err’))
        max :: forall a. Ord a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Classes’))
        min :: forall a. Ord a => a -> a -> a
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Classes’))
        seq :: forall a b. a -> b -> b
          (imported from ‘Prelude’ at T13050.hs:1:8-17
           (and originally defined in ‘GHC.Prim’))
