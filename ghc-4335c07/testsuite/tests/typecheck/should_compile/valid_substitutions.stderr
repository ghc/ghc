[1 of 2] Compiling ValidSubs        ( ValidSubs.hs, ValidSubs.o )
[2 of 2] Compiling Foo              ( valid_substitutions.hs, valid_substitutions.o )

valid_substitutions.hs:13:8: warning: [-Wtyped-holes (in -Wdefault)]
    • Found hole: _ :: [Maybe a] -> [a]
      Where: ‘a’ is a rigid type variable bound by
               the type signature for:
                 test :: forall a. [Maybe a] -> [a]
               at valid_substitutions.hs:12:1-24
    • In the expression: _
      In an equation for ‘test’: test = _
    • Relevant bindings include
        test :: [Maybe a] -> [a] (bound at valid_substitutions.hs:13:1)
      Valid substitutions include
        mempty :: forall a. Monoid a => a
          (imported from ‘Prelude’ at valid_substitutions.hs:3:1-30
           (and originally defined in ‘GHC.Base’))
        undefined :: forall (a :: TYPE r).
                     GHC.Stack.Types.HasCallStack =>
                     a
          (imported from ‘Prelude’ at valid_substitutions.hs:3:1-30
           (and originally defined in ‘GHC.Err’))
        catMaybes :: forall a. [Maybe a] -> [a]
          (imported from ‘Data.Maybe’ at valid_substitutions.hs:5:1-17)

valid_substitutions.hs:16:9: warning: [-Wtyped-holes (in -Wdefault)]
    • Found hole: _ :: Integer -> ValidSubs.Moo
    • In the expression: _
      In an equation for ‘test2’: test2 = _
    • Relevant bindings include
        test2 :: Integer -> ValidSubs.Moo
          (bound at valid_substitutions.hs:16:1)
      Valid substitutions include
        undefined :: forall (a :: TYPE r).
                     GHC.Stack.Types.HasCallStack =>
                     a
          (imported from ‘Prelude’ at valid_substitutions.hs:3:1-30
           (and originally defined in ‘GHC.Err’))

valid_substitutions.hs:19:8: warning: [-Wtyped-holes (in -Wdefault)]
    • Found hole: _ :: [Char] -> IO ()
    • In the expression: _
      In the expression: _ "hello, world"
      In an equation for ‘main’: main = _ "hello, world"
    • Relevant bindings include
        main :: IO () (bound at valid_substitutions.hs:19:1)
      Valid substitutions include
        ps :: String -> IO () (defined at valid_substitutions.hs:9:1)
        System.IO.putStr :: String -> IO ()
          (imported qualified from ‘System.IO’ at valid_substitutions.hs:4:1-26)
        fail :: forall (m :: * -> *). Monad m => forall a. String -> m a
          (imported from ‘Prelude’ at valid_substitutions.hs:3:1-30
           (and originally defined in ‘GHC.Base’))
        mempty :: forall a. Monoid a => a
          (imported from ‘Prelude’ at valid_substitutions.hs:3:1-30
           (and originally defined in ‘GHC.Base’))
        print :: forall a. Show a => a -> IO ()
          (imported qualified from ‘System.IO’ at valid_substitutions.hs:4:1-26)
        putStrLn :: String -> IO ()
          (imported qualified from ‘System.IO’ at valid_substitutions.hs:4:1-26)
        readIO :: forall a. Read a => String -> IO a
          (imported qualified from ‘System.IO’ at valid_substitutions.hs:4:1-26)
        error :: forall (a :: TYPE r).
                 GHC.Stack.Types.HasCallStack =>
                 [Char] -> a
          (imported from ‘Prelude’ at valid_substitutions.hs:3:1-30
           (and originally defined in ‘GHC.Err’))
        errorWithoutStackTrace :: forall (a :: TYPE r). [Char] -> a
          (imported from ‘Prelude’ at valid_substitutions.hs:3:1-30
           (and originally defined in ‘GHC.Err’))
        undefined :: forall (a :: TYPE r).
                     GHC.Stack.Types.HasCallStack =>
                     a
          (imported from ‘Prelude’ at valid_substitutions.hs:3:1-30
           (and originally defined in ‘GHC.Err’))
