
TidyClash2.hs:13:20: error:
    • Found type wildcard ‘_’ standing for ‘w’
      Where: ‘w’ is a rigid type variable bound by
               the inferred type of barry :: w -> w1 -> t at TidyClash2.hs:14:1-40
      To use the inferred type, enable PartialTypeSignatures
    • In the type signature: barry :: forall t. _ -> _ -> t

TidyClash2.hs:13:25: error:
    • Found type wildcard ‘_’ standing for ‘w1’
      Where: ‘w1’ is a rigid type variable bound by
               the inferred type of barry :: w -> w1 -> t at TidyClash2.hs:14:1-40
      To use the inferred type, enable PartialTypeSignatures
    • In the type signature: barry :: forall t. _ -> _ -> t

TidyClash2.hs:14:13: error:
    • Found type wildcard ‘_’ standing for ‘w’
      Where: ‘w’ is a rigid type variable bound by
               the inferred type of barry :: w -> w1 -> t at TidyClash2.hs:14:1-40
      To use the inferred type, enable PartialTypeSignatures
    • In a pattern type signature: _
      In the pattern: x :: _
      In an equation for ‘barry’:
          barry (x :: _) (y :: _) = undefined :: _
    • Relevant bindings include
        barry :: w -> w1 -> t (bound at TidyClash2.hs:14:1)

TidyClash2.hs:14:22: error:
    • Found type wildcard ‘_’ standing for ‘w1’
      Where: ‘w1’ is a rigid type variable bound by
               the inferred type of barry :: w -> w1 -> t at TidyClash2.hs:14:1-40
      To use the inferred type, enable PartialTypeSignatures
    • In a pattern type signature: _
      In the pattern: y :: _
      In an equation for ‘barry’:
          barry (x :: _) (y :: _) = undefined :: _
    • Relevant bindings include
        x :: w (bound at TidyClash2.hs:14:8)
        barry :: w -> w1 -> t (bound at TidyClash2.hs:14:1)

TidyClash2.hs:14:40: error:
    • Found type wildcard ‘_’ standing for ‘w2’
      Where: ‘w2’ is a rigid type variable bound by
               the inferred type of <expression> :: w2 at TidyClash2.hs:14:40
      To use the inferred type, enable PartialTypeSignatures
    • In an expression type signature: _
      In the expression: undefined :: _
      In an equation for ‘barry’:
          barry (x :: _) (y :: _) = undefined :: _
    • Relevant bindings include
        y :: w1 (bound at TidyClash2.hs:14:17)
        x :: w (bound at TidyClash2.hs:14:8)
        barry :: w -> w1 -> t (bound at TidyClash2.hs:14:1)
