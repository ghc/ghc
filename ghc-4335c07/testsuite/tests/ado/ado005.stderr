
ado005.hs:8:3: error:
    • Could not deduce (Monad f) arising from a do statement
      from the context: Applicative f
        bound by the type signature for:
                   test :: forall (f :: * -> *).
                           Applicative f =>
                           (Int -> f Int) -> f Int
        at ado005.hs:6:1-48
      Possible fix:
        add (Monad f) to the context of
          the type signature for:
            test :: forall (f :: * -> *).
                    Applicative f =>
                    (Int -> f Int) -> f Int
    • In a stmt of a 'do' block: x <- f 3
      In the expression:
        do x <- f 3
           y <- f x
           return (x + y)
      In an equation for ‘test’:
          test f
            = do x <- f 3
                 y <- f x
                 return (x + y)
