
==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 172, types: 62, coercions: 0, joins: 0/2}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Roman.$trModule4 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Roman.$trModule4 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Roman.$trModule3 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Roman.$trModule3 = GHC.Types.TrNameS Roman.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Roman.$trModule2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Roman.$trModule2 = "Roman"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Roman.$trModule1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Roman.$trModule1 = GHC.Types.TrNameS Roman.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Roman.$trModule :: GHC.Types.Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Roman.$trModule
  = GHC.Types.Module Roman.$trModule3 Roman.$trModule1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs]
lvl = "spec-inline.hs:(19,5)-(29,25)|function go"#

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
Roman.foo3 :: Int
[GblId, Str=x]
Roman.foo3
  = Control.Exception.Base.patError @ 'GHC.Types.LiftedRep @ Int lvl

Rec {
-- RHS size: {terms: 52, types: 6, coercions: 0, joins: 0/1}
Roman.foo_$s$wgo [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>]
Roman.foo_$s$wgo
  = \ (sc :: GHC.Prim.Int#) (sc1 :: GHC.Prim.Int#) ->
      let {
        m :: GHC.Prim.Int#
        [LclId]
        m = GHC.Prim.+#
              (GHC.Prim.+#
                 (GHC.Prim.+#
                    (GHC.Prim.+# (GHC.Prim.+# (GHC.Prim.+# sc sc) sc) sc) sc)
                 sc)
              sc } in
      case GHC.Prim.<=# sc1 0# of {
        __DEFAULT ->
          case GHC.Prim.<# sc1 100# of {
            __DEFAULT ->
              case GHC.Prim.<# sc1 500# of {
                __DEFAULT ->
                  Roman.foo_$s$wgo (GHC.Prim.+# m m) (GHC.Prim.-# sc1 1#);
                1# -> Roman.foo_$s$wgo m (GHC.Prim.-# sc1 3#)
              };
            1# -> Roman.foo_$s$wgo sc (GHC.Prim.-# sc1 2#)
          };
        1# -> 0#
      }
end Rec }

-- RHS size: {terms: 71, types: 19, coercions: 0, joins: 0/1}
Roman.$wgo [InlPrag=NOUSERINLINE[0]]
  :: Maybe Int -> Maybe Int -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 30] 253 0}]
Roman.$wgo
  = \ (w :: Maybe Int) (w1 :: Maybe Int) ->
      case w1 of {
        Nothing -> case Roman.foo3 of wild1 { };
        Just x ->
          case x of { GHC.Types.I# ipv ->
          let {
            m :: GHC.Prim.Int#
            [LclId]
            m = GHC.Prim.+#
                  (GHC.Prim.+#
                     (GHC.Prim.+#
                        (GHC.Prim.+# (GHC.Prim.+# (GHC.Prim.+# ipv ipv) ipv) ipv) ipv)
                     ipv)
                  ipv } in
          case w of {
            Nothing -> Roman.foo_$s$wgo m 10#;
            Just n ->
              case n of { GHC.Types.I# x2 ->
              case GHC.Prim.<=# x2 0# of {
                __DEFAULT ->
                  case GHC.Prim.<# x2 100# of {
                    __DEFAULT ->
                      case GHC.Prim.<# x2 500# of {
                        __DEFAULT ->
                          Roman.foo_$s$wgo (GHC.Prim.+# m m) (GHC.Prim.-# x2 1#);
                        1# -> Roman.foo_$s$wgo m (GHC.Prim.-# x2 3#)
                      };
                    1# -> Roman.foo_$s$wgo ipv (GHC.Prim.-# x2 2#)
                  };
                1# -> 0#
              }
              }
          }
          }
      }

-- RHS size: {terms: 9, types: 5, coercions: 0, joins: 0/0}
Roman.foo_go [InlPrag=NOUSERINLINE[0]]
  :: Maybe Int -> Maybe Int -> Int
[GblId,
 Arity=2,
 Str=<S,1*U><S,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w [Occ=Once] :: Maybe Int) (w1 [Occ=Once] :: Maybe Int) ->
                 case Roman.$wgo w w1 of ww { __DEFAULT -> GHC.Types.I# ww }}]
Roman.foo_go
  = \ (w :: Maybe Int) (w1 :: Maybe Int) ->
      case Roman.$wgo w w1 of ww { __DEFAULT -> GHC.Types.I# ww }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Roman.foo2 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Roman.foo2 = GHC.Types.I# 6#

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
Roman.foo1 :: Maybe Int
[GblId,
 Caf=NoCafRefs,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Roman.foo1 = GHC.Base.Just @ Int Roman.foo2

-- RHS size: {terms: 11, types: 4, coercions: 0, joins: 0/0}
foo :: Int -> Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n [Occ=Once!] :: Int) ->
                 case n of n1 { GHC.Types.I# _ [Occ=Dead] ->
                 Roman.foo_go (GHC.Base.Just @ Int n1) Roman.foo1
                 }}]
foo
  = \ (n :: Int) ->
      case n of { GHC.Types.I# ipv ->
      case Roman.foo_$s$wgo 6# ipv of ww { __DEFAULT -> GHC.Types.I# ww }
      }


------ Local rules for imported ids --------
"SC:$wgo0" [0]
    forall (sc :: GHC.Prim.Int#) (sc1 :: GHC.Prim.Int#).
      Roman.$wgo (GHC.Base.Just @ Int (GHC.Types.I# sc1))
                 (GHC.Base.Just @ Int (GHC.Types.I# sc))
      = Roman.foo_$s$wgo sc sc1


