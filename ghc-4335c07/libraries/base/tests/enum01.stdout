Testing Enum Int: 
    (succ (0::Int)) = 1
    (succ (minBound::Int)) = -2147483647
    (succ (maxBound::Int)) = error "Prelude.Enum.succ{Int}: tried to take `succ' of maxBound"
    pred (1::Int) = 0
    pred (maxBound::Int) = 2147483646
    pred (minBound::Int) = error "Prelude.Enum.pred{Int}: tried to take `pred' of minBound"
    (map (toEnum::Int->Int) [1,minBound,maxBound]) = [1,-2147483648,2147483647]
    (map fromEnum [(1::Int),minBound,maxBound]) = [1,-2147483648,2147483647]
    (take 7 [(1::Int)..]) = [1,2,3,4,5,6,7]
    (take 7 [((maxBound::Int)-5)..]) = [2147483642,2147483643,2147483644,2147483645,2147483646,2147483647]
    (take 7 [(1::Int),2..]) = [1,2,3,4,5,6,7]
    (take 7 [(1::Int),7..]) = [1,7,13,19,25,31,37]
    (take 7 [(1::Int),1..]) = [1,1,1,1,1,1,1]
    (take 7 [(1::Int),0..]) = [1,0,-1,-2,-3,-4,-5]
    (take 7 [(5::Int),2..]) = [5,2,-1,-4,-7,-10,-13]
    (take 7 [x, x-1 ..]) = [-2147483647,-2147483648]
    (take 7 [x, x-1 ..]) = [-2147483643,-2147483644,-2147483645,-2147483646,-2147483647,-2147483648]
    (take 7 [x, (x+1) ..]) = [2147483642,2147483643,2147483644,2147483645,2147483646,2147483647]
    ([minBound::Int,1..]) = [-2147483648,1]
    ([minBound::Int,0..]) = [-2147483648,0]
    ([minBound::Int,-1..]) = [-2147483648,-1,2147483646]
    ([maxBound::Int,1..]) = [2147483647,1,-2147483645]
    ([maxBound::Int,0..]) = [2147483647,0,-2147483647]
    ([maxBound::Int,-1..]) = [2147483647,-1]
    (take 7 ([(1::Int) .. 5])) = [1,2,3,4,5]
    (take 4 ([(1::Int) .. 1])) = [1]
    (take 7 ([(1::Int) .. 0])) = []
    (take 7 ([(5::Int) .. 0])) = []
    (take 7 ([(maxBound-(5::Int)) .. maxBound])) = [2147483642,2147483643,2147483644,2147483645,2147483646,2147483647]
    (take 7 ([(minBound+(5::Int)) .. minBound])) = []
    (take 7 [(5::Int),4..1]) = [5,4,3,2,1]
    (take 7 [(5::Int),3..1]) = [5,3,1]
    (take 7 [(5::Int),3..2]) = [5,3]
    (take 7 [(1::Int),2..1]) = [1]
    (take 7 [(2::Int),1..2]) = [2]
    (take 7 [(2::Int),1..1]) = [2,1]
    (take 7 [(2::Int),3..1]) = []
    ([minBound, 1..maxBound::Int]) = [-2147483648,1]
    ([minBound, 0..maxBound::Int]) = [-2147483648,0]
    ([minBound,-1..maxBound::Int]) = [-2147483648,-1,2147483646]
    ([minBound,-1..maxBound-1::Int]) = [-2147483648,-1,2147483646]
    ([minBound,-1..maxBound-2::Int]) = [-2147483648,-1]
    ([maxBound, 1..minBound::Int]) = [2147483647,1,-2147483645]
    ([maxBound, 0..minBound::Int]) = [2147483647,0,-2147483647]
    ([maxBound, 0..minBound+1::Int]) = [2147483647,0,-2147483647]
    ([maxBound, 0..minBound+2::Int]) = [2147483647,0]
    ([maxBound,-1..minBound::Int]) = [2147483647,-1]
    (take 7 [x,(x+1)..maxBound]) = [2147483643,2147483644,2147483645,2147483646,2147483647]
    (take 7 [x,(x-1)..minBound]) = [-2147483643,-2147483644,-2147483645,-2147483646,-2147483647,-2147483648]
Testing Enum Integer: 
    (succ (0::Integer)) = 1
    (succ ((-1)::Integer)) = 0
    pred (1::Integer) = 0
    pred (0::Integer) = -1
    (map (toEnum::Int->Integer) [1,minBound,maxBound]) = [1,-2147483648,2147483647]
    (map fromEnum [(1::Integer),42,45]) = [1,42,45]
    (take 7 [(1::Integer)..]) = [1,2,3,4,5,6,7]
    (take 7 [(-5::Integer)..]) = [-5,-4,-3,-2,-1,0,1]
    (take 7 [(1::Integer),2..]) = [1,2,3,4,5,6,7]
    (take 7 [(1::Integer),7..]) = [1,7,13,19,25,31,37]
    (take 7 [(1::Integer),1..]) = [1,1,1,1,1,1,1]
    (take 7 [(1::Integer),0..]) = [1,0,-1,-2,-3,-4,-5]
    (take 7 [(5::Integer),2..]) = [5,2,-1,-4,-7,-10,-13]
    (take 7 ([(1::Integer) .. 5])) = [1,2,3,4,5]
    (take 4 ([(1::Integer) .. 1])) = [1]
    (take 7 ([(1::Integer) .. 0])) = []
    (take 7 ([(5::Integer) .. 0])) = []
    (take 7 [(5::Integer),4..1]) = [5,4,3,2,1]
    (take 7 [(5::Integer),3..1]) = [5,3,1]
    (take 7 [(5::Integer),3..2]) = [5,3]
    (take 7 [(1::Integer),2..1]) = [1]
    (take 7 [(2::Integer),1..2]) = [2]
    (take 7 [(2::Integer),1..1]) = [2,1]
    (take 7 [(2::Integer),3..1]) = []
Testing Enum Char: 
    (succ 'a') = 'b'
    (succ (minBound::Char)) = '\SOH'
    (succ (maxBound::Char)) = error "Prelude.Enum.Char.succ: bad argument"
    (pred 'b') = 'a'
    pred (maxBound::Char) = '\1114110'
    pred (minBound::Char) = error "Prelude.Enum.Char.pred: bad argument"
    (map (toEnum::Int->Char) [123,ord (minBound::Char), ord(maxBound::Char)]) = "{\NUL\1114111"
    (toEnum::Int->Char) (minBound::Int) = error "Prelude.chr: bad argument: (-2147483648)"
    (map fromEnum ['X',minBound,maxBound]) = [88,0,1114111]
    (take 7 ['\NUL' .. ]) = "\NUL\SOH\STX\ETX\EOT\ENQ\ACK"
    (take 7 ['\250' .. ]) = "\250\251\252\253\254\255\256"
    (take 7 ['a','b'..]) = "abcdefg"
    (take 7 ['a','e'..]) = "aeimquy"
    (take 7 ['a','a'..]) = "aaaaaaa"
    (take 7 ['z','y'..]) = "zyxwvut"
    (take 7 ['z','v'..]) = "zvrnjfb"
    (take 7 ['\1', '\0' ..]) = "\SOH\NUL"
    (take 7 ['\5', '\4' ..]) = "\ENQ\EOT\ETX\STX\SOH\NUL"
    (take 7 ['\250', '\251' ..]) = "\250\251\252\253\254\255\256"
    (take 7 (['a' .. 'e'])) = "abcde"
    (take 4 (['a' .. 'a'])) = "a"
    (take 7 (['b' .. 'a'])) = ""
    (take 7 (['e' .. 'a'])) = ""
    (take 7 (['\250' .. '\255'])) = "\250\251\252\253\254\255"
    (take 7 (['\5' .. '\0'])) = ""
    (take 7 ['f','e' .. 'b']) = "fedcb"
    (take 7 ['g','e' .. 'b']) = "gec"
    (take 7 ['g','d' .. 'c']) = "gd"
    (take 7 ['b','c' .. 'b']) = "b"
    (take 7 ['c','b' .. 'c']) = "c"
    (take 7 ['c','b' .. 'b']) = "cb"
    (take 7 ['c','d' .. 'b']) = ""
    (take 7 ['\251', '\252' .. maxBound]) = "\251\252\253\254\255\256\257"
    (take 7 ['\5', '\4' .. minBound]) = "\ENQ\EOT\ETX\STX\SOH\NUL"
Testing Enum (): 
    (succ ()) = error "Prelude.Enum.().succ: bad argument"
    (succ (minBound::())) = error "Prelude.Enum.().succ: bad argument"
    (succ (maxBound::())) = error "Prelude.Enum.().succ: bad argument"
    (pred ()) = error "Prelude.Enum.().pred: bad argument"
    (pred (minBound::())) = error "Prelude.Enum.().pred: bad argument"
    (pred (maxBound::())) = error "Prelude.Enum.().pred: bad argument"
    (toEnum 0)::() = ()
    (toEnum 1)::() = error "Prelude.Enum.().toEnum: bad argument"
    (fromEnum ()) = 0
    (take 7 [()..]) = [()]
    (take 7 [(),()..]) = [(),(),(),(),(),(),()]
    (take 7 [()..()]) = [()]
    (take 7 [(),()..()]) = [(),(),(),(),(),(),()]
Testing Enum Ordering (derived): 
    (succ LT) = EQ
    (succ (minBound::Ordering)) = EQ
    (succ (maxBound::Ordering)) = error "Prelude.Enum.Ordering.succ: bad argument"
    (pred GT) = EQ
    (pred (maxBound::Ordering)) = EQ
    (pred (minBound::Ordering)) = error "Prelude.Enum.Ordering.pred: bad argument"
    (toEnum 0)::Ordering = LT
    (toEnum 5)::Ordering = error "Prelude.Enum.Ordering.toEnum: bad argument"
    (fromEnum LT) = 0
    (fromEnum EQ) = 1
    (fromEnum GT) = 2
    ([LT ..]) = [LT,EQ,GT]
    ([EQ ..]) = [EQ,GT]
    ([GT ..]) = [GT]
    ([LT,EQ ..]) = [LT,EQ,GT]
    ([EQ,GT ..]) = [EQ,GT]
    ([EQ,LT ..]) = [EQ,LT]
    ([LT,GT ..]) = [LT,GT]
    ([GT,LT ..]) = [GT,LT]
    take 7 (([GT,GT ..])) = [GT,GT,GT,GT,GT,GT,GT]
    take 7 (([LT,LT ..])) = [LT,LT,LT,LT,LT,LT,LT]
    ([LT .. GT]) = [LT,EQ,GT]
    ([LT .. EQ]) = [LT,EQ]
    ([LT .. LT]) = [LT]
    ([GT .. LT]) = []
    ([GT .. EQ]) = []
    ([GT .. GT]) = [GT]
    ([LT,EQ .. GT]) = [LT,EQ,GT]
    ([GT,EQ .. LT]) = [GT,EQ,LT]
    ([GT,EQ .. EQ]) = [GT,EQ]
    ([GT,EQ .. GT]) = [GT]
    ([GT,EQ .. LT]) = [GT,EQ,LT]
    ([LT,EQ .. LT]) = [LT]
    ([LT,EQ .. GT]) = [LT,EQ,GT]
    take 7 (([LT,LT .. GT])) = [LT,LT,LT,LT,LT,LT,LT]
    take 7 (([GT,GT .. LT])) = []
Testing Enum Bool: 
    (succ False) = True
    (succ (minBound::Bool)) = True
    (succ (maxBound::Bool)) = error "Prelude.Enum.Bool.succ: bad argument"
    (pred True) = False
    (pred (maxBound::Bool)) = False
    (pred (minBound::Bool)) = error "Prelude.Enum.Bool.pred: bad argument"
    (toEnum 0)::Bool = False
    (toEnum 5)::Bool = error "Prelude.Enum.Bool.toEnum: bad argument"
    (fromEnum False) = 0
    (fromEnum True) = 1
    ([False ..]) = [False,True]
    ([True ..]) = [True]
    ([False,True ..]) = [False,True]
    ([True,False ..]) = [True,False]
    (take 7 ([False,False ..])) = [False,False,False,False,False,False,False]
    (take 7 ([True,True ..])) = [True,True,True,True,True,True,True]
    ([False .. True]) = [False,True]
    ([True .. False]) = []
    take 7 ([False,False .. False]) = [False,False,False,False,False,False,False]
    take 7 ([False,False .. True]) = [False,False,False,False,False,False,False]
    take 7 ([False,True .. False]) = [False]
    take 7 ([False,True .. True]) = [False,True]
    take 7 ([True,False .. False]) = [True,False]
    take 7 ([True,False .. True]) = [True]
    take 7 ([True,True .. False]) = []
    take 7 ([True,True .. True]) = [True,True,True,True,True,True,True]
Testing Enum Rational: 
    (succ (0::Rational)) = 1 % 1
    (succ ((-1)::Rational)) = 0 % 1
    pred (1::Rational) = 0 % 1
    pred (0::Rational) = (-1) % 1
    (map (toEnum::Int->Rational) [1,minBound,maxBound]) = [1 % 1,(-2147483648) % 1,2147483647 % 1]
    (map fromEnum [(1::Rational),42,45]) = [1,42,45]
    (take 7 [(1::Rational)..]) = [1 % 1,2 % 1,3 % 1,4 % 1,5 % 1,6 % 1,7 % 1]
    (take 7 [(-5::Rational)..]) = [(-5) % 1,(-4) % 1,(-3) % 1,(-2) % 1,(-1) % 1,0 % 1,1 % 1]
    (take 7 [(1::Rational),2..]) = [1 % 1,2 % 1,3 % 1,4 % 1,5 % 1,6 % 1,7 % 1]
    (take 7 [(1::Rational),7..]) = [1 % 1,7 % 1,13 % 1,19 % 1,25 % 1,31 % 1,37 % 1]
    (take 7 [(1::Rational),1..]) = [1 % 1,1 % 1,1 % 1,1 % 1,1 % 1,1 % 1,1 % 1]
    (take 7 [(1::Rational),0..]) = [1 % 1,0 % 1,(-1) % 1,(-2) % 1,(-3) % 1,(-4) % 1,(-5) % 1]
    (take 7 [(5::Rational),2..]) = [5 % 1,2 % 1,(-1) % 1,(-4) % 1,(-7) % 1,(-10) % 1,(-13) % 1]
    (take 7 ([(1::Rational) .. 5])) = [1 % 1,2 % 1,3 % 1,4 % 1,5 % 1]
    (take 4 ([(1::Rational) .. 1])) = [1 % 1]
    (take 7 ([(1::Rational) .. 0])) = []
    (take 7 ([(5::Rational) .. 0])) = []
    (take 7 [(5::Rational),4..1]) = [5 % 1,4 % 1,3 % 1,2 % 1,1 % 1]
    (take 7 [(5::Rational),3..1]) = [5 % 1,3 % 1,1 % 1]
    (take 7 [(5::Rational),3..2]) = [5 % 1,3 % 1,1 % 1]
    (take 7 [(1::Rational),2..1]) = [1 % 1]
    (take 7 [(2::Rational),1..2]) = [2 % 1]
    (take 7 [(2::Rational),1..1]) = [2 % 1,1 % 1]
    (take 7 [(2::Rational),3..1]) = []
Testing Enum (Ratio Int): 
    (succ (0::Ratio Int)) = 1 % 1
    (succ ((-1)::Ratio Int)) = 0 % 1
    pred (1::Ratio Int) = 0 % 1
    pred (0::Ratio Int) = (-1) % 1
    (map (toEnum::Int->Ratio Int) [1,minBound,maxBound]) = [1 % 1,(-2147483648) % 1,2147483647 % 1]
    (map fromEnum [(1::Ratio Int),42,45]) = [1,42,45]
    (take 7 [(1::Ratio Int)..]) = [1 % 1,2 % 1,3 % 1,4 % 1,5 % 1,6 % 1,7 % 1]
    (take 7 [(-5::Ratio Int)..]) = [(-5) % 1,(-4) % 1,(-3) % 1,(-2) % 1,(-1) % 1,0 % 1,1 % 1]
    (take 7 [((toEnum ((maxBound::Int)-5))::Ratio Int)..]) = [2147483642 % 1,2147483643 % 1,2147483644 % 1,2147483645 % 1,2147483646 % 1,2147483647 % 1,(-2147483648) % 1]
    (take 7 [(1::Ratio Int),2..]) = [1 % 1,2 % 1,3 % 1,4 % 1,5 % 1,6 % 1,7 % 1]
    (take 7 [(1::Ratio Int),7..]) = [1 % 1,7 % 1,13 % 1,19 % 1,25 % 1,31 % 1,37 % 1]
    (take 7 [(1::Ratio Int),1..]) = [1 % 1,1 % 1,1 % 1,1 % 1,1 % 1,1 % 1,1 % 1]
    (take 7 [(1::Ratio Int),0..]) = [1 % 1,0 % 1,(-1) % 1,(-2) % 1,(-3) % 1,(-4) % 1,(-5) % 1]
    (take 7 [(5::Ratio Int),2..]) = [5 % 1,2 % 1,(-1) % 1,(-4) % 1,(-7) % 1,(-10) % 1,(-13) % 1]
    (take 7 [x, x-1 ..]) = [(-2147483647) % 1,(-2147483648) % 1,2147483647 % 1,2147483646 % 1,2147483645 % 1,2147483644 % 1,2147483643 % 1]
    (take 7 [x, x-1 ..]) = [(-2147483643) % 1,(-2147483644) % 1,(-2147483645) % 1,(-2147483646) % 1,(-2147483647) % 1,(-2147483648) % 1,2147483647 % 1]
    (take 7 [x, (x+1) ..]) = [2147483642 % 1,2147483643 % 1,2147483644 % 1,2147483645 % 1,2147483646 % 1,2147483647 % 1,(-2147483648) % 1]
    (take 7 ([(1::Ratio Int) .. 5])) = [1 % 1,2 % 1,3 % 1,4 % 1,5 % 1]
    (take 4 ([(1::Ratio Int) .. 1])) = [1 % 1]
    (take 7 ([(1::Ratio Int) .. 0])) = []
    (take 7 ([(5::Ratio Int) .. 0])) = []
    (take 7 ([x..y])) = [2147483642 % 1,2147483643 % 1,2147483644 % 1,2147483645 % 1,2147483646 % 1,2147483647 % 1]
    (take 7 ([x..y])) = []
    (take 7 [(5::Ratio Int),4..1]) = [5 % 1,4 % 1,3 % 1,2 % 1,1 % 1]
    (take 7 [(5::Ratio Int),3..1]) = [5 % 1,3 % 1,1 % 1]
    (take 7 [(5::Ratio Int),3..2]) = [5 % 1,3 % 1,1 % 1]
    (take 7 [(1::Ratio Int),2..1]) = [1 % 1]
    (take 7 [(2::Ratio Int),1..2]) = [2 % 1]
    (take 7 [(2::Ratio Int),1..1]) = [2 % 1,1 % 1]
    (take 7 [(2::Ratio Int),3..1]) = []
    (take 7 [x,(x+1)..y]) = [2147483643 % 1,2147483644 % 1,2147483645 % 1,2147483646 % 1,2147483647 % 1]
    (take 7 [x,(x-1)..y]) = [(-2147483643) % 1,(-2147483644) % 1,(-2147483645) % 1,(-2147483646) % 1,(-2147483647) % 1,(-2147483648) % 1]
