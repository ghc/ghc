#!/nix/store/nkq0n2m4shlbdvdq0qijib5zyzgmn0vq-bash-4.4-p12/bin/sh

set -e

show_help () {
    cat <<EOF
Usage: $0 [FLAGS]...

Validate GHC source tree against testsuite; see
http://ghc.haskell.org/trac/ghc/wiki/TestingPatches for more
information.

Flags:
  --no-clean        don't make clean first, just carry on from
                    a previous interrupted validation run
  --testsuite-only  don't build the compiler, just run the test suite
  --build-only      don't test the compiler, just build it
  --hpc             build stage2 with -fhpc, and see how much of the
                    compiler the test suite covers.
                    2008-07-01: 63% slower than the default.
                    HTML generated here: testsuite/hpc_output/hpc_index.html
  --fast            Omit binary distribution. Omit certain tests.
  --slow            Build stage2 with -DDEBUG. Run tests for all WAYS,
                    but skip those that call compiler_stats_num_field.
                    2008-07-01: 14% slower than the default.
  --dph             Also build libraries/dph and run associated tests.
  --quiet           More pretty build log.
                    See Note [Default build system verbosity].
  --help            shows this usage help.

  validate runs 'make -j\$THREADS', where by default THREADS is the number of
  cpus your computer has +1. You can set the environment variable THREADS to
  override this. For a sequential build you would for example use

    THREADS=1 ./validate

  You can set the 'config_args' environment variable to pass flags to
  'configure'.

  You can also use environment variables to pass extra options to the
  testsuite. For example:

    TEST='read001 read002' ./validate --testsuite-only --fast

EOF
}

no_clean=0
testsuite_only=0
build_only=0
hpc=NO
speed=NORMAL
use_dph=0
be_quiet=0
# Validate uses gzip compression for the binary distribution to avoid the rather
# heavy cost of xz, which is the typical default. The options are defined in
# mk/config.mk.in
tar_comp=gzip

while [ $# -gt 0 ]
do
    case "$1" in
    --no-clean)
        no_clean=1
        ;;
    --testsuite-only)
        testsuite_only=1
        ;;
    --build-only)
        build_only=1
        ;;
    --hpc)
        hpc=YES
        ;;
    --slow)
        speed=SLOW
        ;;
    --fast)
        speed=FAST
        ;;
    --normal) # for backward compat
        speed=NORMAL
        ;;
    --no-dph) # for backward compat
        use_dph=0
        ;;
    --dph)
        use_dph=1
        ;;
    --quiet)
        be_quiet=1
        ;;
    --help)
        show_help
        exit 0;;
    *)
        echo "$0: unrecognized argument '$1'" >&2
        echo "Try '$0 --help' for more information." >&2
        exit 1;;
    esac
    shift
done

check_packages () {
    if [ "$bindistdir" = "" ]
    then
        ghc_pkg=inplace/bin/ghc-pkg
    else
        ghc_pkg="$bindistdir"/bin/ghc-pkg
    fi

    if [ $be_quiet -eq 1 ]
    then
        "$ghc_pkg" check
    else
        echo "== Start $1 package check"
        "$ghc_pkg" check -v
        echo "== End $1 package check"
    fi
}

detect_cpu_count () {
    if [ "$CPUS" = "" ]; then
        # Windows standard environment variable
        CPUS="$NUMBER_OF_PROCESSORS"
    fi

    if [ "$CPUS" = "" ]; then
        # Linux
        CPUS=`getconf _NPROCESSORS_ONLN 2>/dev/null`
    fi

    if [ "$CPUS" = "" ]; then
        # FreeBSD
        CPUS=`getconf NPROCESSORS_ONLN 2>/dev/null`
    fi

    if [ "$CPUS" = "" ]; then
        # nothing helped
        CPUS="1"
    fi
}

detect_cpu_count

if ! [ -d testsuite ]
then
    echo 'Could not find the testsuite for validation' >&2
    exit 1
fi

if [ "$THREADS" = "" ]; then
    threads=$(($CPUS + 1)) # `expr $CPUS + 1`
else
    threads="$THREADS"
fi

echo "using THREADS=${threads}" >&2

if type gmake > /dev/null 2> /dev/null
then
    make="gmake"
else
    make="make"
fi

if [ $be_quiet -eq 1 ]; then
    # See Note [Default build system verbosity].
    make="$make -s"
fi

$make -C utils/checkUniques

if [ $testsuite_only -eq 0 ]; then

thisdir=`pwd`

if [ $no_clean -eq 0 ]; then
    $make maintainer-clean

    INSTDIR="$thisdir/inst"

    if [ $use_dph -eq 1 ]; then
        python3 ./boot --validate --required-tag=dph
    else
        python3 ./boot --validate
    fi
    ./configure --prefix="$INSTDIR" $config_args
fi

echo "Validating=YES"       >  mk/are-validating.mk
echo "ValidateSpeed=$speed" >> mk/are-validating.mk
echo "ValidateHpc=$hpc"     >> mk/are-validating.mk

# Note [Default build system verbosity].
#
# From https://ghc.haskell.org/trac/ghc/wiki/Design/BuildSystem:
#
#   "The build system should clearly report what it's doing (and sometimes
#   why), without being too verbose. It should emit actual command lines as
#   much as possible, so that they can be inspected and cut & pasted."
#
# That should be the default. Only suppress commands, by setting V=0 and using
# `make -s`, when user explicitly asks for it with `./validate --quiet`.
if [ $be_quiet -eq 1 ]; then
    # See Note [Default build system verbosity].
    echo "V=0"                  >> mk/are-validating.mk # Less gunk
fi

if [ $use_dph -eq 1 ]; then
    echo "BUILD_DPH=YES"    >> mk/are-validating.mk
else
    echo "BUILD_DPH=NO"     >> mk/are-validating.mk
fi

$make -j$threads
# For a "debug make", add "--debug=b --debug=m"

check_packages post-build

# -----------------------------------------------------------------------------
# Build and test a binary distribution (not --fast)

if [ $speed != "FAST" ]; then

    $make binary-dist-prep TAR_COMP=$tar_comp
    $make test_bindist TEST_PREP=YES TAR_COMP=$tar_comp

    #
    # Install the xhtml package into the bindist.
    # This verifies that we can install a package into the
    # bindist with Cabal.
    #
    bindistdir="bindisttest/install   dir"

    check_packages post-install

    $make validate_build_xhtml BINDIST_PREFIX="$thisdir/$bindistdir"

    check_packages post-xhtml
fi

fi # testsuite-only

# -----------------------------------------------------------------------------
# Run the testsuite

if [ "$build_only" -eq 1 ]; then
    cat <<EOF
-------------------------------------------------------------------
Congratulations!  This tree has compiled successfully.

You can now test your new compiler using ./validate --testsuite-only.
EOF
    exit 0
fi

if [ "$hpc" = YES ]
then
    # XXX With threads we'd need to give a different tix file to each thread
    #     and then sum them up at the end
    threads=1
    HPCTIXFILE=$thisdir/testsuite/hpc_output/ghc.tix
    export HPCTIXFILE
    rm -f $HPCTIXFILE
fi

case "$speed" in
SLOW)
        MAKE_TEST_TARGET=slowtest
        BINDIST="BINDIST=YES"
        ;;
NORMAL)
        MAKE_TEST_TARGET=test
        BINDIST="BINDIST=YES"
        ;;
FAST)
        MAKE_TEST_TARGET=fasttest
        BINDIST="BINDIST=NO"
        ;;
esac

if [ $be_quiet -eq 1 ] && [ -z $VERBOSE ]; then
    TEST_VERBOSITY="VERBOSE=1"
fi

# We need to be quite picky on Windows about which Python interpreter we use
# (#12554, #12661). Allow the user to override it.
if [ "z$PYTHON" != "z" ]; then
    PYTHON_ARG="PYTHON=$PYTHON"
fi

rm -f testsuite_summary.txt testsuite_summary_stage1.txt

# Use LOCAL=0, see Note [Running tests in /tmp].
$make -C testsuite/tests $BINDIST $PYTHON_ARG \
      $MAKE_TEST_TARGET stage=2 LOCAL=0 $TEST_VERBOSITY THREADS=$threads \
      NO_PRINT_SUMMARY=YES SUMMARY_FILE=../../testsuite_summary.txt \
      JUNIT_FILE=../../testsuite.xml \
      2>&1 | tee testlog

# Run a few tests using the stage1 compiler.
# See Note [Why is there no stage1 setup function?].
# Don't use BINDIST=YES, as stage1 is not available in a bindist.
$make -C testsuite/tests/stage1 $PYTHON_ARG \
      $MAKE_TEST_TARGET stage=1 LOCAL=0 $TEST_VERBOSITY THREADS=$threads \
      NO_PRINT_SUMMARY=YES SUMMARY_FILE=../../../testsuite_summary_stage1.txt \
      JUNIT_FILE=../../../testsuite_stage1.xml \
      2>&1 | tee testlog-stage1

echo
echo '==== STAGE 1 TESTS ==== '
cat testsuite_summary_stage1.txt

echo '==== STAGE 2 TESTS ==== '
cat testsuite_summary.txt

check_packages post-testsuite

if [ "$hpc" = YES ]
then
    utils/hpc/hpc markup --hpcdir=. --srcdir=compiler --srcdir=testsuite/hpc_output --destdir=testsuite/hpc_output testsuite/hpc_output/ghc.tix
fi

if
    grep '\<0 caused framework failures' testsuite_summary.txt >/dev/null 2>/dev/null &&
    grep '\<0 unexpected passes' testsuite_summary.txt >/dev/null 2>/dev/null &&
    grep '\<0 unexpected failures' testsuite_summary.txt >/dev/null 2>/dev/null &&
    grep '\<0 unexpected stat failures' testsuite_summary.txt >/dev/null 2>/dev/null &&

    grep '\<0 caused framework failures' testsuite_summary_stage1.txt >/dev/null 2>/dev/null &&
    grep '\<0 unexpected passes' testsuite_summary_stage1.txt >/dev/null 2>/dev/null &&
    grep '\<0 unexpected failures' testsuite_summary_stage1.txt >/dev/null 2>/dev/null &&
    grep '\<0 unexpected stat failures' testsuite_summary_stage1.txt >/dev/null 2>/dev/null ; then

    if [ $testsuite_only -eq 0 ] && [ $no_clean -eq 0 ]
    then
        cat <<EOF
-------------------------------------------------------------------
Congratulations!  This tree has passed minimal testing.

NOTE: If you have made changes that may cause failures not tested for by
the minimal testing procedure, please do further testing as necessary.

When you are satisfied that you haven't broken anything, go ahead and
push/send your patches.
EOF
        if [ -f mk/validate.mk ] && grep -q "^[^#]" mk/validate.mk
        then
            cat <<EOF

WARNING: You seem to have things set in mk/validate.mk. Please check
that it is OK before pushing.
EOF
        fi
        cat <<EOF
-------------------------------------------------------------------
EOF
    else
        cat <<EOF
-------------------------------------------------------------------
I didn't find any problems, but this wasn't a complete validate run,
so be careful!

NOTE: If you have made changes that may cause failures not tested for by
the minimal testing procedure, please do further testing as necessary.
-------------------------------------------------------------------
EOF
   fi
else
    if [ $be_quiet -eq 0 ]
    then
       cat <<EOF
-------------------------------------------------------------------
Oops!  Looks like you have some unexpected test results or framework failures.
Please fix them before pushing/sending patches.
-------------------------------------------------------------------
EOF
    fi
    exit 1
fi
