# This file is processed by the configure script.
# See hadrian/src/UserSettings.hs for user-defined settings.
#===========================================================

# Paths to builders:
#===================

# ROMES:TODO: Drop CC

alex           = @AlexCmd@
autoreconf     = @AutoreconfCmd@
cc             = @CC@
happy          = @HappyCmd@
make           = @MakeCmd@
objdump        = @ObjdumpCmd@
sphinx-build   = @SPHINXBUILD@
system-ghc     = @WithGhc@
system-ghc-pkg = @GhcPkgCmd@
tar            = @TarCmd@
xelatex        = @XELATEX@
makeindex      = @MAKEINDEX@
makeinfo       = @MAKEINFO@
bourne-shell   = @SH@
git            = @GIT@
cabal          = @CABAL@

# Python 3 is required to run test driver.
# See: https://github.com/ghc/ghc/blob/master/testsuite/mk/boilerplate.mk#L220
python         = @PythonCmd@

# Information about builders:
#============================

cc-llvm-backend           = @CcLlvmBackend@

llvm-min-version          = @LlvmMinVersion@
llvm-max-version          = @LlvmMaxVersion@

# Build options:
#===============

ghc-source-path      = @hardtop@
use-ghc-toolchain    = @EnableGhcToolchain@

# Information about build, host and target systems:
#==================================================

# Q: Is the *-platform information available in the target?
# A: Yes, it is. We pass @BuildPlatform@ and @HostPlatform@ and @TargetPlatform@ to ghc-toolchain using --target=that
#     And we can reconstruct the platform info using targetPlatformTriple
# Q: What is TargetPlatformFull?
target-platform-full  = @TargetPlatformFull@

cross-compiling       = @CrossCompiling@

dynamic-extension     = @soext_target@

ghc-version           = @GhcVersion@
ghc-major-version     = @GhcMajVersion@
ghc-minor-version     = @GhcMinVersion@
ghc-patch-level       = @GhcPatchLevel@

bootstrap-threaded-rts = @GhcThreadedRts@

project-name           = @ProjectName@
project-version        = @ProjectVersion@
project-version-munged = @ProjectVersionMunged@
project-version-for-lib = @ProjectVersionForLib@
project-version-int    = @ProjectVersionInt@
project-patch-level    = @ProjectPatchLevel@
project-patch-level1   = @ProjectPatchLevel1@
project-patch-level2   = @ProjectPatchLevel2@
project-git-commit-id  = @ProjectGitCommitId@

# Settings:
#==========

# We are in the process of moving the settings file from being entirely
# generated by configure, to generated being by the build system. Many of these
# might become redundant.
# See Note [tooldir: How GHC finds mingw on Windows]

settings-otool-command = @SettingsOtoolCommand@
settings-install_name_tool-command = @SettingsInstallNameToolCommand@
settings-llc-command = @SettingsLlcCommand@
settings-opt-command = @SettingsOptCommand@
settings-llvm-as-command = @SettingsLlvmAsCommand@
settings-use-distro-mingw = @SettingsUseDistroMINGW@

target-has-libm = @TargetHasLibm@

# Include and library directories:
#=================================

curses-lib-dir     = @CURSES_LIB_DIRS@
curses-include-dir = @CURSES_INCLUDE_DIRS@

iconv-include-dir = @ICONV_INCLUDE_DIRS@
iconv-lib-dir     = @ICONV_LIB_DIRS@

intree-gmp              = @GMP_FORCE_INTREE@
gmp-framework-preferred = @GMP_PREFER_FRAMEWORK@
gmp-include-dir         = @GMP_INCLUDE_DIRS@
gmp-lib-dir             = @GMP_LIB_DIRS@

use-system-ffi    = @UseSystemLibFFI@
ffi-include-dir   = @FFIIncludeDir@
ffi-lib-dir       = @FFILibDir@

libdw-include-dir   = @LibdwIncludeDir@
libdw-lib-dir       = @LibdwLibDir@

libnuma-include-dir   = @LibNumaIncludeDir@
libnuma-lib-dir       = @LibNumaLibDir@

libzstd-include-dir   = @LibZstdIncludeDir@
libzstd-lib-dir       = @LibZstdLibDir@

# Optional Dependencies:
#=======================

use-lib-dw        = @UseLibdw@
use-lib-zstd      = @UseLibZstd@
static-lib-zstd   = @UseStaticLibZstd@
use-lib-numa      = @UseLibNuma@
use-lib-m         = @UseLibm@
use-lib-rt        = @UseLibrt@
use-lib-dl        = @UseLibdl@
use-lib-bfd       = @UseLibbfd@
use-lib-pthread   = @UseLibpthread@
need-libatomic    = @NeedLibatomic@

emsdk-version     = @ConfiguredEmsdkVersion@
