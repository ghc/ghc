==========================
At point (15,8), we found:
==========================
┌
│ $dNum at T23540.hs:1:1, of type: Num Modulo1
│     is an evidence variable bound by a let, depending on: [$dNum]
│           with scope: ModuleScope
│           
│     Defined at <no location info>
└
|
`- ┌
   │ $dNum at T23540.hs:1:1, of type: Num Modulo1
   │     is an evidence variable bound by a let, depending on: [$fNumModulo1]
   │           with scope: ModuleScope
   │           
   │     Defined at <no location info>
   └
   |
   `- ┌
      │ $fNumModulo1 at T23540.hs:10:10-20, of type: Num Modulo1
      │     is an evidence variable bound by an instance of class Num
      │           with scope: ModuleScope
      │           
      │     Defined at T23540.hs:10:10
      └

==========================
At point (30,8), we found:
==========================
┌
│ $dMonad at T23540.hs:1:1, of type: Monad Identity
│     is an evidence variable bound by a let, depending on: [$fMonadIdentity]
│           with scope: ModuleScope
│           
│     Defined at <no location info>
└
|
`- ┌
   │ $fMonadIdentity at T23540.hs:25:10-23, of type: Monad Identity
   │     is an evidence variable bound by an instance of class Monad
   │           with scope: ModuleScope
   │           
   │     Defined at T23540.hs:25:10
   └

==========================
At point (43,8), we found:
==========================
┌
│ $dIsList at T23540.hs:1:1, of type: IsList (BetterList Modulo1)
│     is an evidence variable bound by a let, depending on: [$fIsListBetterList]
│           with scope: ModuleScope
│           
│     Defined at <no location info>
└
|
`- ┌
   │ $fIsListBetterList at T23540.hs:36:10-30, of type: forall x. IsList (BetterList x)
   │     is an evidence variable bound by an instance of class IsList
   │           with scope: ModuleScope
   │           
   │     Defined at T23540.hs:36:10
   └

==========================
At point (43,15), we found:
==========================
┌
│ $dNum at T23540.hs:1:1, of type: Num Modulo1
│     is an evidence variable bound by a let, depending on: [$dNum]
│           with scope: ModuleScope
│           
│     Defined at <no location info>
└
|
`- ┌
   │ $dNum at T23540.hs:1:1, of type: Num Modulo1
   │     is an evidence variable bound by a let, depending on: [$fNumModulo1]
   │           with scope: ModuleScope
   │           
   │     Defined at <no location info>
   └
   |
   `- ┌
      │ $fNumModulo1 at T23540.hs:10:10-20, of type: Num Modulo1
      │     is an evidence variable bound by an instance of class Num
      │           with scope: ModuleScope
      │           
      │     Defined at T23540.hs:10:10
      └

==========================
At point (43,21), we found:
==========================
==========================
At point (49,14), we found:
==========================
┌
│ $dEnum at T23540.hs:1:1, of type: Enum (Item [Letter])
│     is an evidence variable bound by a let, depending on: [$dEnum]
│           with scope: ModuleScope
│           
│     Defined at <no location info>
└
|
`- ┌
   │ $dEnum at T23540.hs:1:1, of type: Enum Letter
   │     is an evidence variable bound by a let, depending on: [$fEnumLetter]
   │           with scope: ModuleScope
   │           
   │     Defined at <no location info>
   └
   |
   `- ┌
      │ $fEnumLetter at T23540.hs:46:34-37, of type: Enum Letter
      │     is an evidence variable bound by an instance of class Enum
      │           with scope: ModuleScope
      │           
      │     Defined at T23540.hs:46:34
      └

==========================
At point (61,7), we found:
==========================
┌
│ $dApplicative at T23540.hs:1:1, of type: Applicative Identity'
│     is an evidence variable bound by a let, depending on: [$fApplicativeIdentity']
│           with scope: ModuleScope
│           
│     Defined at <no location info>
└
|
`- ┌
   │ $fApplicativeIdentity' at T23540.hs:56:10-30, of type: Applicative Identity'
   │     is an evidence variable bound by an instance of class Applicative
   │           with scope: ModuleScope
   │           
   │     Defined at T23540.hs:56:10
   └

┌
│ $dFunctor at T23540.hs:1:1, of type: Functor Identity'
│     is an evidence variable bound by a let, depending on: [$fFunctorIdentity']
│           with scope: ModuleScope
│           
│     Defined at <no location info>
└
|
`- ┌
   │ $fFunctorIdentity' at T23540.hs:54:10-26, of type: Functor Identity'
   │     is an evidence variable bound by an instance of class Functor
   │           with scope: ModuleScope
   │           
   │     Defined at T23540.hs:54:10
   └

==========================
At point (69,4), we found:
==========================
┌
│ $dEq at T23540.hs:1:1, of type: Eq Modulo1
│     is an evidence variable bound by a let, depending on: [$fEqModulo1]
│           with scope: ModuleScope
│           
│     Defined at <no location info>
└
|
`- ┌
   │ $fEqModulo1 at T23540.hs:8:31-32, of type: Eq Modulo1
   │     is an evidence variable bound by an instance of class Eq
   │           with scope: ModuleScope
   │           
   │     Defined at T23540.hs:8:31
   └

┌
│ $dNum at T23540.hs:1:1, of type: Num Modulo1
│     is an evidence variable bound by a let, depending on: [$dNum]
│           with scope: ModuleScope
│           
│     Defined at <no location info>
└
|
`- ┌
   │ $dNum at T23540.hs:1:1, of type: Num Modulo1
   │     is an evidence variable bound by a let, depending on: [$fNumModulo1]
   │           with scope: ModuleScope
   │           
   │     Defined at <no location info>
   └
   |
   `- ┌
      │ $fNumModulo1 at T23540.hs:10:10-20, of type: Num Modulo1
      │     is an evidence variable bound by an instance of class Num
      │           with scope: ModuleScope
      │           
      │     Defined at T23540.hs:10:10
      └

==========================
At point (82,6), we found:
==========================
┌
│ $dNum at T23540.hs:1:1, of type: Num Modulo1
│     is an evidence variable bound by a let, depending on: [$fNumModulo1]
│           with scope: ModuleScope
│           
│     Defined at <no location info>
└
|
`- ┌
   │ $fNumModulo1 at T23540.hs:10:10-20, of type: Num Modulo1
   │     is an evidence variable bound by an instance of class Num
   │           with scope: ModuleScope
   │           
   │     Defined at T23540.hs:10:10
   └

┌
│ $dOrd at T23540.hs:1:1, of type: Ord Modulo1
│     is an evidence variable bound by a let, depending on: [$fOrdModulo1]
│           with scope: ModuleScope
│           
│     Defined at <no location info>
└
|
`- ┌
   │ $fOrdModulo1 at T23540.hs:8:35-37, of type: Ord Modulo1
   │     is an evidence variable bound by an instance of class Ord
   │           with scope: ModuleScope
   │           
   │     Defined at T23540.hs:8:35
   └

