
==================== Output Cmm ====================
[M.fun_entry() { //  [R2]
         { info_tbls: [(cB9,
                        label: block_cB9_info
                        rep: StackRep []
                        srt: Nothing),
                       (cBc,
                        label: M.fun_info
                        rep: HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} }
                        srt: Nothing)]
           stack_info: arg_space: 8
         }
     {offset
       cBc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cBd; else goto cBe;
       cBd: // global
           R1 = M.fun_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cBe: // global
           I64[Sp - 8] = cB9;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto cB9; else goto cBa;
       cBa: // global
           call (I64![R1])(R1) returns to cB9, args: 8, res: 8, upd: 8;
       cB9: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . M.fun_closure" {
     M.fun_closure:
         const M.fun_info;
 }]



==================== Output Cmm ====================
[M.MkT_entry() { //  [R3, R2]
         { info_tbls: [(cBx,
                        label: block_cBx_info
                        rep: StackRep [False]
                        srt: Nothing),
                       (cBA,
                        label: M.MkT_info
                        rep: HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} }
                        srt: Nothing),
                       (cBD,
                        label: block_cBD_info
                        rep: StackRep [False]
                        srt: Nothing)]
           stack_info: arg_space: 8
         }
     {offset
       cBA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cBG; else goto cBH;
       cBG: // global
           R1 = M.MkT_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cBH: // global
           I64[Sp - 16] = cBx;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto cBx; else goto cBy;
       cBy: // global
           call (I64![R1])(R1) returns to cBx, args: 8, res: 8, upd: 8;
       cBx: // global
           I64[Sp] = cBD;
           _tB0::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _tB0::P64;
           call stg_ap_0_fast(R1) returns to cBD, args: 8, res: 8, upd: 8;
       cBD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cBL; else goto cBK;
       cBL: // global
           HpAlloc = 24;
           call stg_gc_unpt_r1(R1) returns to cBD, args: 8, res: 8, upd: 8;
       cBK: // global
           I64[Hp - 16] = M.MkT_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . M.MkT_closure" {
     M.MkT_closure:
         const M.MkT_info;
 }]



==================== Output Cmm ====================
[M.MkT_con_entry() { //  []
         { info_tbls: [(cBX,
                        label: M.MkT_con_info
                        rep: HeapRep 2 ptrs { Con {tag: 0 descr:"main:M.MkT"} }
                        srt: Nothing)]
           stack_info: arg_space: 8
         }
     {offset
       cBX: // global
           R1 = R1 + 1;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
     }
 }]


