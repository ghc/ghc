
==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 12, types: 16, coercions: 0, joins: 0/0}

-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
doStuff [InlPrag=INLINE (sat-args=1)]
  :: forall {b}. Show b => b -> IO b
[GblId, Arity=2, Unf=OtherCon []]
doStuff
  = \ (@b_axP) ($dShow_aET :: Show b_axP) (eta_B0 :: b_axP) ->
      >>
        @IO
        GHC.Base.$fMonadIO
        @()
        @b_axP
        (print @b_axP $dShow_aET eta_B0)
        (return @IO GHC.Base.$fMonadIO @b_axP eta_B0)




==================== CorePrep ====================
Result size of CorePrep
  = {terms: 16, types: 20, coercions: 0, joins: 0/2}

-- RHS size: {terms: 15, types: 14, coercions: 0, joins: 0/2}
M.doStuff [InlPrag=INLINE (sat-args=1)]
  :: forall {b}. GHC.Show.Show b => b -> GHC.Types.IO b
[GblId, Arity=2, Unf=OtherCon []]
M.doStuff
  = \ (@b_axP)
      ($dShow_sJs [Occ=OnceL1] :: GHC.Show.Show b_axP)
      (eta_sJt :: b_axP) ->
      scctick<doStuff>
      let {
        sat_sJv [Occ=Once1] :: GHC.Types.IO b_axP
        [LclId]
        sat_sJv
          = GHC.Base.return
              @GHC.Types.IO GHC.Base.$fMonadIO @b_axP eta_sJt } in
      let {
        sat_sJu [Occ=Once1] :: GHC.Types.IO ()
        [LclId]
        sat_sJu = System.IO.print @b_axP $dShow_sJs eta_sJt } in
      GHC.Base.>>
        @GHC.Types.IO GHC.Base.$fMonadIO @() @b_axP sat_sJu sat_sJv



