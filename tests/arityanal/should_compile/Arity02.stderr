
==================== Tidy Core ====================
Result size of Tidy Core = {terms: 51, types: 27, coercions: 0, joins: 0/0}

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
F2.f1 :: Integer
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
F2.f1 = GHC.Num.Integer.IS 0#

-- RHS size: {terms: 7, types: 6, coercions: 0, joins: 0/0}
f2f :: forall {t1} {t2}. (t1 -> Integer -> t2) -> t1 -> t2
[GblId, Arity=2, Str=<1C(1,C(1,L))><L>, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)}]
f2f = \ (@t) (@t1) (h :: t -> Integer -> t1) (x :: t) -> h x F2.f1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl :: Integer
[GblId, Unf=OtherCon []]
lvl = GHC.Num.Integer.IS 1#

Rec {
-- RHS size: {terms: 29, types: 7, coercions: 0, joins: 0/0}
F2.f2_g [Occ=LoopBreaker] :: Integer -> Integer -> Integer
[GblId, Arity=2, Str=<1L><SL>, Unf=OtherCon []]
F2.f2_g
  = \ (x :: Integer) (y :: Integer) ->
      case x of x1 {
        GHC.Num.Integer.IS x2 ->
          case GHC.Prim.># x2 0# of {
            __DEFAULT -> y;
            1# -> F2.f2_g (GHC.Num.Integer.integerSub x1 lvl) (GHC.Num.Integer.integerAdd x1 y)
          };
        GHC.Num.Integer.IP x2 -> F2.f2_g (GHC.Num.Integer.integerSub x1 lvl) (GHC.Num.Integer.integerAdd x1 y);
        GHC.Num.Integer.IN x2 -> y
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
F2.f3 :: Integer
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
F2.f3 = GHC.Num.Integer.IS 5#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
f2 :: Integer
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False, WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
f2 = F2.f2_g F2.f3 F2.f1



