
==================== Tidy Core ====================
Result size of Tidy Core = {terms: 36, types: 25, coercions: 0, joins: 0/0}

Rec {
-- RHS size: {terms: 12, types: 8, coercions: 0, joins: 0/0}
mySum [Occ=LoopBreaker] :: [Int] -> Int
[GblId, Arity=1, Unf=OtherCon []]
mySum
  = \ (ds :: [Int]) ->
      case ds of {
        [] -> GHC.Types.I# 0#;
        : x xs -> + @Int GHC.Num.$fNumInt x (mySum xs)
      }
end Rec }

-- RHS size: {terms: 22, types: 9, coercions: 0, joins: 0/0}
f :: Int -> (Int -> Int) -> Int -> Int
[GblId, Arity=2, Unf=OtherCon []]
f = \ (k :: Int) (z :: Int -> Int) ->
      case even @Int GHC.Real.$fIntegralInt (mySum (enumFromTo @Int GHC.Enum.$fEnumInt (GHC.Types.I# 0#) k)) of {
        False -> \ (n :: Int) -> z n;
        True -> \ (n :: Int) -> + @Int GHC.Num.$fNumInt n (GHC.Types.I# 1#)
      }



