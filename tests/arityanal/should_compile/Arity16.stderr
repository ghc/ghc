
==================== Tidy Core ====================
Result size of Tidy Core = {terms: 53, types: 71, coercions: 0, joins: 0/0}

Rec {
-- RHS size: {terms: 15, types: 15, coercions: 0, joins: 0/0}
map2 [Occ=LoopBreaker] :: forall {t} {a}. (t -> a) -> [t] -> [a]
[GblId, Arity=2, Str=<L><1L>, Unf=OtherCon []]
map2
  = \ (@t) (@a) (f :: t -> a) (ds :: [t]) ->
      case ds of {
        [] -> GHC.Types.[] @a;
        : x xs -> GHC.Types.: @a (f x) (map2 @t @a f xs)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
lvl = "Arity16.hs:(6,1)-(7,47)|function zipWith2"#

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
lvl1 :: ()
[GblId, Str=b, Cpr=b]
lvl1 = Control.Exception.Base.patError @GHC.Types.LiftedRep @() lvl

Rec {
-- RHS size: {terms: 31, types: 32, coercions: 0, joins: 0/0}
zipWith2 [Occ=LoopBreaker] :: forall {t1} {t2} {a}. (t1 -> t2 -> a) -> [t1] -> [t2] -> [a]
[GblId, Arity=3, Str=<LC(L,C(1,L))><1L><1L>, Unf=OtherCon []]
zipWith2
  = \ (@t) (@t1) (@a) (f :: t -> t1 -> a) (ds :: [t]) (ds1 :: [t1]) ->
      case ds of {
        [] ->
          case ds1 of {
            [] -> GHC.Types.[] @a;
            : ipv ipv1 -> case lvl1 of wild2 { }
          };
        : a1 x ->
          case ds1 of {
            [] -> case lvl1 of wild2 { };
            : b y -> GHC.Types.: @a (f a1 b) (zipWith2 @t @t1 @a f x y)
          }
      }
end Rec }



