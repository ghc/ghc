
==================== Tidy Core ====================
Result size of Tidy Core = {terms: 28, types: 32, coercions: 0, joins: 0/0}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
F10.f10f3 :: Integer
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
F10.f10f3 = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
F10.f10f2 :: Integer
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
F10.f10f2 = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
F10.f10f1 :: Integer
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
F10.f10f1 = 3

-- RHS size: {terms: 8, types: 7, coercions: 0, joins: 0/0}
f10f :: forall {a}. (Integer -> Integer -> a) -> (a, Integer -> a)
[GblId,
 Arity=1,
 Str=<L>,
 Cpr=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a) (h :: Integer -> Integer -> a) -> (h F10.f10f3 F10.f10f2, h F10.f10f1)}]
f10f = \ (@a) (h :: Integer -> Integer -> a) -> (h F10.f10f3 F10.f10f2, h F10.f10f1)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f10g :: Integer -> Integer -> Integer
[GblId, Arity=2, Str=<1L><SL>, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
f10g = GHC.Num.Integer.integerAdd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f10x1 :: Integer
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
f10x1 = F10.f10f1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f10x2 :: Integer -> Integer
[GblId, Arity=1, Str=<SL>, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
f10x2 = GHC.Num.Integer.integerAdd F10.f10f1

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
f10h :: (Integer, Integer -> Integer)
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
f10h = (F10.f10f1, f10x2)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f10 :: Integer
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
f10 = 6



