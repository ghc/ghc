
==================== Tidy Core ====================
Result size of Tidy Core = {terms: 136, types: 75, coercions: 0, joins: 2/7}

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
F11.fib3 :: Integer
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
F11.fib3 = GHC.Num.Integer.IS 1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
F11.fib2 :: Integer
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
F11.fib2 = GHC.Num.Integer.IS 2#

Rec {
-- RHS size: {terms: 38, types: 13, coercions: 0, joins: 2/2}
F11.f11_fib [Occ=LoopBreaker] :: Integer -> Integer
[GblId, Arity=1, Str=<SL>, Unf=OtherCon []]
F11.f11_fib
  = \ (ds :: Integer) ->
      join {
        $j [Dmd=ML] :: Integer
        [LclId[JoinId(0)(Nothing)]]
        $j
          = join {
              $j1 [Dmd=ML] :: Integer
              [LclId[JoinId(0)(Nothing)]]
              $j1 = GHC.Num.Integer.integerAdd (F11.f11_fib (GHC.Num.Integer.integerSub ds F11.fib3)) (F11.f11_fib (GHC.Num.Integer.integerSub ds F11.fib2)) } in
            case ds of {
              GHC.Num.Integer.IS x1 ->
                case x1 of {
                  __DEFAULT -> jump $j1;
                  1# -> F11.fib3
                };
              GHC.Num.Integer.IP x1 -> jump $j1;
              GHC.Num.Integer.IN x1 -> jump $j1
            } } in
      case ds of {
        GHC.Num.Integer.IS x1 ->
          case x1 of {
            __DEFAULT -> jump $j;
            0# -> F11.fib3
          };
        GHC.Num.Integer.IP x1 -> jump $j;
        GHC.Num.Integer.IN x1 -> jump $j
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
F11.fib1 :: Integer
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
F11.fib1 = GHC.Num.Integer.IS 0#

-- RHS size: {terms: 54, types: 27, coercions: 0, joins: 0/5}
fib :: forall {t} {a}. (Eq t, Num t, Num a) => t -> a
[GblId, Arity=4, Str=<SP(SC(S,C(1,L)),A)><LP(A,LC(L,C(1,L)),A,A,A,A,L)><LP(LC(S,C(1,L)),A,A,A,A,A,MC(1,L))><L>, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 150 60 0] 480 0}]
fib
  = \ (@t) (@a) ($dEq :: Eq t) ($dNum :: Num t) ($dNum1 :: Num a) (eta :: t) ->
      let {
        lvl :: t
        [LclId]
        lvl = fromInteger @t $dNum F11.fib3 } in
      let {
        lvl1 :: t
        [LclId]
        lvl1 = fromInteger @t $dNum F11.fib2 } in
      let {
        lvl2 :: a
        [LclId]
        lvl2 = fromInteger @a $dNum1 F11.fib3 } in
      let {
        lvl3 :: t
        [LclId]
        lvl3 = fromInteger @t $dNum F11.fib1 } in
      letrec {
        fib4 [Occ=LoopBreaker, Dmd=SC(S,L)] :: t -> a
        [LclId, Arity=1, Str=<L>, Unf=OtherCon []]
        fib4
          = \ (ds :: t) ->
              case == @t $dEq ds lvl3 of {
                False ->
                  case == @t $dEq ds lvl of {
                    False -> + @a $dNum1 (fib4 (- @t $dNum ds lvl)) (fib4 (- @t $dNum ds lvl1));
                    True -> lvl2
                  };
                True -> lvl2
              }; } in
      fib4 eta

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
F11.f3 :: Integer
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
F11.f3 = GHC.Num.Integer.IS 1000#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
F11.f11_x :: Integer
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False, WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
F11.f11_x = F11.f11_fib F11.f3

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
F11.f11f1 :: Integer -> Integer
[GblId, Arity=1, Str=<SL>, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 30 0}]
F11.f11f1 = \ (y :: Integer) -> GHC.Num.Integer.integerAdd F11.f11_x y

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
f11f :: forall {p}. p -> Integer -> Integer
[GblId, Arity=2, Str=<A><SL>, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
f11f = \ (@p) _ [Occ=Dead] -> F11.f11f1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
F11.f5 :: Integer
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
F11.f5 = GHC.Num.Integer.IS 6#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
F11.f4 :: Integer
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False, WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
F11.f4 = GHC.Num.Integer.integerAdd F11.f11_x F11.f5

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
F11.f2 :: Integer
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
F11.f2 = GHC.Num.Integer.IS 8#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
F11.f1 :: Integer
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False, WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
F11.f1 = GHC.Num.Integer.integerAdd F11.f11_x F11.f2

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
f11 :: (Integer, Integer)
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
f11 = (F11.f4, F11.f1)


------ Local rules for imported ids --------
"SPEC fib @Integer @Integer" forall ($dEq :: Eq Integer) ($dNum :: Num Integer) ($dNum1 :: Num Integer). fib @Integer @Integer $dEq $dNum $dNum1 = F11.f11_fib


