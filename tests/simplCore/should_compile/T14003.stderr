
==================== SpecConstr ====================
Result size of SpecConstr
  = {terms: 179, types: 124, coercions: 0, joins: 0/0}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sF4 :: Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 20 0}]
$trModule_sF4 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sF5 :: GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
$trModule_sF5 = GHC.Types.TrNameS $trModule_sF4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sF6 :: Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 30 0}]
$trModule_sF6 = "T14003"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sF7 :: GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
$trModule_sF7 = GHC.Types.TrNameS $trModule_sF6

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
T14003.$trModule :: GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
T14003.$trModule = GHC.Types.Module $trModule_sF5 $trModule_sF7

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sFY :: Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 100 0}]
lvl_sFY = "T14003.hs:(14,1)-(16,39)|function hi"#

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
lvl_sFp :: ()
[LclId,
 Str=b,
 Cpr=b,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=False, ConLike=False, WorkFree=False, Expandable=False,
         Guidance=NEVER}]
lvl_sFp = Control.Exception.Base.patError @LiftedRep @() lvl_sFY

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sFm :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
lvl_sFm = GHC.Types.I# 42#

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_sFn :: Maybe Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
lvl_sFn = GHC.Maybe.Just @Int lvl_sFm

Rec {
-- RHS size: {terms: 8, types: 4, coercions: 0, joins: 0/0}
$s$whi_sGi :: Int# -> Int -> Int#
[LclId[StrictWorker([])], Arity=2, Str=<L><L>]
$s$whi_sGi
  = \ (sc_sGf :: Int#) (sc_sGe :: Int) ->
      $whi_sFB
        GHC.Types.SPEC
        (GHC.Maybe.Just @Int sc_sGe)
        lvl_sFn
        (GHC.Maybe.Nothing @Int)

-- RHS size: {terms: 11, types: 5, coercions: 0, joins: 0/0}
$s$whi_sGa :: Int# -> Int# -> Int -> Int#
[LclId[StrictWorker([])], Arity=3, Str=<L><L><L>]
$s$whi_sGa
  = \ (sc_sG5 :: Int#) (sc_sG4 :: Int#) (sc_sG3 :: Int) ->
      case sc_sG3 of { I# x_aFe -> +# (+# x_aFe sc_sG4) sc_sG5 }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$s$whi_sGb :: Int -> Int#
[LclId[StrictWorker([])], Arity=1, Str=<L>]
$s$whi_sGb = \ (sc_sG6 :: Int) -> 42#

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$s$whi_sGc :: Int -> Int#
[LclId[StrictWorker([])], Arity=1, Str=<L>]
$s$whi_sGc = \ (sc_sG7 :: Int) -> 42#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$s$whi_sGd :: Int -> Int -> Int#
[LclId[StrictWorker([])], Arity=2, Str=<L><L>]
$s$whi_sGd = \ (sc_sG9 :: Int) (sc_sG8 :: Int) -> 42#

-- RHS size: {terms: 47, types: 26, coercions: 0, joins: 0/0}
$whi_sFB [InlPrag=[2], Occ=LoopBreaker]
  :: SPEC -> Maybe Int -> Maybe Int -> Maybe Int -> Int#
[LclId[StrictWorker([])],
 Arity=4,
 Str=<SL><SL><L><L>,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 30 80 62] 212 0},
 RULES: "SC:$whi4" [2]
            forall (sc_sGf :: Int#) (sc_sGe :: Int).
              $whi_sFB GHC.Types.SPEC
                       (GHC.Maybe.Just @Int sc_sGe)
                       (GHC.Maybe.Just @Int (GHC.Types.I# sc_sGf))
                       (GHC.Maybe.Nothing @Int)
              = $s$whi_sGi sc_sGf sc_sGe
        "SC:$whi0" [2]
            forall (sc_sG5 :: Int#) (sc_sG4 :: Int#) (sc_sG3 :: Int).
              $whi_sFB GHC.Types.SPEC
                       (GHC.Maybe.Just @Int sc_sG3)
                       (GHC.Maybe.Just @Int (GHC.Types.I# sc_sG4))
                       (GHC.Maybe.Just @Int (GHC.Types.I# sc_sG5))
              = $s$whi_sGa sc_sG5 sc_sG4 sc_sG3
        "SC:$whi1" [2]
            forall (sc_sG6 :: Int).
              $whi_sFB GHC.Types.SPEC
                       (GHC.Maybe.Nothing @Int)
                       (GHC.Maybe.Just @Int sc_sG6)
                       (GHC.Maybe.Nothing @Int)
              = $s$whi_sGb sc_sG6
        "SC:$whi2" [2]
            forall (sc_sG7 :: Int).
              $whi_sFB GHC.Types.SPEC
                       (GHC.Maybe.Nothing @Int)
                       (GHC.Maybe.Nothing @Int)
                       (GHC.Maybe.Just @Int sc_sG7)
              = $s$whi_sGc sc_sG7
        "SC:$whi3" [2]
            forall (sc_sG9 :: Int) (sc_sG8 :: Int).
              $whi_sFB GHC.Types.SPEC
                       (GHC.Maybe.Nothing @Int)
                       (GHC.Maybe.Just @Int sc_sG8)
                       (GHC.Maybe.Just @Int sc_sG9)
              = $s$whi_sGd sc_sG9 sc_sG8]
$whi_sFB
  = \ (ds_sFv [Dmd=SL] :: SPEC)
      (ds_sFw [Dmd=SL] :: Maybe Int)
      (ds_sFx :: Maybe Int)
      (ds_sFy :: Maybe Int) ->
      case ds_sFv of {
        SPEC ->
          case ds_sFw of wild_X2 [Dmd=A] {
            Nothing -> 42#;
            Just x_ayD [Dmd=S] ->
              case ds_sFx of {
                Nothing ->
                  $whi_sFB GHC.Types.SPEC wild_X2 lvl_sFn (GHC.Maybe.Nothing @Int);
                Just y_ayE [Dmd=S!P(S)] ->
                  case ds_sFy of {
                    Nothing ->
                      $whi_sFB GHC.Types.SPEC wild_X2 lvl_sFn (GHC.Maybe.Nothing @Int);
                    Just z_ayF [Dmd=S!P(S)] ->
                      case x_ayD of { I# x_aFe ->
                      case y_ayE of { I# y_aFh ->
                      case z_ayF of { I# y_X7 -> +# (+# x_aFe y_aFh) y_X7 }
                      }
                      }
                  }
              }
          };
        SPEC2 -> case lvl_sFp of {}
      }
end Rec }

-- RHS size: {terms: 13, types: 8, coercions: 0, joins: 0/0}
hi [InlPrag=[2]]
  :: SPEC -> Maybe Int -> Maybe Int -> Maybe Int -> Int
[LclId,
 Arity=4,
 Str=<SL><SL><L><L>,
 Cpr=1,
 Unf=Unf{Src=StableSystem, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_sFv [Occ=Once1, Dmd=SL] :: SPEC)
                 (ds_sFw [Occ=Once1, Dmd=SL] :: Maybe Int)
                 (ds_sFx [Occ=Once1] :: Maybe Int)
                 (ds_sFy [Occ=Once1] :: Maybe Int) ->
                 case $whi_sFB ds_sFv ds_sFw ds_sFx ds_sFy of ww_sFS [Occ=Once1]
                 { __DEFAULT ->
                 GHC.Types.I# ww_sFS
                 }}]
hi
  = \ (ds_sFv [Dmd=SL] :: SPEC)
      (ds_sFw [Dmd=SL] :: Maybe Int)
      (ds_sFx :: Maybe Int)
      (ds_sFy :: Maybe Int) ->
      case $whi_sFB ds_sFv ds_sFw ds_sFx ds_sFy of ww_sFS { __DEFAULT ->
      GHC.Types.I# ww_sFS
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sFq :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
lvl_sFq = GHC.Types.I# 4#

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_sFr :: Maybe Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
lvl_sFr = GHC.Maybe.Just @Int lvl_sFq

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sFs :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
lvl_sFs = GHC.Types.I# 0#

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_sFt :: Maybe Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
lvl_sFt = GHC.Maybe.Just @Int lvl_sFs

-- RHS size: {terms: 11, types: 3, coercions: 0, joins: 0/0}
pat1 :: Int -> Int
[LclIdX,
 Arity=1,
 Str=<L>,
 Cpr=1,
 Unf=Unf{Src=StableSystem, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_aBn [Occ=Once1] :: Int) ->
                 hi GHC.Types.SPEC (GHC.Maybe.Just @Int n_aBn) lvl_sFr lvl_sFt}]
pat1
  = \ (n_aBn :: Int) ->
      case $whi_sFB
             GHC.Types.SPEC (GHC.Maybe.Just @Int n_aBn) lvl_sFr lvl_sFt
      of ww_sFS
      { __DEFAULT ->
      GHC.Types.I# ww_sFS
      }

-- RHS size: {terms: 11, types: 5, coercions: 0, joins: 0/0}
pat2 :: Int -> Int
[LclIdX,
 Arity=1,
 Str=<L>,
 Cpr=1,
 Unf=Unf{Src=StableSystem, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_aBo [Occ=Once1] :: Int) ->
                 hi
                   GHC.Types.SPEC
                   (GHC.Maybe.Nothing @Int)
                   (GHC.Maybe.Just @Int n_aBo)
                   (GHC.Maybe.Nothing @Int)}]
pat2
  = \ (n_aBo :: Int) ->
      case $whi_sFB
             GHC.Types.SPEC
             (GHC.Maybe.Nothing @Int)
             (GHC.Maybe.Just @Int n_aBo)
             (GHC.Maybe.Nothing @Int)
      of ww_sFS
      { __DEFAULT ->
      GHC.Types.I# ww_sFS
      }

-- RHS size: {terms: 11, types: 5, coercions: 0, joins: 0/0}
pat3 :: Int -> Int
[LclIdX,
 Arity=1,
 Str=<L>,
 Cpr=1,
 Unf=Unf{Src=StableSystem, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_aBp [Occ=Once1] :: Int) ->
                 hi
                   GHC.Types.SPEC
                   (GHC.Maybe.Nothing @Int)
                   (GHC.Maybe.Nothing @Int)
                   (GHC.Maybe.Just @Int n_aBp)}]
pat3
  = \ (n_aBp :: Int) ->
      case $whi_sFB
             GHC.Types.SPEC
             (GHC.Maybe.Nothing @Int)
             (GHC.Maybe.Nothing @Int)
             (GHC.Maybe.Just @Int n_aBp)
      of ww_sFS
      { __DEFAULT ->
      GHC.Types.I# ww_sFS
      }

-- RHS size: {terms: 12, types: 5, coercions: 0, joins: 0/0}
pat4 :: Int -> Int
[LclIdX,
 Arity=1,
 Str=<L>,
 Cpr=1,
 Unf=Unf{Src=StableSystem, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_aBq :: Int) ->
                 hi
                   GHC.Types.SPEC
                   (GHC.Maybe.Nothing @Int)
                   (GHC.Maybe.Just @Int n_aBq)
                   (GHC.Maybe.Just @Int n_aBq)}]
pat4
  = \ (n_aBq :: Int) ->
      case $whi_sFB
             GHC.Types.SPEC
             (GHC.Maybe.Nothing @Int)
             (GHC.Maybe.Just @Int n_aBq)
             (GHC.Maybe.Just @Int n_aBq)
      of ww_sFS
      { __DEFAULT ->
      GHC.Types.I# ww_sFS
      }



