
==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 32, types: 14, coercions: 0, joins: 1/1}

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
T22428.f1 :: Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
T22428.f1 = GHC.Internal.Bignum.Integer.IS 1#

-- RHS size: {terms: 28, types: 10, coercions: 0, joins: 1/1}
f :: Integer -> Integer -> Integer
[GblId,
 Arity=2,
 Str=<SL><1L>,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0] 140 0}]
f = \ (x :: Integer) (y :: Integer) ->
      joinrec {
        go [InlPrag=INLINE (sat-args=1), Occ=LoopBreaker, Dmd=SC(S,L)]
          :: Integer -> Integer
        [LclId[JoinId(1)(Just [!])],
         Arity=1,
         Str=<1L>,
         Unf=Unf{Src=StableUser, TopLvl=False,
                 Value=True, ConLike=True, WorkFree=True, Expandable=True,
                 Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=False)}]
        go (ds :: Integer)
          = case ds of x1 {
              GHC.Internal.Bignum.Integer.IS x2 ->
                case x2 of {
                  __DEFAULT ->
                    jump go (GHC.Internal.Bignum.Integer.integerSub x1 T22428.f1);
                  0# -> x
                };
              GHC.Internal.Bignum.Integer.IP x2 ->
                jump go (GHC.Internal.Bignum.Integer.integerSub x1 T22428.f1);
              GHC.Internal.Bignum.Integer.IN x2 ->
                jump go (GHC.Internal.Bignum.Integer.integerSub x1 T22428.f1)
            }; } in
      jump go y



