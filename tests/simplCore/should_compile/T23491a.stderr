[1 of 2] Compiling Main             ( T23491.hs, T23491.o )

==================== Float out(FOS {Lam = Just 0,
               Consts = True,
               JoinsToTop = False,
               OverSatApps = False}) ====================
Result size of Float out(FOS {Lam = Just 0,
               Consts = True,
               JoinsToTop = False,
               OverSatApps = False})
  = {terms: 25, types: 13, coercions: 0, joins: 0/0}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sBH :: GHC.Prim.Addr#
[LclId]
lvl_sBH = "Hello world"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sBI :: [Char]
[LclId]
lvl_sBI = GHC.CString.unpackCString# lvl_sBH

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
main :: IO ()
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=False, ConLike=False, WorkFree=False, Expandable=False,
         Guidance=IF_ARGS [] 80 0}]
main = putStrLn lvl_sBI

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=False, ConLike=False, WorkFree=False, Expandable=False,
         Guidance=IF_ARGS [] 20 0}]
:Main.main = GHC.TopHandler.runMainIO @() main

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sBJ :: GHC.Prim.Addr#
[LclId]
lvl_sBJ = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sBK :: GHC.Types.TrName
[LclId]
lvl_sBK = GHC.Types.TrNameS lvl_sBJ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sBL :: GHC.Prim.Addr#
[LclId]
lvl_sBL = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sBM :: GHC.Types.TrName
[LclId]
lvl_sBM = GHC.Types.TrNameS lvl_sBL

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 70 10}]
Main.$trModule = GHC.Types.Module lvl_sBK lvl_sBM




==================== Float out(FOS {Lam = Just 0,
               Consts = True,
               JoinsToTop = True,
               OverSatApps = True}) ====================
Result size of Float out(FOS {Lam = Just 0,
               Consts = True,
               JoinsToTop = True,
               OverSatApps = True})
  = {terms: 25, types: 13, coercions: 0, joins: 0/0}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sBH :: GHC.Prim.Addr#
[LclId]
lvl_sBH = "Hello world"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sBI :: [Char]
[LclId]
lvl_sBI = GHC.CString.unpackCString# lvl_sBH

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
main :: IO ()
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=False, ConLike=False, WorkFree=False, Expandable=False,
         Guidance=IF_ARGS [] 80 0}]
main = putStrLn lvl_sBI

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=False, ConLike=False, WorkFree=False, Expandable=False,
         Guidance=IF_ARGS [] 20 0}]
:Main.main = GHC.TopHandler.runMainIO @() main

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sBJ :: GHC.Prim.Addr#
[LclId]
lvl_sBJ = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sBK :: GHC.Types.TrName
[LclId]
lvl_sBK = GHC.Types.TrNameS lvl_sBJ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sBL :: GHC.Prim.Addr#
[LclId]
lvl_sBL = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sBM :: GHC.Types.TrName
[LclId]
lvl_sBM = GHC.Types.TrNameS lvl_sBL

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 70 10}]
Main.$trModule = GHC.Types.Module lvl_sBK lvl_sBM



[2 of 2] Linking T23491
