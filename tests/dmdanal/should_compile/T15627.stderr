
==================== Tidy Core ====================
Result size of Tidy Core = {terms: 266, types: 128, coercions: 0, joins: 3/3}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Unlifted.$trModule4 :: Addr#
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Unlifted.$trModule4 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Unlifted.$trModule3 :: GHC.Types.TrName
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Unlifted.$trModule3 = GHC.Types.TrNameS Unlifted.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Unlifted.$trModule2 :: Addr#
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Unlifted.$trModule2 = "Unlifted"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Unlifted.$trModule1 :: GHC.Types.TrName
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Unlifted.$trModule1 = GHC.Types.TrNameS Unlifted.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Unlifted.$trModule :: GHC.Types.Module
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Unlifted.$trModule = GHC.Types.Module Unlifted.$trModule3 Unlifted.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r1d0 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep_r1d0 = GHC.Types.KindRepTyConApp GHC.Types.$tc'Lifted (GHC.Types.[] @GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_r1d1 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep1_r1d1 = GHC.Types.KindRepTyConApp GHC.Types.$tcInt (GHC.Types.[] @GHC.Types.KindRep)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep2_r1d2 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep2_r1d2 = GHC.Types.KindRepVar 1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep3_r1d3 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep3_r1d3 = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep4_r1d4 :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep4_r1d4 = GHC.Types.: @GHC.Types.KindRep $krep3_r1d3 (GHC.Types.[] @GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep5_r1d5 :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep5_r1d5 = GHC.Types.: @GHC.Types.KindRep $krep_r1d0 $krep4_r1d4

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep6_r1d6 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep6_r1d6 = GHC.Types.KindRepTyConApp GHC.Types.$tcArray# $krep5_r1d5

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep7_r1d7 :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep7_r1d7 = GHC.Types.: @GHC.Types.KindRep $krep2_r1d2 (GHC.Types.[] @GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep8_r1d8 :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep8_r1d8 = GHC.Types.: @GHC.Types.KindRep $krep3_r1d3 $krep7_r1d7

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep9_r1d9 :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep9_r1d9 = GHC.Types.: @GHC.Types.KindRep $krep_r1d0 $krep8_r1d8

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep10_r1da :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep10_r1da = GHC.Types.KindRepTyConApp GHC.Types.$tcMutVar# $krep9_r1d9

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Unlifted.$tcMMutVar2 :: Addr#
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Unlifted.$tcMMutVar2 = "MMutVar"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Unlifted.$tcMMutVar1 :: GHC.Types.TrName
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Unlifted.$tcMMutVar1 = GHC.Types.TrNameS Unlifted.$tcMMutVar2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Unlifted.$tcMMutVar :: GHC.Types.TyCon
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Unlifted.$tcMMutVar
  = GHC.Types.TyCon
      976071122164149049#Word64 18076036821450447502#Word64 Unlifted.$trModule Unlifted.$tcMMutVar1 0# GHC.Types.krep$*->*->*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep11_r1db :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep11_r1db = GHC.Types.KindRepTyConApp Unlifted.$tcMMutVar $krep8_r1d8

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep12_r1dc :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep12_r1dc = GHC.Types.KindRepFun $krep1_r1d1 $krep11_r1db

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Unlifted.$tc'MMutVar1 [InlPrag=[~]] :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
Unlifted.$tc'MMutVar1 = GHC.Types.KindRepFun $krep10_r1da $krep12_r1dc

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Unlifted.$tc'MMutVar3 :: Addr#
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Unlifted.$tc'MMutVar3 = "'MMutVar"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Unlifted.$tc'MMutVar2 :: GHC.Types.TrName
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Unlifted.$tc'MMutVar2 = GHC.Types.TrNameS Unlifted.$tc'MMutVar3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Unlifted.$tc'MMutVar :: GHC.Types.TyCon
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Unlifted.$tc'MMutVar
  = GHC.Types.TyCon
      1807347364283186211#Word64 6245494011022471830#Word64 Unlifted.$trModule Unlifted.$tc'MMutVar2 2# Unlifted.$tc'MMutVar1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Unlifted.$tcAArray2 :: Addr#
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Unlifted.$tcAArray2 = "AArray"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Unlifted.$tcAArray1 :: GHC.Types.TrName
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Unlifted.$tcAArray1 = GHC.Types.TrNameS Unlifted.$tcAArray2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Unlifted.$tcAArray :: GHC.Types.TyCon
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Unlifted.$tcAArray
  = GHC.Types.TyCon
      15463012197909582608#Word64 8369862272173810511#Word64 Unlifted.$trModule Unlifted.$tcAArray1 0# GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep13_r1dd :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep13_r1dd = GHC.Types.KindRepTyConApp Unlifted.$tcAArray $krep4_r1d4

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep14_r1de :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep14_r1de = GHC.Types.KindRepFun $krep1_r1d1 $krep13_r1dd

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Unlifted.$tc'AArray1 [InlPrag=[~]] :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
Unlifted.$tc'AArray1 = GHC.Types.KindRepFun $krep6_r1d6 $krep14_r1de

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Unlifted.$tc'AArray3 :: Addr#
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Unlifted.$tc'AArray3 = "'AArray"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Unlifted.$tc'AArray2 :: GHC.Types.TrName
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Unlifted.$tc'AArray2 = GHC.Types.TrNameS Unlifted.$tc'AArray3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Unlifted.$tc'AArray :: GHC.Types.TyCon
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Unlifted.$tc'AArray
  = GHC.Types.TyCon
      5117353292610538775#Word64 18288923674485681885#Word64 Unlifted.$trModule Unlifted.$tc'AArray2 1# Unlifted.$tc'AArray1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Unlifted.fac1 :: Int
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Unlifted.fac1 = GHC.Types.I# 1#

-- RHS size: {terms: 34, types: 10, coercions: 0, joins: 1/1}
fac :: Int -> Int
[GblId,
 Arity=1,
 Str=<1!P(L)>,
 Cpr=1,
 Unf=Unf{Src=StableSystem, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_ayj [Occ=Once1!] :: Int) ->
                 case n_ayj of { I# y_a1bo ->
                 case ># 1# y_a1bo of {
                   __DEFAULT ->
                     joinrec {
                       go3_a1bC [InlPrag=[2], Occ=T[2]] :: Int# -> Int -> Int
                       [LclId[JoinId(2)(Just [~, !])],
                        Arity=2,
                        Str=<L><S!P(L)>,
                        Unf=Unf{Src=StableSystem, TopLvl=False, Value=True, ConLike=True, WorkFree=True, Expandable=True,
                                Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
                                Tmpl= \ (x_s1bI [Occ=Once1] :: Int#) (v_s1bJ [Occ=Once1!, OS=OneShot] :: Int) ->
                                        case v_s1bJ of { I# ww_s1bL [Occ=Once1] -> jump $wgo3_s1bO x_s1bI ww_s1bL }}]
                       go3_a1bC (x_s1bI [Occ=Once1] :: Int#) (v_s1bJ [Occ=Once1!, OS=OneShot] :: Int)
                         = case v_s1bJ of { I# ww_s1bL [Occ=Once1] -> jump $wgo3_s1bO x_s1bI ww_s1bL };
                       $wgo3_s1bO [InlPrag=[2], Occ=LoopBreakerT[2]] :: Int# -> Int# -> Int
                       [LclId[JoinId(2)(Nothing)], Arity=2, Str=<L><L>, Unf=OtherCon []]
                       $wgo3_s1bO (x_s1bI :: Int#) (ww_s1bL [Occ=Once2] :: Int#)
                         = case ==# x_s1bI y_a1bo of {
                             __DEFAULT -> jump go3_a1bC (+# x_s1bI 1#) (GHC.Types.I# (*# ww_s1bL x_s1bI));
                             1# -> GHC.Types.I# (*# ww_s1bL x_s1bI)
                           }; } in
                     jump go3_a1bC 1# Unlifted.fac1;
                   1# -> Unlifted.fac1
                 }
                 }}]
fac
  = \ (n_ayj :: Int) ->
      case n_ayj of { I# y_a1bo ->
      case ># 1# y_a1bo of {
        __DEFAULT ->
          joinrec {
            $wgo3_s1bO [InlPrag=[2], Occ=LoopBreaker, Dmd=SC(S,C(1,!P(L)))] :: Int# -> Int# -> Int
            [LclId[JoinId(2)(Nothing)], Arity=2, Str=<L><L>, Unf=OtherCon []]
            $wgo3_s1bO (x_s1bI :: Int#) (ww_s1bL :: Int#)
              = case ==# x_s1bI y_a1bo of {
                  __DEFAULT -> jump $wgo3_s1bO (+# x_s1bI 1#) (*# ww_s1bL x_s1bI);
                  1# -> GHC.Types.I# (*# ww_s1bL x_s1bI)
                }; } in
          jump $wgo3_s1bO 1# 1#;
        1# -> Unlifted.fac1
      }
      }

-- RHS size: {terms: 32, types: 10, coercions: 0, joins: 1/1}
Unlifted.$wmutVar [InlPrag=NOINLINE] :: forall s a. Int# -> Int#
[GblId, Arity=1, Str=<L>, Unf=OtherCon []]
Unlifted.$wmutVar
  = \ (@s_s1bX) (@a_s1bY) (ww_s1c4 :: Int#) ->
      case ># 1# ww_s1c4 of {
        __DEFAULT ->
          joinrec {
            $wgo3_s1bO [InlPrag=[2], Occ=LoopBreaker, Dmd=SC(S,C(1,L))] :: Int# -> Int# -> Int#
            [LclId[JoinId(2)(Nothing)], Arity=2, Str=<L><L>, Unf=OtherCon []]
            $wgo3_s1bO (x_s1bI :: Int#) (ww1_s1bL :: Int#)
              = case ==# x_s1bI ww_s1c4 of {
                  __DEFAULT -> jump $wgo3_s1bO (+# x_s1bI 1#) (*# ww1_s1bL x_s1bI);
                  1# -> *# ww1_s1bL x_s1bI
                }; } in
          jump $wgo3_s1bO 1# 1#;
        1# -> 1#
      }

-- RHS size: {terms: 15, types: 18, coercions: 0, joins: 0/0}
mutVar [InlPrag=NOINLINE[final]] :: forall s a. MMutVar s a -> Int
[GblId,
 Arity=1,
 Str=<1!P(A,1!P(L))>,
 Cpr=1,
 Unf=Unf{Src=StableSystem, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@s_s1bX) (@a_s1bY) (ds_s1bZ [Occ=Once1!] :: MMutVar s_s1bX a_s1bY) ->
                 case ds_s1bZ of { MMutVar _ [Occ=Dead] ww1_s1c2 [Occ=Once1!] ->
                 case ww1_s1c2 of { I# ww2_s1c4 [Occ=Once1] ->
                 case Unlifted.$wmutVar @s_s1bX @a_s1bY ww2_s1c4 of ww3_s1cn [Occ=Once1] { __DEFAULT -> GHC.Types.I# ww3_s1cn }
                 }
                 }}]
mutVar
  = \ (@s_s1bX) (@a_s1bY) (ds_s1bZ :: MMutVar s_s1bX a_s1bY) ->
      case ds_s1bZ of { MMutVar ww_s1c1 ww1_s1c2 ->
      case ww1_s1c2 of { I# ww2_s1c4 ->
      case Unlifted.$wmutVar @s_s1bX @a_s1bY ww2_s1c4 of ww3_s1cn { __DEFAULT -> GHC.Types.I# ww3_s1cn }
      }
      }

-- RHS size: {terms: 31, types: 9, coercions: 0, joins: 1/1}
Unlifted.$warray [InlPrag=NOINLINE] :: forall a. Int# -> Int#
[GblId, Arity=1, Str=<L>, Unf=OtherCon []]
Unlifted.$warray
  = \ (@a_s1cb) (ww_s1ch :: Int#) ->
      case ># 1# ww_s1ch of {
        __DEFAULT ->
          joinrec {
            $wgo3_s1bO [InlPrag=[2], Occ=LoopBreaker, Dmd=SC(S,C(1,L))] :: Int# -> Int# -> Int#
            [LclId[JoinId(2)(Nothing)], Arity=2, Str=<L><L>, Unf=OtherCon []]
            $wgo3_s1bO (x_s1bI :: Int#) (ww1_s1bL :: Int#)
              = case ==# x_s1bI ww_s1ch of {
                  __DEFAULT -> jump $wgo3_s1bO (+# x_s1bI 1#) (*# ww1_s1bL x_s1bI);
                  1# -> *# ww1_s1bL x_s1bI
                }; } in
          jump $wgo3_s1bO 1# 1#;
        1# -> 1#
      }

-- RHS size: {terms: 14, types: 13, coercions: 0, joins: 0/0}
array [InlPrag=NOINLINE[final]] :: forall a. AArray a -> Int
[GblId,
 Arity=1,
 Str=<1!P(A,1!P(L))>,
 Cpr=1,
 Unf=Unf{Src=StableSystem, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_s1cb) (ds_s1cc [Occ=Once1!] :: AArray a_s1cb) ->
                 case ds_s1cc of { AArray _ [Occ=Dead] ww1_s1cf [Occ=Once1!] ->
                 case ww1_s1cf of { I# ww2_s1ch [Occ=Once1] ->
                 case Unlifted.$warray @a_s1cb ww2_s1ch of ww3_s1cp [Occ=Once1] { __DEFAULT -> GHC.Types.I# ww3_s1cp }
                 }
                 }}]
array
  = \ (@a_s1cb) (ds_s1cc :: AArray a_s1cb) ->
      case ds_s1cc of { AArray ww_s1ce ww1_s1cf ->
      case ww1_s1cf of { I# ww2_s1ch -> case Unlifted.$warray @a_s1cb ww2_s1ch of ww3_s1cp { __DEFAULT -> GHC.Types.I# ww3_s1cp } }
      }



