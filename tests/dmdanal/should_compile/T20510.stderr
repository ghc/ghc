
==================== Exitification transformation ====================
Result size of Exitification transformation
  = {terms: 50, types: 22, coercions: 0, joins: 2/2}

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
lvl = GHC.Internal.Types.I# 0#

-- RHS size: {terms: 32, types: 14, coercions: 0, joins: 2/2}
small :: Int -> Int
[LclIdX,
 Arity=1,
 Str=<S!P(SL)>,
 Cpr=1,
 Unf=Unf{Src=StableSystem, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x [Dmd=S!P(SL)] :: Int) ->
                 joinrec {
                   go [InlPrag=[2], Occ=T[2], Dmd=LC(S,C(1,!P(L)))]
                     :: Int -> Int -> Int
                   [LclId[JoinId(2)(Nothing)],
                    Arity=2,
                    Str=<S!P(L)><S!P(SL)>,
                    Unf=Unf{Src=StableSystem, TopLvl=False,
                            Value=True, ConLike=True, WorkFree=True, Expandable=True,
                            Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
                            Tmpl= \ (z [Occ=Once1!, Dmd=S!P(L)] :: Int)
                                    (ds [Occ=Once1!, Dmd=S!P(SL)] :: Int) ->
                                    case z of { GHC.Internal.Types.I# ww [Occ=Once1] ->
                                    case ds of { GHC.Internal.Types.I# ww [Occ=Once1, Dmd=SL] ->
                                    jump $wgo ww ww
                                    }
                                    }}]
                   go (z [Occ=Once1!, Dmd=S!P(L)] :: Int)
                      (ds [Occ=Once1!, Dmd=S!P(SL)] :: Int)
                     = case z of { GHC.Internal.Types.I# ww [Occ=Once1] ->
                       case ds of { GHC.Internal.Types.I# ww [Occ=Once1, Dmd=SL] ->
                       jump $wgo ww ww
                       }
                       };
                   $wgo [InlPrag=[2], Occ=LoopBreakerT[2]]
                     :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> Int
                   [LclId[JoinId(2)(Just [])],
                    Arity=2,
                    Str=<L><SL>,
                    Unf=Unf{Src=<vanilla>, TopLvl=False,
                            Value=True, ConLike=True, WorkFree=True, Expandable=True,
                            Guidance=IF_ARGS [0 51] 63 10}]
                   $wgo (ww [Occ=Once2] :: GHC.Internal.Prim.Int#)
                        (ww [Occ=Once1!, Dmd=SL] :: GHC.Internal.Prim.Int#)
                     = case ww of ds {
                         __DEFAULT ->
                           jump go
                             (GHC.Internal.Types.I# (GHC.Internal.Prim.+# ww ds))
                             (GHC.Internal.Types.I# (GHC.Internal.Prim.-# ds 1#));
                         0# ->
                           case x of { GHC.Internal.Types.I# y [Occ=Once1] ->
                           GHC.Internal.Types.I# (GHC.Internal.Prim.*# ww y)
                           }
                       }; } in
                 jump go lvl x}]
small
  = \ (x [Dmd=S!P(SL)] :: Int) ->
      join {
        exit :: GHC.Internal.Prim.Int# -> Int
        [LclId[JoinId(1)(Nothing)]]
        exit (ww :: GHC.Internal.Prim.Int#)
          = case x of { GHC.Internal.Types.I# y ->
            GHC.Internal.Types.I# (GHC.Internal.Prim.*# ww y)
            } } in
      joinrec {
        $wgo [InlPrag=[2], Occ=LoopBreaker]
          :: GHC.Internal.Prim.Int# -> GHC.Internal.Prim.Int# -> Int
        [LclId[JoinId(2)(Just [])],
         Arity=2,
         Str=<L><SL>,
         Unf=Unf{Src=<vanilla>, TopLvl=False,
                 Value=True, ConLike=True, WorkFree=True, Expandable=True,
                 Guidance=IF_ARGS [0 32] 43 10}]
        $wgo (ww :: GHC.Internal.Prim.Int#)
             (ww [Dmd=SL] :: GHC.Internal.Prim.Int#)
          = case ww of ds {
              __DEFAULT ->
                jump $wgo
                  (GHC.Internal.Prim.+# ww ds) (GHC.Internal.Prim.-# ds 1#);
              0# -> jump exit ww
            }; } in
      case x of { GHC.Internal.Types.I# ww [Dmd=SL] -> jump $wgo 0# ww }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule :: GHC.Internal.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 20 0}]
$trModule = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule :: GHC.Internal.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
$trModule = GHC.Internal.Types.TrNameS $trModule

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule :: GHC.Internal.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 30 0}]
$trModule = "T20510"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule :: GHC.Internal.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
$trModule = GHC.Internal.Types.TrNameS $trModule

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
T20510.$trModule :: GHC.Internal.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True,
         Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [] 10 10}]
T20510.$trModule = GHC.Internal.Types.Module $trModule $trModule



