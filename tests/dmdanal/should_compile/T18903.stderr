
==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 83, types: 50, coercions: 0, joins: 0/2}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
T18903.$trModule4 :: GHC.Prim.Addr#
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
T18903.$trModule4 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
T18903.$trModule3 :: GHC.Types.TrName
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
T18903.$trModule3 = GHC.Types.TrNameS T18903.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
T18903.$trModule2 :: GHC.Prim.Addr#
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
T18903.$trModule2 = "T18903"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
T18903.$trModule1 :: GHC.Types.TrName
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
T18903.$trModule1 = GHC.Types.TrNameS T18903.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
T18903.$trModule :: GHC.Types.Module
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
T18903.$trModule
  = GHC.Types.Module T18903.$trModule3 T18903.$trModule1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
T18903.h1 :: Int
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
T18903.h1 = GHC.Types.I# 0#

-- RHS size: {terms: 65, types: 42, coercions: 0, joins: 0/2}
h :: Int -> Int
[GblId,
 Arity=1,
 Str=<1P(SL)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 217 10}]
h = \ (m :: Int) ->
      case m of wild { GHC.Types.I# ds ->
      let {
        $wg [InlPrag=NOINLINE, Dmd=MC(1,!P(M!P(L),1!P(L)))]
          :: GHC.Prim.Int# -> (# Int, Int #)
        [LclId, Arity=1, Str=<1L>, Unf=OtherCon []]
        $wg
          = \ (ww [OS=OneShot] :: GHC.Prim.Int#) ->
              case ww of ds1 {
                __DEFAULT ->
                  (# GHC.Types.I# (GHC.Prim.*# 2# ds1),
                     case ds1 of wild1 {
                       __DEFAULT ->
                         let {
                           c1# :: GHC.Prim.Int#
                           [LclId]
                           c1# = GHC.Prim.andI# 1# (GHC.Prim.<# wild1 0#) } in
                         case GHC.Prim.-# (GHC.Prim.quotInt# (GHC.Prim.-# 2# c1#) wild1) c1#
                         of ds2
                         { __DEFAULT ->
                         GHC.Types.I# ds2
                         };
                       0# -> GHC.Real.divZeroError @Int
                     } #);
                1# -> (# wild, T18903.h1 #)
              } } in
      case ds of ds1 {
        __DEFAULT ->
          case $wg ds1 of { (# ww, ww1 #) ->
          case ww of { GHC.Types.I# x ->
          case ww1 of { GHC.Types.I# y -> GHC.Types.I# (GHC.Prim.+# x y) }
          }
          };
        1# -> T18903.h1;
        2# -> case $wg 2# of { (# ww, ww1 #) -> ww1 }
      }
      }



