T14590.hs:4:11: warning: [GHC-88464] [-Wtyped-holes (in -Wdefault)]
    • Found hole: _ :: Int -> Int -> Int
    • In the expression: x `_`
      In the expression: (x `_`) y
      In an equation for ‘f1’: f1 x y = (x `_`) y
    • Relevant bindings include
        y :: Int (bound at T14590.hs:4:6)
        x :: Int (bound at T14590.hs:4:4)
        f1 :: Int -> Int -> Int (bound at T14590.hs:4:1)
      Valid hole fits include
        f1 :: Int -> Int -> Int (bound at T14590.hs:4:1)
        f2 :: Int -> Int -> Int (bound at T14590.hs:5:1)
        f3 :: Int -> Int -> Int (bound at T14590.hs:6:1)
        f4 :: Int -> Int -> Int (bound at T14590.hs:7:1)
        (-) :: forall a. Num a => a -> a -> a
          with (-) @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Num’))
        asTypeOf :: forall a. a -> a -> a
          with asTypeOf @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Base’))
        const :: forall a b. a -> b -> a
          with const @Int @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Base’))
        subtract :: forall a. Num a => a -> a -> a
          with subtract @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Num’))
        (^) :: forall a b. (Num a, Integral b) => a -> b -> a
          with (^) @Int @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        gcd :: forall a. Integral a => a -> a -> a
          with gcd @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        lcm :: forall a. Integral a => a -> a -> a
          with lcm @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        max :: forall a. Ord a => a -> a -> a
          with max @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Classes’))
        min :: forall a. Ord a => a -> a -> a
          with min @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Classes’))
        (*) :: forall a. Num a => a -> a -> a
          with (*) @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Num’))
        (+) :: forall a. Num a => a -> a -> a
          with (+) @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Num’))
        div :: forall a. Integral a => a -> a -> a
          with div @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        mod :: forall a. Integral a => a -> a -> a
          with mod @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        quot :: forall a. Integral a => a -> a -> a
          with quot @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        rem :: forall a. Integral a => a -> a -> a
          with rem @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        seq :: forall a b. a -> b -> b
          with seq @Int @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Prim’))
        return :: forall (m :: * -> *) a. Monad m => a -> m a
          with return @((->) Int) @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Base’))
        pure :: forall (f :: * -> *) a. Applicative f => a -> f a
          with pure @((->) Int) @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Base’))

T14590.hs:5:11: warning: [GHC-88464] [-Wtyped-holes (in -Wdefault)]
    • Found hole: _a :: Int -> Int -> Int
      Or perhaps ‘_a’ is mis-spelled, or not in scope
    • In the expression: x `_a`
      In the expression: (x `_a`) y
      In an equation for ‘f2’: f2 x y = (x `_a`) y
    • Relevant bindings include
        y :: Int (bound at T14590.hs:5:6)
        x :: Int (bound at T14590.hs:5:4)
        f2 :: Int -> Int -> Int (bound at T14590.hs:5:1)
      Valid hole fits include
        f2 :: Int -> Int -> Int (bound at T14590.hs:5:1)
        f1 :: Int -> Int -> Int (defined at T14590.hs:4:1)
        f3 :: Int -> Int -> Int (bound at T14590.hs:6:1)
        f4 :: Int -> Int -> Int (bound at T14590.hs:7:1)
        (-) :: forall a. Num a => a -> a -> a
          with (-) @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Num’))
        asTypeOf :: forall a. a -> a -> a
          with asTypeOf @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Base’))
        const :: forall a b. a -> b -> a
          with const @Int @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Base’))
        subtract :: forall a. Num a => a -> a -> a
          with subtract @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Num’))
        (^) :: forall a b. (Num a, Integral b) => a -> b -> a
          with (^) @Int @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        gcd :: forall a. Integral a => a -> a -> a
          with gcd @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        lcm :: forall a. Integral a => a -> a -> a
          with lcm @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        max :: forall a. Ord a => a -> a -> a
          with max @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Classes’))
        min :: forall a. Ord a => a -> a -> a
          with min @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Classes’))
        (*) :: forall a. Num a => a -> a -> a
          with (*) @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Num’))
        (+) :: forall a. Num a => a -> a -> a
          with (+) @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Num’))
        div :: forall a. Integral a => a -> a -> a
          with div @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        mod :: forall a. Integral a => a -> a -> a
          with mod @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        quot :: forall a. Integral a => a -> a -> a
          with quot @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        rem :: forall a. Integral a => a -> a -> a
          with rem @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        seq :: forall a b. a -> b -> b
          with seq @Int @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Prim’))
        return :: forall (m :: * -> *) a. Monad m => a -> m a
          with return @((->) Int) @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Base’))
        pure :: forall (f :: * -> *) a. Applicative f => a -> f a
          with pure @((->) Int) @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Base’))

T14590.hs:6:11: warning: [GHC-88464] [-Wtyped-holes (in -Wdefault)]
    • Found hole: _ :: Int -> Int -> Int
    • In the expression: (`_` x) y
      In an equation for ‘f3’: f3 x y = (`_` x) y
    • Relevant bindings include
        y :: Int (bound at T14590.hs:6:6)
        x :: Int (bound at T14590.hs:6:4)
        f3 :: Int -> Int -> Int (bound at T14590.hs:6:1)
      Valid hole fits include
        f3 :: Int -> Int -> Int (bound at T14590.hs:6:1)
        f1 :: Int -> Int -> Int (defined at T14590.hs:4:1)
        f2 :: Int -> Int -> Int (defined at T14590.hs:5:1)
        f4 :: Int -> Int -> Int (bound at T14590.hs:7:1)
        (-) :: forall a. Num a => a -> a -> a
          with (-) @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Num’))
        asTypeOf :: forall a. a -> a -> a
          with asTypeOf @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Base’))
        const :: forall a b. a -> b -> a
          with const @Int @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Base’))
        subtract :: forall a. Num a => a -> a -> a
          with subtract @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Num’))
        (^) :: forall a b. (Num a, Integral b) => a -> b -> a
          with (^) @Int @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        gcd :: forall a. Integral a => a -> a -> a
          with gcd @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        lcm :: forall a. Integral a => a -> a -> a
          with lcm @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        max :: forall a. Ord a => a -> a -> a
          with max @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Classes’))
        min :: forall a. Ord a => a -> a -> a
          with min @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Classes’))
        (*) :: forall a. Num a => a -> a -> a
          with (*) @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Num’))
        (+) :: forall a. Num a => a -> a -> a
          with (+) @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Num’))
        div :: forall a. Integral a => a -> a -> a
          with div @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        mod :: forall a. Integral a => a -> a -> a
          with mod @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        quot :: forall a. Integral a => a -> a -> a
          with quot @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        rem :: forall a. Integral a => a -> a -> a
          with rem @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        seq :: forall a b. a -> b -> b
          with seq @Int @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Prim’))
        return :: forall (m :: * -> *) a. Monad m => a -> m a
          with return @((->) Int) @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Base’))
        pure :: forall (f :: * -> *) a. Applicative f => a -> f a
          with pure @((->) Int) @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Base’))

T14590.hs:7:11: warning: [GHC-88464] [-Wtyped-holes (in -Wdefault)]
    • Found hole: _a :: Int -> Int -> Int
      Or perhaps ‘_a’ is mis-spelled, or not in scope
    • In the expression: (`_a` x) y
      In an equation for ‘f4’: f4 x y = (`_a` x) y
    • Relevant bindings include
        y :: Int (bound at T14590.hs:7:6)
        x :: Int (bound at T14590.hs:7:4)
        f4 :: Int -> Int -> Int (bound at T14590.hs:7:1)
      Valid hole fits include
        f4 :: Int -> Int -> Int (bound at T14590.hs:7:1)
        f1 :: Int -> Int -> Int (defined at T14590.hs:4:1)
        f2 :: Int -> Int -> Int (defined at T14590.hs:5:1)
        f3 :: Int -> Int -> Int (defined at T14590.hs:6:1)
        (-) :: forall a. Num a => a -> a -> a
          with (-) @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Num’))
        asTypeOf :: forall a. a -> a -> a
          with asTypeOf @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Base’))
        const :: forall a b. a -> b -> a
          with const @Int @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Base’))
        subtract :: forall a. Num a => a -> a -> a
          with subtract @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Num’))
        (^) :: forall a b. (Num a, Integral b) => a -> b -> a
          with (^) @Int @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        gcd :: forall a. Integral a => a -> a -> a
          with gcd @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        lcm :: forall a. Integral a => a -> a -> a
          with lcm @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        max :: forall a. Ord a => a -> a -> a
          with max @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Classes’))
        min :: forall a. Ord a => a -> a -> a
          with min @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Classes’))
        (*) :: forall a. Num a => a -> a -> a
          with (*) @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Num’))
        (+) :: forall a. Num a => a -> a -> a
          with (+) @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Num’))
        div :: forall a. Integral a => a -> a -> a
          with div @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        mod :: forall a. Integral a => a -> a -> a
          with mod @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        quot :: forall a. Integral a => a -> a -> a
          with quot @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        rem :: forall a. Integral a => a -> a -> a
          with rem @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Real’))
        seq :: forall a b. a -> b -> b
          with seq @Int @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Prim’))
        return :: forall (m :: * -> *) a. Monad m => a -> m a
          with return @((->) Int) @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Base’))
        pure :: forall (f :: * -> *) a. Applicative f => a -> f a
          with pure @((->) Int) @Int
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Base’))

