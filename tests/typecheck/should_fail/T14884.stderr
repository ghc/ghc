T14884.hs:4:5: error: [GHC-88464]
    • Found hole: _ :: (a0 -> IO ()) -> String -> IO ()
      Where: ‘a0’ is an ambiguous type variable
    • In the expression: _ print "abc"
      In an equation for ‘x’: x = _ print "abc"
    • Relevant bindings include x :: IO () (bound at T14884.hs:4:1)
      Valid hole fits include
        mapM_ :: forall (t :: * -> *) (m :: * -> *) a b.
                 (Foldable t, Monad m) =>
                 (a -> m b) -> t a -> m ()
          with mapM_ @[] @IO @Char @()
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Data.Foldable’))
        foldMap :: forall (t :: * -> *) m a.
                   (Foldable t, Monoid m) =>
                   (a -> m) -> t a -> m
          with foldMap @[] @(IO ()) @Char
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Data.Foldable’))
        id :: forall a. a -> a
          with id @(String -> IO ())
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Base’))
        ($) :: forall a b. (a -> b) -> a -> b
          with ($) @GHC.Internal.Types.LiftedRep
                   @GHC.Internal.Types.LiftedRep
                   @String
                   @(IO ())
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Base’))
        ($!) :: forall a b. (a -> b) -> a -> b
          with ($!) @GHC.Internal.Types.LiftedRep @String @(IO ())
          (imported from ‘Prelude’
           (and originally defined in ‘GHC.Internal.Base’))

T14884.hs:4:7: error: [GHC-39999]
    • Ambiguous type variable ‘a0’ arising from a use of ‘print’
      prevents the constraint ‘(Show a0)’ from being solved.
      Probable fix: use a type annotation to specify what ‘a0’ should be.
      Potentially matching instances:
        instance (Show a, Show b) => Show (Either a b)
          -- Defined in ‘GHC.Internal.Data.Either’
        instance Show Ordering -- Defined in ‘GHC.Internal.Show’
        ...plus 26 others
        ...plus 29 instances involving out-of-scope types
        (use -fprint-potential-instances to see them all)
    • In the first argument of ‘_’, namely ‘print’
      In the expression: _ print "abc"
      In an equation for ‘x’: x = _ print "abc"

