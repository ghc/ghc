type A :: * -> * -> *
type family A a b
  	-- Defined at T4175.hs:8:1
type instance A Int Int = () 	-- Defined at T4175.hs:9:15
type instance A (Maybe a) a = a 	-- Defined at T4175.hs:10:15
type instance A (B a) b = () 	-- Defined at T4175.hs:11:15
type B :: * -> *
data family B a
  	-- Defined at T4175.hs:13:1
instance [safe] G B -- Defined at T4175.hs:35:10
type instance A (B a) b = () 	-- Defined at T4175.hs:11:15
data instance B () = MkB 	-- Defined at T4175.hs:14:15
type C :: * -> Constraint
class C a where
  type D :: * -> * -> *
  type family D a b
  	-- Defined at T4175.hs:17:5
type instance D Int () = String 	-- Defined at T4175.hs:20:10
type instance D () () = Bool 	-- Defined at T4175.hs:23:10
type E :: * -> *
type family E a where
    E () = Bool
    E Int = String
  	-- Defined at T4175.hs:25:1
type Unit :: *
data Unit = ()
  	-- Defined in ‘GHC.Internal.Tuple’
instance [safe] C () -- Defined at T4175.hs:22:10
instance Monoid () -- Defined in ‘GHC.Internal.Base’
instance Semigroup () -- Defined in ‘GHC.Internal.Base’
instance Bounded () -- Defined in ‘GHC.Internal.Enum’
instance Enum () -- Defined in ‘GHC.Internal.Enum’
instance Ord () -- Defined in ‘GHC.Internal.Classes’
instance Read () -- Defined in ‘GHC.Internal.Read’
instance Show () -- Defined in ‘GHC.Internal.Show’
instance Eq () -- Defined in ‘GHC.Internal.Classes’
data instance B () = MkB 	-- Defined at T4175.hs:14:15
type instance D Int () = String 	-- Defined at T4175.hs:20:10
type instance D () () = Bool 	-- Defined at T4175.hs:23:10
type Maybe :: * -> *
data Maybe a = Nothing | Just a
  	-- Defined in ‘GHC.Internal.Maybe’
instance Traversable Maybe
  -- Defined in ‘GHC.Internal.Data.Traversable’
instance MonadFail Maybe
  -- Defined in ‘GHC.Internal.Control.Monad.Fail’
instance Foldable Maybe -- Defined in ‘GHC.Internal.Data.Foldable’
instance Applicative Maybe -- Defined in ‘GHC.Internal.Base’
instance Functor Maybe -- Defined in ‘GHC.Internal.Base’
instance Monad Maybe -- Defined in ‘GHC.Internal.Base’
instance Semigroup a => Monoid (Maybe a)
  -- Defined in ‘GHC.Internal.Base’
instance Semigroup a => Semigroup (Maybe a)
  -- Defined in ‘GHC.Internal.Base’
instance [safe] Ord a => Ord (Maybe a)
  -- Defined in ‘GHC.Internal.Maybe’
instance Read a => Read (Maybe a) -- Defined in ‘GHC.Internal.Read’
instance Show a => Show (Maybe a) -- Defined in ‘GHC.Internal.Show’
instance [safe] Eq a => Eq (Maybe a)
  -- Defined in ‘GHC.Internal.Maybe’
type instance A (Maybe a) a = a 	-- Defined at T4175.hs:10:15
type Int :: *
data Int = GHC.Internal.Types.I# GHC.Internal.Prim.Int#
  	-- Defined in ‘GHC.Internal.Types’
instance [safe] C Int -- Defined at T4175.hs:19:10
instance Bounded Int -- Defined in ‘GHC.Internal.Enum’
instance Enum Int -- Defined in ‘GHC.Internal.Enum’
instance Integral Int -- Defined in ‘GHC.Internal.Real’
instance Num Int -- Defined in ‘GHC.Internal.Num’
instance Ord Int -- Defined in ‘GHC.Internal.Classes’
instance Read Int -- Defined in ‘GHC.Internal.Read’
instance Real Int -- Defined in ‘GHC.Internal.Real’
instance Show Int -- Defined in ‘GHC.Internal.Show’
instance Eq Int -- Defined in ‘GHC.Internal.Classes’
type instance A Int Int = () 	-- Defined at T4175.hs:9:15
type instance D Int () = String 	-- Defined at T4175.hs:20:10
type Z :: * -> Constraint
class Z a
  	-- Defined at T4175.hs:29:1
instance [safe] F (Z a) -- Defined at T4175.hs:32:10
