f :: (forall (r :: RuntimeRep). Int -> p r) -> p LiftedRep
g :: Int -> p LiftedRep
g' :: Int -> forall (p :: RuntimeRep -> *). p LiftedRep
h :: Int -> *
i :: Int -> *
j :: Eq (p LiftedRep) => Int -> p LiftedRep
k :: Eq (p LiftedRep) =>
     (forall (r :: RuntimeRep). Eq (p r) => Int -> p r) -> p LiftedRep
l :: C a => a -> b
m :: (forall (m :: Multiplicity). Int %m -> Int) -> Int
n :: Int -> Int
o :: Maybe (forall (r :: RuntimeRep). Proxy r)
p :: (Proxy LiftedRep, Int)
q :: p (forall (r :: RuntimeRep). Proxy r)
r :: forall (a :: forall (r :: RuntimeRep). TYPE r)
            (p :: (forall (r :: RuntimeRep). TYPE r) -> *).
     p a
f :: (forall (r :: RuntimeRep). Int -> p r) -> p r'
g :: Int -> forall (r :: RuntimeRep). p r
g' :: Int -> forall (p :: RuntimeRep -> *) (r :: RuntimeRep). p r
h :: Int -> forall (r :: RuntimeRep). TYPE r
i :: Int -> TYPE r
j :: Eq (p LiftedRep) => Int -> forall (r :: RuntimeRep). p r
k :: Eq (p r') =>
     (forall (r :: RuntimeRep). Eq (p r) => Int -> p r) -> p r'
l :: forall a (r :: RuntimeRep) (b :: TYPE r). C a => a -> b
m :: (forall (m :: Multiplicity). Int %m -> Int) -> Int
n :: Int %m -> Int
o :: Maybe (forall (r :: RuntimeRep). Proxy r)
p :: (forall (r :: RuntimeRep). Proxy r, Int)
q :: p (forall (r :: RuntimeRep). Proxy r)
r :: forall (a :: forall (r :: RuntimeRep). TYPE r)
            (p :: (forall (r :: RuntimeRep). TYPE r) -> *).
     p a
