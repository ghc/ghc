:set -XLinearTypes -XImpredicativeTypes
import GHC.Types (RuntimeRep (..), Levity (..), TYPE, Multiplicity, Type, LiftedRep)
import Data.Proxy

f :: forall p (r' :: RuntimeRep). (forall (r :: RuntimeRep). Int -> p r) -> p r'; f x = x 5
g :: forall p. Int -> forall (r :: RuntimeRep). p r; g _ = undefined
g' :: Int -> forall p (r :: RuntimeRep). p r; g' _ = undefined
h :: Int -> forall (r :: RuntimeRep). TYPE r; h _ = undefined
i :: forall (r :: RuntimeRep). Int -> TYPE r; i _ = undefined
j :: forall p. Eq (p ('BoxedRep 'Lifted)) => Int -> forall (r :: RuntimeRep). p r; j _ = undefined
k :: forall p (r' :: RuntimeRep). Eq (p r') => (forall (r :: RuntimeRep). Eq (p r) => Int -> p r) -> p r'; k x = x 5
class C a where l :: forall (r :: RuntimeRep) (b :: TYPE r). a -> b
m :: (forall (m :: Multiplicity). Int %m -> Int) -> Int; m x = x 5
n :: forall (m :: Multiplicity). Int %m -> Int; n a = a
o :: Maybe (forall (r :: RuntimeRep). Proxy r); o = Nothing
p :: (forall (r :: RuntimeRep). Proxy r, Int); p = undefined
q :: p (forall (r :: RuntimeRep). Proxy r); q = undefined
r :: forall (a :: (forall (r :: RuntimeRep). TYPE r)) (p :: (forall (r :: RuntimeRep). TYPE r) -> Type). p a; r = r

:set -XNoLinearTypes

:type f
:type g
:type g'
:type h
:type i
:type j
:type k
:type l
:type m
:type n
:type o
:type p
:type q
:type r

:set -fprint-explicit-runtime-reps
:set -XLinearTypes
:type f
:type g
:type g'
:type h
:type i
:type j
:type k
:type l
:type m
:type n
:type o
:type p
:type q
:type r
