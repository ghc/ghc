#include "Cmm.h"

/* zero arguments */
cmm_zero() { /* ccall puts("cmm_zero"); buffering gets in the way */ return (); }
cmm_zero_w() { return (123::W_); }
cmm_zero_d() { return (1.0::D_); }
cmm_zero_f() { return (1.0::F_); }
cmm_zero_l() { return (123::L_); }

/* one argument functions */
cmm_one1_i8(I8 x) { return (x); }
cmm_one1_i16(I16 x) { return (x); }
cmm_one1_i32(I32 x) { return (x); }
cmm_one1_i64(I64 x) { return (x); }
cmm_one1_p(P_ x) { return (x); }
cmm_one1_w(W_ x) { return (x); }
cmm_one1_f(F_ x) { return (x); }
cmm_one1_d(D_ x) { return (x); }
cmm_one1_l(L_ x) { return (x); }

cmm_one2_i8(I8 x) { return (x,x); }
cmm_one2_i16(I16 x) { return (x,x); }
cmm_one2_i32(I32 x) { return (x,x); }
cmm_one2_i64(I64 x) { return (x,x); }
cmm_one2_p(P_ x) { return (x,x); }
cmm_one2_w(W_ x) { return (x,x); }
cmm_one2_f(F_ x) { return (x,x); }
cmm_one2_d(D_ x) { return (x,x); }
cmm_one2_l(L_ x) { return (x,x); }


/* two argument functions */
cmm_two1_i8(I8 x, I8 y) { return (x); }
cmm_two1_i16(I16 x, I16 y) { return (x); }
cmm_two1_i32(I32 x, I32 y) { return (x); }
cmm_two1_i64(I64 x, I64 y) { return (x); }
cmm_two1_p(P_ x, P_ y) { return (x); }
cmm_two1_w(W_ x, W_ y) { return (x); }
cmm_two1_f(F_ x, F_ y) { return (x); }
cmm_two1_d(D_ x, D_ y) { return (x); }
cmm_two1_l(L_ x, L_ y) { return (x); }

cmm_two2_i8(I8 x, I8 y) { return (y); }
cmm_two2_i16(I16 x, I16 y) { return (y); }
cmm_two2_i32(I32 x, I32 y) { return (y); }
cmm_two2_i64(I64 x, I64 y) { return (y); }
cmm_two2_p(P_ x, P_ y) { return (y); }
cmm_two2_w(W_ x, W_ y) { return (y); }
cmm_two2_f(F_ x, F_ y) { return (y); }
cmm_two2_d(D_ x, D_ y) { return (y); }
cmm_two2_l(L_ x, L_ y) { return (y); }

/* additional tests for floating point, since D_ and F_ registers
   overlap on some platforms */
cmm_floating_1(F_ x, F_ y) { F_ z; z = %fadd(x, y); return (z); }
cmm_floating_2(D_ x, D_ y) { D_ z; z = %fadd(x, y); return (z); }
cmm_floating_3(F_ x, D_ y) { return (x); }
cmm_floating_4(F_ x, D_ y) { return (y); }


cmm_floating_5(F_ x1, D_ x2, F_ x3, D_ x4, F_ x5, D_ x6, F_ x7, D_ x8) {
    F_ y1;
    D_ y2;

    y1 = %fadd(x1,x3);
    y1 = %fadd(y1,x5);
    y1 = %fadd(y1,x7);

    y2 = %fadd(x2,x4);
    y2 = %fadd(y2,x6);
    y2 = %fadd(y2,x8);

    return (y1, y2);
}


cmm_floating_6(D_ x1, F_ x2, D_ x3, F_ x4, D_ x5, F_ x6, D_ x7, F_ x8) {
    D_ y1;
    F_ y2;

    y1 = %fadd(x1,x3);
    y1 = %fadd(y1,x5);
    y1 = %fadd(y1,x7);

    y2 = %fadd(x2,x4);
    y2 = %fadd(y2,x6);
    y2 = %fadd(y2,x8);

    return (y1, y2);
}


cmm_floating_7( W_ x1, F_ x2, D_ x3
              , W_ x4, F_ x5, D_ x6
              , W_ x7, F_ x8, D_ x9
              , W_ x10, F_ x11, D_ x12
              , W_ x13, F_ x14, D_ x15
              , W_ x16, F_ x17, D_ x18
              , W_ x19, F_ x20, D_ x21
              ) {
    W_ y1;
    F_ y2;
    D_ y3;
    y1 = x1+x4+x7+x10+x13+x16+x19;

    y2 = %fadd(x2,x5);
    y2 = %fadd(y2,x8);
    y2 = %fadd(y2,x11);
    y2 = %fadd(y2,x14);
    y2 = %fadd(y2,x17);
    y2 = %fadd(y2,x20);

    y3 = %fadd(x3,x6);
    y3 = %fadd(y3,x9);
    y3 = %fadd(y3,x12);
    y3 = %fadd(y3,x15);
    y3 = %fadd(y3,x18);
    y3 = %fadd(y3,x21);

    return ( y1, y2, y3 );
}


/* various sized tuple returns */

cmm_tuple_1(W_ x, W_ y, W_ z) { return (z, y, x); }
cmm_tuple_2(P_ p1, P_ p2, W_ w1, W_ w2, P_ p3, P_ p4, D_ d1, D_ d2, P_ p5, P_ p6, F_ f1, F_ f2) {
    return (f2, f1, p6, p5, d2, d1, p4, p3, w2, w1, p2, p1);
}
cmm_tuple_3(P_ p1, W_ w1, P_ p2, D_ d1, P_ p3, F_ f1) {
    return (f1, p3, d1, p2, w1, p1);
}
cmm_tuple_4(P_ p1, P_ p2) { return (p2, p1); }

/* working with arrays */
cmm_array_1(P_ x) {
    W_ size;
    size = StgMutArrPtrs_size(x);
    return (size);
}

/* return two arrays */
cmm_array_2(P_ x, P_ y) {
    return (y, x);
}

/* many arguments */
cmm_many_arguments(W_ x1, W_ x2, W_ x3, W_ x4, W_ x5, W_ x6, W_ x7, W_ x8, W_ x9, W_ x10,
          W_ x11, W_ x12, W_ x13, W_ x14, W_ x15, W_ x16, W_ x17, W_ x18, W_ x19, W_ x20,
          W_ x21, W_ x22, W_ x23, W_ x24, W_ x25, W_ x26, W_ x27, W_ x28, W_ x29, W_ x30,
          W_ x31, W_ x32, W_ x33, W_ x34, W_ x35, W_ x36, W_ x37, W_ x38, W_ x39, W_ x40,
          W_ x41, W_ x42, W_ x43, W_ x44, W_ x45, W_ x46, W_ x47, W_ x48, W_ x49, W_ x50,
          W_ x51, W_ x52, W_ x53, W_ x54, W_ x55, W_ x56, W_ x57, W_ x58, W_ x59, W_ x60,
          W_ x61, W_ x62, W_ x63, W_ x64, W_ x65, W_ x66, W_ x67, W_ x68, W_ x69, W_ x70,
          W_ x71, W_ x72, W_ x73, W_ x74, W_ x75, W_ x76, W_ x77, W_ x78, W_ x79, W_ x80,
          W_ x81, W_ x82, W_ x83, W_ x84, W_ x85, W_ x86, W_ x87, W_ x88, W_ x89, W_ x90,
          W_ x91, W_ x92, W_ x93, W_ x94, W_ x95, W_ x96, W_ x97, W_ x98, W_ x99, W_ x100,
          W_ x101, W_ x102, W_ x103, W_ x104, W_ x105, W_ x106, W_ x107, W_ x108, W_ x109, W_ x110,
          W_ x111, W_ x112, W_ x113, W_ x114, W_ x115, W_ x116, W_ x117, W_ x118, W_ x119, W_ x120,
          W_ x121, W_ x122, W_ x123, W_ x124, W_ x125, W_ x126, W_ x127, W_ x128, W_ x129, W_ x130,
          W_ x131, W_ x132, W_ x133, W_ x134, W_ x135, W_ x136, W_ x137, W_ x138, W_ x139, W_ x140,
          W_ x141, W_ x142, W_ x143, W_ x144, W_ x145, W_ x146, W_ x147, W_ x148, W_ x149, W_ x150,
          W_ x151, W_ x152, W_ x153, W_ x154, W_ x155, W_ x156, W_ x157, W_ x158, W_ x159, W_ x160,
          W_ x161, W_ x162, W_ x163, W_ x164, W_ x165, W_ x166, W_ x167, W_ x168, W_ x169, W_ x170,
          W_ x171, W_ x172, W_ x173, W_ x174, W_ x175, W_ x176, W_ x177, W_ x178, W_ x179, W_ x180,
          W_ x181, W_ x182, W_ x183, W_ x184, W_ x185, W_ x186, W_ x187, W_ x188, W_ x189, W_ x190,
          W_ x191, W_ x192, W_ x193, W_ x194, W_ x195, W_ x196, W_ x197, W_ x198, W_ x199, W_ x200,
          W_ x201, W_ x202, W_ x203, W_ x204, W_ x205, W_ x206, W_ x207, W_ x208, W_ x209, W_ x210,
          W_ x211, W_ x212, W_ x213, W_ x214, W_ x215, W_ x216, W_ x217, W_ x218, W_ x219, W_ x220,
          W_ x221, W_ x222, W_ x223, W_ x224, W_ x225, W_ x226, W_ x227, W_ x228, W_ x229, W_ x230,
          W_ x231, W_ x232, W_ x233, W_ x234, W_ x235, W_ x236, W_ x237, W_ x238, W_ x239, W_ x240,
          W_ x241, W_ x242, W_ x243, W_ x244, W_ x245, W_ x246, W_ x247, W_ x248, W_ x249, W_ x250,
          W_ x251, W_ x252, W_ x253, W_ x254, W_ x255, W_ x256, W_ x257, W_ x258, W_ x259, W_ x260,
          W_ x261, W_ x262, W_ x263, W_ x264, W_ x265, W_ x266, W_ x267, W_ x268, W_ x269, W_ x270,
          W_ x271, W_ x272, W_ x273, W_ x274, W_ x275, W_ x276, W_ x277, W_ x278, W_ x279, W_ x280,
          W_ x281, W_ x282, W_ x283, W_ x284, W_ x285, W_ x286, W_ x287, W_ x288, W_ x289, W_ x290,
          W_ x291, W_ x292, W_ x293, W_ x294, W_ x295, W_ x296, W_ x297, W_ x298, W_ x299, W_ x300,
          W_ x301, W_ x302, W_ x303, W_ x304, W_ x305, W_ x306, W_ x307, W_ x308, W_ x309, W_ x310,
          W_ x311, W_ x312, W_ x313, W_ x314, W_ x315, W_ x316, W_ x317, W_ x318, W_ x319, W_ x320,
          W_ x321, W_ x322, W_ x323, W_ x324, W_ x325, W_ x326, W_ x327, W_ x328, W_ x329, W_ x330,
          W_ x331, W_ x332, W_ x333, W_ x334, W_ x335, W_ x336, W_ x337, W_ x338, W_ x339, W_ x340,
          W_ x341, W_ x342, W_ x343, W_ x344, W_ x345, W_ x346, W_ x347, W_ x348, W_ x349, W_ x350,
          W_ x351, W_ x352, W_ x353, W_ x354, W_ x355, W_ x356, W_ x357, W_ x358, W_ x359, W_ x360,
          W_ x361, W_ x362, W_ x363, W_ x364, W_ x365, W_ x366, W_ x367, W_ x368, W_ x369, W_ x370,
          W_ x371, W_ x372, W_ x373, W_ x374, W_ x375, W_ x376, W_ x377, W_ x378, W_ x379, W_ x380,
          W_ x381, W_ x382, W_ x383, W_ x384, W_ x385, W_ x386, W_ x387, W_ x388, W_ x389, W_ x390,
          W_ x391, W_ x392, W_ x393, W_ x394, W_ x395, W_ x396, W_ x397, W_ x398, W_ x399, W_ x400) {
    W_ y;
    y = x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10 +
        x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 + x20 +
        x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30 +
        x31 + x32 + x33 + x34 + x35 + x36 + x37 + x38 + x39 + x40 +
        x41 + x42 + x43 + x44 + x45 + x46 + x47 + x48 + x49 + x50 +
        x51 + x52 + x53 + x54 + x55 + x56 + x57 + x58 + x59 + x60 +
        x61 + x62 + x63 + x64 + x65 + x66 + x67 + x68 + x69 + x70 +
        x71 + x72 + x73 + x74 + x75 + x76 + x77 + x78 + x79 + x80 +
        x81 + x82 + x83 + x84 + x85 + x86 + x87 + x88 + x89 + x90 +
        x91 + x92 + x93 + x94 + x95 + x96 + x97 + x98 + x99 + x100 +
        x101 + x102 + x103 + x104 + x105 + x106 + x107 + x108 + x109 + x110 +
        x111 + x112 + x113 + x114 + x115 + x116 + x117 + x118 + x119 + x120 +
        x121 + x122 + x123 + x124 + x125 + x126 + x127 + x128 + x129 + x130 +
        x131 + x132 + x133 + x134 + x135 + x136 + x137 + x138 + x139 + x140 +
        x141 + x142 + x143 + x144 + x145 + x146 + x147 + x148 + x149 + x150 +
        x151 + x152 + x153 + x154 + x155 + x156 + x157 + x158 + x159 + x160 +
        x161 + x162 + x163 + x164 + x165 + x166 + x167 + x168 + x169 + x170 +
        x171 + x172 + x173 + x174 + x175 + x176 + x177 + x178 + x179 + x180 +
        x181 + x182 + x183 + x184 + x185 + x186 + x187 + x188 + x189 + x190 +
        x191 + x192 + x193 + x194 + x195 + x196 + x197 + x198 + x199 + x200 +
        x201 + x202 + x203 + x204 + x205 + x206 + x207 + x208 + x209 + x210 +
        x211 + x212 + x213 + x214 + x215 + x216 + x217 + x218 + x219 + x220 +
        x221 + x222 + x223 + x224 + x225 + x226 + x227 + x228 + x229 + x230 +
        x231 + x232 + x233 + x234 + x235 + x236 + x237 + x238 + x239 + x240 +
        x241 + x242 + x243 + x244 + x245 + x246 + x247 + x248 + x249 + x250 +
        x251 + x252 + x253 + x254 + x255 + x256 + x257 + x258 + x259 + x260 +
        x261 + x262 + x263 + x264 + x265 + x266 + x267 + x268 + x269 + x270 +
        x271 + x272 + x273 + x274 + x275 + x276 + x277 + x278 + x279 + x280 +
        x281 + x282 + x283 + x284 + x285 + x286 + x287 + x288 + x289 + x290 +
        x291 + x292 + x293 + x294 + x295 + x296 + x297 + x298 + x299 + x300 +
        x301 + x302 + x303 + x304 + x305 + x306 + x307 + x308 + x309 + x310 +
        x311 + x312 + x313 + x314 + x315 + x316 + x317 + x318 + x319 + x320 +
        x321 + x322 + x323 + x324 + x325 + x326 + x327 + x328 + x329 + x330 +
        x331 + x332 + x333 + x334 + x335 + x336 + x337 + x338 + x339 + x340 +
        x341 + x342 + x343 + x344 + x345 + x346 + x347 + x348 + x349 + x350 +
        x351 + x352 + x353 + x354 + x355 + x356 + x357 + x358 + x359 + x360 +
        x361 + x362 + x363 + x364 + x365 + x366 + x367 + x368 + x369 + x370 +
        x371 + x372 + x373 + x374 + x375 + x376 + x377 + x378 + x379 + x380 +
        x381 + x382 + x383 + x384 + x385 + x386 + x387 + x388 + x389 + x390 +
        x391 + x392 + x393 + x394 + x395 + x396 + x397 + x398 + x399 + x400;
    return (y);
}
