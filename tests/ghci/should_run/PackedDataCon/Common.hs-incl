

d1w8 :: Word8 -> D1
d1w8 (W8# x) = D1w8 x

d1i8 :: Int8 -> D1
d1i8 (I8# x) = D1i8 x

d1w16 :: Word16 -> D1
d1w16 (W16# x) = D1w16 x

d1i16 :: Int16 -> D1
d1i16 (I16# x) = D1i16 x

d1w32 :: Word32 -> D1
d1w32 (W32# x) = D1w32 x

d1i32 :: Int32 -> D1
d1i32 (I32# x) = D1i32 x

showD1 :: D1 -> String
showD1 (D1w8 x) = show (W8# x)
showD1 (D1i8 x) = show (I8# x)
showD1 (D1w16 x) = show (W16# x)
showD1 (D1i16 x) = show (I16# x)
showD1 (D1w32 x) = show (W32# x)
showD1 (D1i32 x) = show (I32# x)

d2a :: Word8 -> Word8 -> D2
d2a (W8# x1) (W8# x2) = D2a x1 x2

d2b :: Word8 -> Word16 -> D2
d2b (W8# x1) (W16# x2) = D2b x1 x2

d2c :: Word8 -> Word16 -> Word8 -> D2
d2c (W8# x1) (W16# x2) (W8# x3)= D2c x1 x2 x3

d2d :: Word -> Word8 -> Word -> D2
d2d (W# x1) (W8# x2) (W# x3) = D2d x1 x2 x3

d2e :: Word -> Int8 -> Double -> Float -> Word8 -> D2
d2e (W# x1) (I8# x2) (D# x3) (F# x4) (W8# x5) = D2e x1 x2 x3 x4 x5

d2l :: Int -> D2
d2l 0 = D2a (wordToWord8# 44##) (wordToWord8# 55##)
d2l 1 = D2b (wordToWord8# 44##) (wordToWord16# 55##)
d2l 2 = D2c (wordToWord8# 44##) (wordToWord16# 5555##) (wordToWord8# 66##)
d2l 3 = D2d 5555## (wordToWord8# 66##) 7777##
d2l _ = D2e 7777## (intToInt8# 66#) 55.55## 44.44# (wordToWord8# 33##)

showD2 :: D2 -> String
showD2 (D2a x1 x2) = show (W8# x1, W8# x2)
showD2 (D2b x1 x2) = show (W8# x1, W16# x2)
showD2 (D2c x1 x2 x3) = show (W8# x1, W16# x2, W8# x3)
showD2 (D2d x1 x2 x3) = show (W# x1, W8# x2, W# x3)
showD2 (D2e x1 x2 x3 x4 x5) = show (W# x1, I8# x2, D# x3, F# x4, W8# x5)

-- unboxed function arguments

type F1 = Int8# -> Float# -> Word16# -> Double# -> Word32# -> Word8# -> (Int8, Float, Word16, Double, Word32, Word8)

f1 :: F1
f1 x1 x2 x3 x4 x5 x6 = (I8# x1, F# x2, W16# x3, D# x4, W32# x5, W8# x6)

f1a :: Word8# -> F1
f1a x0 x1 x2 x3 x4 x5 x6 = (I8# x1, F# x2, W16# x3, D# x4, W32# x5, W8# x0)

f1a_app :: (Word8# -> F1) -> F1
f1a_app f = f (wordToWord8# 77##)

f1_show :: F1 -> String
f1_show f = show $ f (intToInt8# 123#)
                     456.789#
                     (wordToWord16# 8765##)
                     123.456##
                     (wordToWord32# 12345678##)
                     (wordToWord8# 33##)


-- unboxed return values of various sizes

type U1 = Int8 -> Int8#
unboxed1 :: U1
unboxed1 0 = intToInt8# 11#
unboxed1 _ = intToInt8# 13#

unboxed1_a :: U1 -> Int8 -> Int8
unboxed1_a f x = case f x of x1 -> I8# x1


type U2 = Word16 -> Word16#
unboxed2 :: U2
unboxed2 0 = wordToWord16# 1111##
unboxed2 _ = wordToWord16# 1333##

unboxed2_a :: U2 -> Word16 -> Word16
unboxed2_a f x = case f x of x1 -> W16# x1


type U3 = Word16 -> Float#
unboxed3 :: U3
unboxed3 0 = 55.55#
unboxed3 _ = 77.77#

unboxed3_a :: U3 -> Word16 -> Float
unboxed3_a f x = case f x of x1 -> F# x1

-- unboxed tuple

type T1 = Int -> (# Int8#, Word16#, Float#, Int #)

tuple1 :: T1
tuple1 x = (# intToInt8# 66#, wordToWord16# 7777##, 99.99#, x #)

tuple1_a :: T1 -> Int -> (Int8, Word16, Float, Int)
tuple1_a f x  =
  case f x of (# x1, x2, x3, x4 #) -> (I8# x1, W16# x2, F# x3, x4)
