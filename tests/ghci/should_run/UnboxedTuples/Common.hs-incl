swap :: (# a, b #) -> (# b, a #)
swap (# x, y #) = (# y, x #)

type T1 a = a -> (# a #)
tuple1 :: T1 a
tuple1 x = (# x #)

tuple1_a :: T1 a -> a -> a
tuple1_a f x = case f x of (# y #) -> y

tuple1_b :: T1 a -> a -> String -> IO ()
tuple1_b f x msg = case f x of (# _ #) -> putStrLn msg

-- can still be returned in registers, pointers
type T2p a = a -> a -> a -> a -> (# a, a, a, a #)

tuple2p :: T2p a
tuple2p x1 x2 x3 x4 = (# x1, x2, x3, x4 #)

tuple2p_a :: T2p a -> a -> a -> a -> a -> (a, a, a, a)
tuple2p_a f x1 x2 x3 x4 =
    case f x1 x2 x3 x4 of (# y1, y2, y3, y4 #) -> (y1, y2, y3, y4)

-- can still be returned in registers, non-pointers
type T2n = Int -> Int -> Int -> Int -> (# Int#, Int#, Int#, Int# #)

tuple2n :: T2n
tuple2n (I# x1) (I# x2) (I# x3) (I# x4) = (# x1, x2, x3, x4 #)

tuple2n_a :: T2n -> Int -> Int -> Int -> Int -> (Int, Int, Int, Int)
tuple2n_a f x1 x2 x3 x4 =
    case f x1 x2 x3 x4 of
        (# y1, y2, y3, y4 #) -> (I# y1, I# y2, I# y3, I# y4)


-- too big to fit in registers
type T3 a = a -> a -> a -> a
        -> a -> a -> a -> a
        -> a -> a -> a -> a
        -> (# a, a, a, a
            , a, a, a, a
            , a, a, a, a #)
tuple3 :: T3 a
tuple3 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 =
    (# x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12 #)

tuple3_a :: T3 a
        -> a -> a -> a -> a
        -> a -> a -> a -> a
        -> a -> a -> a -> a
        -> ( a, a, a, a
           , a, a, a, a
           , a, a, a, a
           )
tuple3_a f x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 =
    case f x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 of
            (# y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12 #) ->
                (y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12)

type T4a = Float -> Double -> Float -> Double
        -> (# Float#, Double#, Float#, Double# #)

tuple4a :: T4a
tuple4a (F# f1) (D# d1) (F# f2) (D# d2) = (# f1, d1, f2, d2 #)

tuple4a_a :: T4a
         -> Float -> Double -> Float -> Double
         -> (Float, Double, Float, Double)
tuple4a_a h f1 d1 f2 d2 =
  case h f1 d1 f2 d2 of (# g1, e1, g2, e2 #) -> (F# g1, D# e1, F# g2, D# e2 )


-- this should fill the floating point registers
type T4b = Float -> Double -> Float -> Double
       -> Float -> Double -> Float -> Double
       -> Float -> Double -> Float -> Double
       -> Float -> Double -> Float -> Double
       -> Float -> Double -> Float -> Double
       -> (# Float#, Double#, Float#, Double#
           , Float#, Double#, Float#, Double#
           , Float#, Double#, Float#, Double#
           , Float#, Double#, Float#, Double#
           , Float#, Double#, Float#, Double# #)
tuple4b :: T4b
tuple4b (F# f1) (D# d1) (F# f2) (D# d2)
       (F# f3) (D# d3) (F# f4) (D# d4)
       (F# f5) (D# d5) (F# f6) (D# d6)
       (F# f7) (D# d7) (F# f8) (D# d8)
       (F# f9) (D# d9) (F# f10) (D# d10) =
    (# f1, d1, f2, d2
     , f3, d3, f4, d4
     , f5, d5, f6, d6
     , f7, d7, f8, d8
     , f9, d9, f10, d10
     #)

tuple4b_a :: T4b
         -> Float -> Double -> Float -> Double
         -> Float -> Double -> Float -> Double
         -> Float -> Double -> Float -> Double
         -> Float -> Double -> Float -> Double
         -> Float -> Double -> Float -> Double
         -> ( (Float, Double, Float, Double)
            , (Float, Double, Float, Double)
            , (Float, Double, Float, Double)
            , (Float, Double, Float, Double)
            , (Float, Double, Float, Double)
            )
tuple4b_a h f1 d1 f2 d2
           f3 d3 f4 d4
           f5 d5 f6 d6
           f7 d7 f8 d8
           f9 d9 f10 d10 =
    case h f1 d1 f2 d2
           f3 d3 f4 d4
           f5 d5 f6 d6
           f7 d7 f8 d8
           f9 d9 f10 d10 of
      (# g1, e1, g2, e2
       , g3, e3, g4, e4
       , g5, e5, g6, e6
       , g7, e7, g8, e8
       , g9, e9, g10, e10 #) ->
        ( (F# g1, D# e1, F# g2, D# e2)
        , (F# g3, D# e3, F# g4, D# e4)
        , (F# g5, D# e5, F# g6, D# e6)
        , (F# g7, D# e7, F# g8, D# e8)
        , (F# g9, D# e9, F# g10, D# e10))

type T4c = Float -> Double -> Word64 -> Integer
        -> Float -> Double -> Word64 -> Integer
        -> Float -> Double -> Word64 -> Integer
        -> Float -> Double -> Word64 -> Integer
        -> (# Float#, Double#, Word64#, Integer
            , Float#, Double#, Word64#, Integer
            , Float#, Double#, Word64#, Integer
            , Float#, Double#, Word64#, Integer
            #)
tuple4c :: T4c
tuple4c (F# f1) (D# d1) (W64# w1) i1
        (F# f2) (D# d2) (W64# w2) i2
        (F# f3) (D# d3) (W64# w3) i3
        (F# f4) (D# d4) (W64# w4) i4 =
     (# f1, d1, w1, i1
      , f2, d2, w2, i2
      , f3, d3, w3, i3
      , f4, d4, w4, i4
      #)

tuple4c_a :: T4c
          -> Float -> Double -> Word64 -> Integer
          -> Float -> Double -> Word64 -> Integer
          -> Float -> Double -> Word64 -> Integer
          -> Float -> Double -> Word64 -> Integer
          -> ( ( Float, Double, Word64, Integer)
            , ( Float, Double, Word64, Integer)
            , ( Float, Double, Word64, Integer)
            ,  ( Float, Double, Word64, Integer)
             )
tuple4c_a h f1 d1 w1 i1
            f2 d2 w2 i2
            f3 d3 w3 i3
            f4 d4 w4 i4 =
    case h f1 d1 w1 i1
            f2 d2 w2 i2
            f3 d3 w3 i3
            f4 d4 w4 i4 of
      (# f1', d1', w1', i1'
       , f2', d2', w2', i2'
       , f3', d3', w3', i3'
       , f4', d4', w4', i4' #) ->
       ( (F# f1', D# d1', W64# w1', i1')
       , (F# f2', D# d2', W64# w2', i2')
       , (F# f3', D# d3', W64# w3', i3')
       , (F# f4', D# d4', W64# w4', i4')
       )

type T5 = Int -> Word64 -> Int -> Word64
       -> Int -> Word64 -> Int -> Word64
       -> Int -> Word64 -> Int -> Word64
       -> Int -> Word64 -> Int -> Word64
       -> (# Int, Word64#, Int, Word64#
           , Int, Word64#, Int, Word64#
           , Int, Word64#, Int, Word64#
           , Int, Word64#, Int, Word64#
           #)

tuple5 :: T5
tuple5 i1 (W64# w1) i2 (W64# w2)
       i3 (W64# w3) i4 (W64# w4)
       i5 (W64# w5) i6 (W64# w6)
       i7 (W64# w7) i8 (W64# w8) =
    (# i1, w1, i2, w2
     , i3, w3, i4, w4
     , i5, w5, i6, w6
     , i7, w7, i8, w8 #)

tuple5_a :: T5
         -> Int -> Word64 -> Int -> Word64
         -> Int -> Word64 -> Int -> Word64
         -> Int -> Word64 -> Int -> Word64
         -> Int -> Word64 -> Int -> Word64
         -> ( (Int, Word64, Int, Word64)
            , (Int, Word64, Int, Word64)
            , (Int, Word64, Int, Word64)
            , (Int, Word64, Int, Word64)
            )
tuple5_a f i1 w1 i2 w2
           i3 w3 i4 w4
           i5 w5 i6 w6
           i7 w7 i8 w8 =
    case f i1 w1 i2 w2
           i3 w3 i4 w4
           i5 w5 i6 w6
           i7 w7 i8 w8 of
      (# j1, x1, j2, x2
       , j3, x3, j4, x4
       , j5, x5, j6, x6
       , j7, x7, j8, x8
       #) ->
       ( (j1, W64# x1, j2, W64# x2)
       , (j3, W64# x3, j4, W64# x4)
       , (j5, W64# x5, j6, W64# x6)
       , (j7, W64# x7, j8, W64# x8)
       )

type T6 = Int ->
        (# Int#, (# Int, (# Int#, (# #) #) #) #)
tuple6 :: T6
tuple6 x@(I# x#) = (# x#, (# x, (# x#, (# #) #) #) #)

tuple6_a :: T6 -> Int -> String
tuple6_a f x =
  case f x of
    (# x1, (# x2, (# x3, (# #) #) #) #) -> show (I# x1, (x2, (I# x3, ())))

-- empty tuples and tuples with void

type TV1 = Bool -> (# #)

{-# NOINLINE tuple_v1 #-}
tuple_v1 :: TV1
tuple_v1 _ = (# #)

{-# NOINLINE tuple_v1_a #-}
tuple_v1_a :: TV1 -> Bool -> Bool
tuple_v1_a f x = case f x of (# #) -> True


type TV2 = Bool -> (# (# #) #)

{-# NOINLINE tuple_v2 #-}
tuple_v2 :: TV2
tuple_v2 _ = (# (# #) #)

{-# NOINLINE tuple_v2_a #-}
tuple_v2_a :: TV2 -> Bool -> Bool
tuple_v2_a f x = case f x of (# _ #) -> True


type TV3 a = a -> (# (# #), a #)

{-# NOINLINE tuple_v3 #-}
tuple_v3 :: TV3 a
tuple_v3 x = (# (# #), x #)

{-# NOINLINE tuple_v3_a #-}
tuple_v3_a :: TV3 a -> a -> a
tuple_v3_a f x = case f x of (# _, y #) -> y


type TV4 a = a -> (# a, (# #) #)

{-# NOINLINE tuple_v4 #-}
tuple_v4 :: TV4 a
tuple_v4 x = (# x, (# #) #)

{-# NOINLINE tuple_v4_a #-}
tuple_v4_a :: TV4 a -> a -> a
tuple_v4_a f x = case f x of (# y, _ #) -> y


type TV5 a = a -> (# (# #), a, (# #) #)

{-# NOINLINE tuple_v5 #-}
tuple_v5 :: TV5 a
tuple_v5 x = (# (# #), x, (# #) #)

{-# NOINLINE tuple_v5_a #-}
tuple_v5_a :: TV5 a -> a -> a
tuple_v5_a f x = case f x of (# _, x, _ #) -> x


type TV6 = Int -> Double -> Int -> Double
         -> (# Int#, (# #), Double#, (# #)
            ,  Int#, (# #), Double#, (# #) #)

{-# NOINLINE tuple_v6 #-}
tuple_v6 :: TV6
tuple_v6 (I# x) (D# y) (I# z) (D# w) = (# x, (# #), y, (# #), z, (# #), w, (# #) #)

{-# NOINLINE tuple_v6_a #-}
tuple_v6_a :: TV6 -> Int -> Double -> Int -> Double
           -> (Int, Double, Int, Double)
tuple_v6_a f x y z w = case f x y z w of (# x', _, y', _, z', _, w', _ #) ->
                                           (I# x', D# y', I# z', D# w')

-- some representation-polymorphic things
{-# NOINLINE lev_poly #-}
lev_poly :: forall r a (b :: TYPE r).
            (a -> a -> a -> a ->
             a -> a -> a -> a ->
             a -> a -> a -> a -> b) -> a -> b
lev_poly f x = f x x x x x x x x x x x x

{-# NOINLINE lev_poly_a #-}
lev_poly_a :: (t1
                -> t2 -> (# a, b, c, d, e, f, g, h, i, j, k, l #))
            -> t1 -> t2 -> (a, b, c, d, e, f, g, h, i, j, k, l)
lev_poly_a lp t x =
  case lp t x of (# x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12 #) ->
                   (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12)

{-# NOINLINE lev_poly_boxed #-}
lev_poly_boxed x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12
  = (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12)

{-# NOINLINE lev_poly_b #-}
lev_poly_b lp t x =
  case lp t x of (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12)
                   -> (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12)

-- some unboxed sums
type S1 = (# (# Int#, String #) | Bool #)

{-# NOINLINE sum1 #-}
sum1 :: Int -> Int -> String -> Bool -> S1
sum1 0 (I# x) y _ = (# (# x, y #) | #)
sum1 _ _      _ b = (# | b #)

{-# NOINLINE sum1_a #-}
sum1_a :: (Int -> Int -> String -> Bool -> S1) -> Int -> Int -> String -> Bool -> Either (Int, String) Bool
sum1_a f n x y b =
  case f n x y b of
    (# (# x, y #) | #) -> Left (I# x, y)
    (# | b #)          -> Right b


type S2 a = (# (# a, a, a, a #) | (# a, a #) | (# #) | Int# | Int #)

{-# NOINLINE sum2 #-}
sum2 :: Int -> a -> S2 a
sum2 0 x = (# (# x, x, x, x #) | | | | #)
sum2 1 x = (# | (# x, x #) | | | #)
sum2 2 _ = (# | | (# #) | | #)
sum2 n@(I# n#) _
  | even n = (# | | | n# | #)
  | otherwise = (# | | | | n #)

{-# NOINLINE sum2_a #-}
sum2_a :: Show a => (Int -> a -> S2 a) -> Int -> a -> String
sum2_a f n x =
  case f n x of
    (# (# x1, x2, x3, x4 #) | | | | #) -> show (x1, x2, x3, x4)
    (# | (# x1, x2 #) | | | #)         -> show (x1, x2)
    (# | | (# #) | | #)                -> "(# #)"
    (# | | | x# | #)                   -> show (I# x#) ++ "#"
    (# | | | | x #)                    -> show x
