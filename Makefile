# Top-level Makefile
#
# This file is still _TOO_ large. There are too many moving _global_ parts,
# most of this should be relegated to the respective packages. The whole
# version replacement therapy is utterly ridiculous. It should be done in the
# respective packages.

GHC_FOR_BUILDER ?= ghc-9.8.4
PYTHON ?= python3
CABAL ?= cabal

# Handle CPUS and THREADS
CPUS_DETECT_SCRIPT := ./mk/detect-cpu-count.sh
CPUS := $(shell if [ -x $(CPUS_DETECT_SCRIPT) ]; then $(CPUS_DETECT_SCRIPT); else echo 2; fi)
THREADS ?= $(shell echo $$(( $(CPUS) + 1 )))

# Files that will be generated by config.status from their .in counterparts
# FIXME: This is stupid. Why do we patch versions across multiple libraries? Idiotic.
#        also, why on earth do we use a non standard SnakeCase convention for substitutions
#        when CAPITAL_CASE is the standard?
CONFIGURED_FILES := \
	ghc/ghc-bin.cabal \
	compiler/ghc.cabal \
	libraries/ghc-boot/ghc-boot.cabal \
	libraries/ghc-boot-th/ghc-boot-th.cabal \
	libraries/ghc-heap/ghc-heap.cabal \
	libraries/template-haskell/template-haskell.cabal \
	libraries/ghci/ghci.cabal \
	utils/ghc-pkg/ghc-pkg.cabal \
	utils/iserv/iserv.cabal \
	utils/runghc/runghc.cabal \
	libraries/ghc-internal/ghc-internal.cabal \
	libraries/ghc-experimental/ghc-experimental.cabal \
	libraries/base/base.cabal \
	rts/include/ghcversion.h

# --- Main Targets ---
all: _build/booted # booted will depend on prepare-sources
	@echo ">>> Building with GHC: $(GHC_FOR_BUILDER) and Cabal: $(CABAL)"
	@echo ">>> Using $(THREADS) threads"
	GHC=$(GHC_FOR_BUILDER) CABAL=$(CABAL) ./Build.hs

# --- Configuration ---

# booted depends on successful source preparation
_build/booted: _build/prepare-sources
	@echo ">>> Running ./boot script..."
	./boot
	mkdir -p _build
	touch $@

# --- Prepare Sources Target (replaces Haskell's prepareGhcSources) ---
# --- FIXME: This is nonsense and needs to die.
_build/prepare-sources: $(CONFIGURED_FILES)
	@echo ">>> Preparing sources (copying files)..."
	mkdir -p compiler/MachRegs
	mkdir -p libraries/ghc-internal/include
	mkdir -p libraries/ghc-internal/cbits

	cp -fp rts/include/rts/Bytecodes.h compiler/
	cp -fp rts/include/rts/storage/ClosureTypes.h compiler/
	cp -fp rts/include/rts/storage/FunTypes.h compiler/

	cp -fp rts/include/stg/MachRegs.h compiler/
	cp -fp rts/include/stg/MachRegs/*.h compiler/MachRegs/

	cp -fp utils/fs/fs.h libraries/ghc-internal/include/
	cp -fp utils/fs/fs.c libraries/ghc-internal/cbits/
	cp -fp utils/fs/fs.c rts/
	cp -fp utils/fs/fs.h rts/
	cp -fp utils/fs/fs.c utils/unlit/
	cp -fp utils/fs/fs.h utils/unlit/
	@echo ">>> Source preparation complete."
	mkdir -p _build
	touch $@

# --- Clean Targets ---
clean:
	@echo ">>> Cleaning build artifacts..."
	rm -rf _build
	@echo ">>> Build artifacts cleaned."

distclean: clean
	@echo ">>> Cleaning all generated files (distclean)..."
	rm -rf autom4te.cache
	rm -f config.status config.log config.h configure aclocal.m4
	rm -rf build-aux/config.guess build-aux/config.sub build-aux/install-sh build-aux/missing build-aux/compile depcomp
	find . -name 'Makefile.in' -delete
	rm -f $(CONFIGURED_FILES)
	@echo ">>> All generated files cleaned."


# --- Test Target ---
test: all
	@echo ">>> Running tests with THREADS=${THREADS}" >&2
	TEST_HC=`pwd`/_build/bindist/bin/ghc \
	METRICS_FILE=`pwd`/_build/test-perf.csv \
	SUMMARY_FILE=`pwd`/_build/test-summary.txt \
	JUNIT_FILE=`pwd`/_build/test-junit.xml \
	make -C testsuite/tests test THREADS=${THREADS}

# Inform Make that these are not actual files if they get deleted by other means
.PHONY: clean distclean test all configure
