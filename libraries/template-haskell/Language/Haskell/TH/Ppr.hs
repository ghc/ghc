{-# LANGUAGE Safe #-}
{-# LANGUAGE CPP #-}

{- | contains a prettyprinter for the
Template Haskell datatypes
-}
module Language.Haskell.TH.Ppr (
    appPrec,
    bar,
    bytesToString,
    commaSep,
    commaSepApplied,
    commaSepWith,
    fromTANormal,
    funPrec,
    hashParens,
    isStarT,
    isSymOcc,
    nestDepth,
    noPrec,
    opPrec,
    parensIf,
    pprBangType,
    pprBndrVis,
    pprBody,
    pprClause,
    pprCtxWith,
    pprCxt,
    pprExp,
    pprFields,
    pprFixity,
    pprForall,
    pprForall',
    pprForallVis,
    pprFunArgType,
    pprGadtRHS,
    pprGuarded,
    pprInfixExp,
    pprInfixT,
    pprLit,
    pprMatchPat,
    pprMaybeExp,
    pprNamespaceSpecifier,
    pprParendType,
    pprParendTypeArg,
    pprPat,
    pprPatSynSig,
    pprPatSynType,
    pprPrefixOcc,
    pprRecFields,
    pprStrictType,
    pprString,
    pprTyApp,
    pprTyLit,
    pprType,
    pprVarBangType,
    pprVarStrictType,
    ppr_bndrs,
    ppr_ctx_preds_with,
    ppr_cxt_preds,
    ppr_data,
    ppr_dec,
    ppr_deriv_clause,
    ppr_deriv_strategy,
    ppr_newtype,
    ppr_overlap,
    ppr_sig,
    ppr_tf_head,
    ppr_tySyn,
    ppr_type_data,
    ppr_typedef,
    pprint,
    qualPrec,
    quoteParens,
    semiSep,
    semiSepWith,
    sepWith,
    showtextl,
    sigPrec,
    split,
    unboxedSumBars,
    unopPrec,
    where_clause,
    ForallVisFlag (..),
    Ppr (..),
    PprFlag (..),
    Precedence,
    TypeArg (..),
)
where

#if MIN_VERSION_ghc_boot_th(9,13,0)
import GHC.Boot.TH.Ppr
#else
import GHC.Internal.TH.Ppr
#endif
