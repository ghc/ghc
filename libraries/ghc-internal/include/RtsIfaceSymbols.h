// See Note [RTS/ghc-internal interface].

#if defined(mingw32_HOST_OS)
CLOSURE(GHCziInternalziEventziWindows, processRemoteCompletion_closure)
#else
UNDEF_CLOSURE(GHCziInternalziEventziWindows, processRemoteCompletion_closure)
#endif
CLOSURE(GHCziInternalziTopHandler, runIO_closure)
CLOSURE(GHCziInternalziTopHandler, runNonIO_closure)
CLOSURE(GHCziInternalziTuple, Z0T_closure)
CLOSURE(GHCziInternalziTypes, True_closure)
CLOSURE(GHCziInternalziTypes, False_closure)
CLOSURE(GHCziInternalziPack, unpackCString_closure)
CLOSURE(GHCziInternalziWeakziFinalizze, runFinalizzerBatch_closure)
CLOSURE(GHCziInternalziIOziException, stackOverflow_closure)
CLOSURE(GHCziInternalziIOziException, heapOverflow_closure)
CLOSURE(GHCziInternalziIOziException, allocationLimitExceeded_closure)
CLOSURE(GHCziInternalziIOziException, blockedIndefinitelyOnMVar_closure)
CLOSURE(GHCziInternalziIOziException, blockedIndefinitelyOnSTM_closure)
CLOSURE(GHCziInternalziIOziException, cannotCompactFunction_closure)
CLOSURE(GHCziInternalziIOziException, cannotCompactPinned_closure)
CLOSURE(GHCziInternalziIOziException, cannotCompactMutable_closure)
CLOSURE(GHCziInternalziControlziExceptionziBase, nonTermination_closure)
CLOSURE(GHCziInternalziControlziExceptionziBase, nestedAtomically_closure)
CLOSURE(GHCziInternalziControlziExceptionziBase, noMatchingContinuationPrompt_closure)
CLOSURE(GHCziInternalziEventziThread, blockedOnBadFD_closure)
CLOSURE(GHCziInternalziConcziSync, runSparks_closure)
CLOSURE(GHCziInternalziConcziIO, ensureIOManagerIsRunning_closure)
CLOSURE(GHCziInternalziConcziIO, interruptIOManager_closure)
CLOSURE(GHCziInternalziConcziIO, ioManagerCapabilitiesChanged_closure)
CLOSURE(GHCziInternalziConcziSignal, runHandlersPtr_closure)
CLOSURE(GHCziInternalziTopHandler, flushStdHandles_closure)
CLOSURE(GHCziInternalziTopHandler, runMainIO_closure)
INFO_TBL(GHCziInternalziTypes, Czh_con_info)
INFO_TBL(GHCziInternalziTypes, Izh_con_info)
INFO_TBL(GHCziInternalziTypes, Fzh_con_info)
INFO_TBL(GHCziInternalziTypes, Dzh_con_info)
INFO_TBL(GHCziInternalziTypes, Wzh_con_info)
CLOSURE(GHCziInternalziPrimziPanic, absentSumFieldError_closure)
CLOSURE(GHCziInternalziAllocationLimitHandler, runAllocationLimitHandler_closure)
INFO_TBL(GHCziInternalziPtr, Ptr_con_info)
INFO_TBL(GHCziInternalziPtr, FunPtr_con_info)
INFO_TBL(GHCziInternalziInt, I8zh_con_info)
INFO_TBL(GHCziInternalziInt, I16zh_con_info)
INFO_TBL(GHCziInternalziInt, I32zh_con_info)
INFO_TBL(GHCziInternalziInt, I64zh_con_info)
INFO_TBL(GHCziInternalziWord, W8zh_con_info)
INFO_TBL(GHCziInternalziWord, W16zh_con_info)
INFO_TBL(GHCziInternalziWord, W32zh_con_info)
INFO_TBL(GHCziInternalziWord, W64zh_con_info)
INFO_TBL(GHCziInternalziStable, StablePtr_con_info)
CLOSURE(GHCziInternalziStackziCloneStack, StackSnapshot_closure)
CLOSURE(GHCziInternalziExceptionziType, divZZeroException_closure)
CLOSURE(GHCziInternalziExceptionziType, underflowException_closure)
CLOSURE(GHCziInternalziExceptionziType, overflowException_closure)
CLOSURE(GHCziInternalziCString, unpackCStringzh_closure)
INFO_TBL(GHCziInternalziCString, unpackCStringzh_info)
INFO_TBL(GHCziInternalziCString, unpackCStringUtf8zh_info)
#if defined(wasm32_HOST_ARCH)
CLOSURE(GHCziInternalziWasmziPrimziImports, raiseJSException_closure)
CLOSURE(GHCziInternalziWasmziPrim, JSVal_con_info)
CLOSURE(GHCziInternalziWasmziPrim, threadDelay_closure)
#else
UNDEF_CLOSURE(GHCziInternalziWasmziPrimziImports, raiseJSException_closure)
UNDEF_CLOSURE(GHCziInternalziWasmziPrim, JSVal_con_info)
UNDEF_CLOSURE(GHCziInternalziWasmziPrim, threadDelay_closure)
#endif
