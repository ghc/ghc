dnl
dnl Binary distribution configure script
dnl
#!/bin/sh
#

AC_INIT([The Glorious Glasgow Haskell Compilation System], [@ProjectVersion@], [glasgow-haskell-bugs@haskell.org], [ghc-AC_PACKAGE_VERSION])

dnl See /configure.ac for rationale.
AC_PREREQ([2.69])

AC_CONFIG_MACRO_DIRS([../m4])

dnl--------------------------------------------------------------------
dnl * Deal with arguments telling us gmp is somewhere odd
dnl--------------------------------------------------------------------

dnl Various things from the source distribution configure
bootstrap_target=@TargetPlatform@

bootstrap_llvm_target=@LlvmTarget@

TargetHasLibm=@TargetHasLibm@
AC_SUBST(TargetHasLibm)

UseLibffiForAdjustors=@UseLibffiForAdjustors@
AC_SUBST(UseLibffiForAdjustors)

GhcWithSMP=@GhcWithSMP@
AC_SUBST(GhcWithSMP)

# We have to run these unconditionally as FPTOOLS_SET_PLATFORMS_VARS wants the
# values it computes.
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

FPTOOLS_SET_PLATFORMS_VARS

# Requires FPTOOLS_SET_PLATFORMS_VARS to be run first.
FP_FIND_ROOT

# ToDo: if Stage1Only=YES, should be YES
CrossCompiling=NO
# If 'host' and 'target' differ, then this means we are building a cross-compiler.
if test "$target" != "$host" ; then
    CrossCompiling=YES
    cross_compiling=yes   # This tells configure that it can accept just 'target',
                          # otherwise you get
                          #   configure: error: cannot run C compiled programs.
                          #   If you meant to cross compile, use `--host'.
fi
LeadingUnderscore="@LeadingUnderscore@"
CrossCompilePrefix="@CrossCompilePrefix@"
TablesNextToCode="@TablesNextToCode@"

AC_SUBST(LeadingUnderscore)
AC_SUBST(CrossCompiling)
AC_SUBST(CrossCompilePrefix)
AC_SUBST(TablesNextToCode)

Unregisterised="@Unregisterised@"
AC_SUBST(Unregisterised)

#
dnl ** figure out how to do a BSD-ish install **
#
AC_PROG_INSTALL

#
dnl ** how to do symlinks **
#
AC_PROG_LN_S()

#
dnl ** Find the path to sed **
#
AC_PATH_PROG(SedCmd,gsed sed,sed)

dnl ** check for Python for testsuite driver
FIND_PYTHON
FP_PROG_FIND
if test -z "$FindCmd"
then
    AC_MSG_ERROR([find is required.])
fi

AC_ARG_ENABLE(distro-toolchain,
[AS_HELP_STRING([--enable-distro-toolchain],
                [Do not use bundled Windows toolchain binaries.])],
  [FP_CAPITALIZE_YES_NO(["$enableval"], [EnableDistroToolchain])],
  [EnableDistroToolchain=@SettingsUseDistroMINGW@]
)

if test "$HostOS" = "mingw32" -a "$EnableDistroToolchain" = "NO"; then
  FP_SETUP_WINDOWS_TOOLCHAIN([$hardtop/mingw/], [\$\$topdir/../mingw/])
fi


if test "$HostOS" = "darwin"; then
    # On darwin, we need to clean the extended attributes of the
    # ghc-toolchain binary and its dynamic library before we can execute it in the bindist
    # (this is a workaround for #24554, for the lack of proper notarisation #17418)

    # The following is the work around suggested by @carter in #17418 during
    # install time. This should help us with code signing issues by removing
    # extended attributes from all files.
    XATTR="${XATTR:-/usr/bin/xattr}"

    if test -e "${XATTR}"; then

        # Instead of cleaning the attributes of the ghc-toolchain binary only,
        # we clean them from all files in the bin/ and lib/ directories, as it additionally future
        # proofs running executables from the bindist besides ghc-toolchain at configure time, and
        # we can avoid figuring out the path to the ghc-toolchain dynlib specifically.
        "$XATTR" -rc bin/
        "$XATTR" -rc lib/

    fi
fi

AC_ARG_ENABLE(ghc-toolchain,
[AS_HELP_STRING([--enable-ghc-toolchain],
                [Whether to use the newer ghc-toolchain tool to configure ghc targets])],
  [FP_CAPITALIZE_YES_NO(["$enableval"], [EnableGhcToolchain])],
  [EnableGhcToolchain=NO]
)
AC_SUBST([EnableGhcToolchain])

AC_ARG_ENABLE(strict-ghc-toolchain-check,
[AS_HELP_STRING([--enable-strict-ghc-toolchain-check],
                [Whether to raise an error if the output of ghc-toolchain differs from configure])],
  [FP_CAPITALIZE_YES_NO(["$enableval"], [EnableStrictGhcToolchainCheck])],
  [EnableStrictGhcToolchainCheck=NO]
)
AC_SUBST([EnableStrictGhcToolchainCheck])

dnl ** Which gcc to use?
dnl --------------------------------------------------------------
AC_PROG_CC([gcc clang])
AC_PROG_CXX([g++ clang++ c++])
# Work around #24324
MOVE_TO_FLAGS([CC],[CFLAGS])
MOVE_TO_FLAGS([CXX],[CXXFLAGS])

dnl ** figure out how to invoke the C preprocessor (i.e. `gcc -E`)
AC_PROG_CPP

# --with-hs-cpp/--with-hs-cpp-flags
FP_HSCPP_CMD_WITH_ARGS(HaskellCPPCmd, HaskellCPPArgs)
AC_SUBST([HaskellCPPCmd])
AC_SUBST([HaskellCPPArgs])

# --with-js-cpp/--with-js-cpp-flags
FP_JSCPP_CMD_WITH_ARGS(JavaScriptCPPCmd, JavaScriptCPPArgs)
AC_SUBST([JavaScriptCPPCmd])
AC_SUBST([JavaScriptCPPArgs])

# --with-cmm-cpp/--with-cmm-cpp-flags
FP_CMM_CPP_CMD_WITH_ARGS([$CC], [CmmCPPCmd], [CmmCPPArgs], [CmmCPPSupportsG0])
AC_SUBST([CmmCPPCmd])
AC_SUBST([CmmCPPArgs])
AC_SUBST([CmmCPPSupportsG0])

FP_SET_CFLAGS_C99([CC],[CFLAGS],[CPPFLAGS])
dnl FP_SET_CFLAGS_C99([CC_STAGE0],[CONF_CC_OPTS_STAGE0],[CONF_CPP_OPTS_STAGE0])
FP_SET_CFLAGS_C99([CC],[CONF_CC_OPTS_STAGE1],[CONF_CPP_OPTS_STAGE1])
FP_SET_CFLAGS_C99([CC],[CONF_CC_OPTS_STAGE2],[CONF_CPP_OPTS_STAGE2])

dnl ** Which ld to use?
dnl --------------------------------------------------------------
FIND_LD([$target],[GccUseLdOpt])
FIND_MERGE_OBJECTS()
CONF_GCC_LINKER_OPTS_STAGE1="$CONF_GCC_LINKER_OPTS_STAGE1 $GccUseLdOpt"
CONF_GCC_LINKER_OPTS_STAGE2="$CONF_GCC_LINKER_OPTS_STAGE2 $GccUseLdOpt"
CFLAGS="$CFLAGS $GccUseLdOpt"

FP_PROG_LD_IS_GNU
FP_PROG_LD_NO_COMPACT_UNWIND
FP_PROG_LD_FILELIST
FP_PROG_LD_SINGLE_MODULE

dnl ** which strip to use?
dnl --------------------------------------------------------------
AC_CHECK_TARGET_TOOL([STRIP], [strip])
StripCmd="$STRIP"
AC_SUBST([StripCmd])

# Here is where we re-target which specific version of the LLVM
# tools we are looking for. In the past, GHC supported a number of
# versions of LLVM simultaneously, but that stopped working around
# 3.5/3.6 release of LLVM.
LlvmMinVersion=@LlvmMinVersion@
LlvmMaxVersion=@LlvmMaxVersion@

dnl ** Which LLVM llc to use?
dnl --------------------------------------------------------------
AC_ARG_VAR(LLC,[Use as the path to LLVM's llc [default=autodetect]])
FIND_LLVM_PROG([LLC], [llc], [$LlvmMinVersion], [$LlvmMaxVersion])
LlcCmd="$LLC"
AC_SUBST([LlcCmd])

dnl ** Which LLVM opt to use?
dnl --------------------------------------------------------------
AC_ARG_VAR(OPT,[Use as the path to LLVM's opt [default=autodetect]])
FIND_LLVM_PROG([OPT], [opt], [$LlvmMinVersion], [$LlvmMaxVersion])
OptCmd="$OPT"
AC_SUBST([OptCmd])

dnl ** Which LLVM assembler to use?
dnl --------------------------------------------------------------
AC_ARG_VAR(LLVMAS,[Use as the path to LLVM's assembler (typically clang) [default=autodetect]])
FIND_LLVM_PROG([LLVMAS], [clang], [$LlvmMinVersion], [$LlvmMaxVersion])
LlvmAsCmd="$LLVMAS"
AC_SUBST([LlvmAsCmd])

dnl We know that `clang` supports `--target` and it is necessary to pass it
dnl lest we see #25793.
if test -z "$LlvmAsFlags" ; then
    LlvmAsFlags="--target=$LlvmTarget"
fi
AC_SUBST([LlvmAsFlags])

dnl ** Check gcc version and flags we need to pass it **
FP_GCC_VERSION
FP_GCC_SUPPORTS_NO_PIE
FP_GCC_SUPPORTS_VIA_C_FLAGS

FPTOOLS_SET_C_LD_FLAGS([target],[CFLAGS],[LDFLAGS],[IGNORE_LINKER_LD_FLAGS],[CPPFLAGS])
FPTOOLS_SET_C_LD_FLAGS([build],[CONF_CC_OPTS_STAGE0],[CONF_GCC_LINKER_OPTS_STAGE0],[CONF_LD_LINKER_OPTS_STAGE0],[CONF_CPP_OPTS_STAGE0])
FPTOOLS_SET_C_LD_FLAGS([target],[CONF_CC_OPTS_STAGE1],[CONF_GCC_LINKER_OPTS_STAGE1],[CONF_LD_LINKER_OPTS_STAGE1],[CONF_CPP_OPTS_STAGE1])
# Stage 3 won't be supported by cross-compilation
FPTOOLS_SET_C_LD_FLAGS([target],[CONF_CC_OPTS_STAGE2],[CONF_GCC_LINKER_OPTS_STAGE2],[CONF_LD_LINKER_OPTS_STAGE2],[CONF_CPP_OPTS_STAGE2])

#-no_fixup_chains
FP_LD_NO_FIXUP_CHAINS([target], [LDFLAGS])
FP_LD_NO_FIXUP_CHAINS([build], [CONF_GCC_LINKER_OPTS_STAGE0])
FP_LD_NO_FIXUP_CHAINS([target], [CONF_GCC_LINKER_OPTS_STAGE1])
FP_LD_NO_FIXUP_CHAINS([target], [CONF_GCC_LINKER_OPTS_STAGE2])

#-no_warn_duplicate_libraries
FP_LD_NO_WARN_DUPLICATE_LIBRARIES([build], [CONF_GCC_LINKER_OPTS_STAGE0])
FP_LD_NO_WARN_DUPLICATE_LIBRARIES([target], [CONF_GCC_LINKER_OPTS_STAGE1])
FP_LD_NO_WARN_DUPLICATE_LIBRARIES([target], [CONF_GCC_LINKER_OPTS_STAGE2])

FP_MERGE_OBJECTS_SUPPORTS_RESPONSE_FILES

AC_SUBST(CONF_CC_OPTS_STAGE0)
AC_SUBST(CONF_CC_OPTS_STAGE1)
AC_SUBST(CONF_CC_OPTS_STAGE2)
AC_SUBST(CONF_GCC_LINKER_OPTS_STAGE0)
AC_SUBST(CONF_GCC_LINKER_OPTS_STAGE1)
AC_SUBST(CONF_GCC_LINKER_OPTS_STAGE2)
AC_SUBST(CONF_LD_LINKER_OPTS_STAGE0)
AC_SUBST(CONF_LD_LINKER_OPTS_STAGE1)
AC_SUBST(CONF_LD_LINKER_OPTS_STAGE2)
AC_SUBST(CONF_CPP_OPTS_STAGE0)
AC_SUBST(CONF_CPP_OPTS_STAGE1)
AC_SUBST(CONF_CPP_OPTS_STAGE2)

dnl Identify C++ standard library flavour and location
FP_FIND_CXX_STD_LIB
AC_CONFIG_FILES([mk/system-cxx-std-lib-1.0.conf])

dnl ** Which otool to use on macOS
dnl --------------------------------------------------------------
AC_CHECK_TARGET_TOOL([OTOOL], [otool])
OtoolCmd="$OTOOL"
AC_SUBST(OtoolCmd)

dnl ** Which install_name_tool to use on macOS
dnl --------------------------------------------------------------
AC_CHECK_TARGET_TOOL([INSTALL_NAME_TOOL], [install_name_tool])
InstallNameToolCmd="$INSTALL_NAME_TOOL"
AC_SUBST(InstallNameToolCmd)

# Check that we have the same emsdk version as the one we were built with.
ConfiguredEmsdkVersion=@ConfiguredEmsdkVersion@
EMSDK_VERSION("", "", ${ConfiguredEmsdkVersion})

dnl ** Set up the variables for the platform in the settings file.
dnl May need to use gcc to find platform details.
dnl --------------------------------------------------------------
FPTOOLS_SET_HASKELL_PLATFORM_VARS([Build])

FPTOOLS_SET_HASKELL_PLATFORM_VARS([Host])
AC_SUBST(HaskellHostArch)
AC_SUBST(HaskellHostOs)

FPTOOLS_SET_HASKELL_PLATFORM_VARS([Target])
AC_SUBST(HaskellTargetArch)
AC_SUBST(HaskellTargetOs)

GHC_SUBSECTIONS_VIA_SYMBOLS
AC_SUBST(TargetHasSubsectionsViaSymbols)

GHC_IDENT_DIRECTIVE
AC_SUBST(TargetHasIdentDirective)

GHC_GNU_NONEXEC_STACK
AC_SUBST(TargetHasGnuNonexecStack)

GHC_LLVM_TARGET_SET_VAR
AC_SUBST(LlvmTarget)

dnl ** See whether cc supports --target=<triple> and set
dnl CONF_CC_OPTS_STAGE[12] accordingly.
FP_CC_SUPPORTS_TARGET([$CC], [CONF_CC_OPTS_STAGE1], [CONF_CXX_OPTS_STAGE1])
FP_CC_SUPPORTS_TARGET([$CC], [CONF_CC_OPTS_STAGE2], [CONF_CXX_OPTS_STAGE2])

FP_PROG_CC_LINKER_TARGET([$CC], [CONF_CC_OPTS_STAGE1], [CONF_GCC_LINKER_OPTS_STAGE1])
FP_PROG_CC_LINKER_TARGET([$CC], [CONF_CC_OPTS_STAGE2], [CONF_GCC_LINKER_OPTS_STAGE2])

dnl Pass -Qunused-arguments or otherwise GHC will have very noisy invocations of Clang
FP_CC_IGNORE_UNUSED_ARGS([$CC], [CONF_CC_OPTS_STAGE1])
FP_CC_IGNORE_UNUSED_ARGS([$CC], [CONF_CC_OPTS_STAGE2])

# CPP, CPPFLAGS
# --with-cpp/-with-cpp-flags
dnl Note that we must do this after setting and using the C99 CPPFLAGS, or
dnl otherwise risk trying to configure the C99 and LD flags using -E as a CPPFLAG
FP_CPP_CMD_WITH_ARGS([$CC_STAGE0],[CPPCmd_STAGE0],[CONF_CPP_OPTS_STAGE0])
FP_CPP_CMD_WITH_ARGS([$CC],[CPPCmd],[CONF_CPP_OPTS_STAGE1])
FP_CPP_CMD_WITH_ARGS([$CC],[CPPCmd],[CONF_CPP_OPTS_STAGE2])
AC_SUBST([CPPCmd_STAGE0])
AC_SUBST([CPPCmd])

dnl TargetWordSize for settings file
AC_CHECK_SIZEOF(void *, 4)
if test "x$ac_cv_sizeof_void_p" = "x0"; then
    AC_MSG_ERROR([Failed to determine machine word size. Does your toolchain actually work?])
fi
dnl Check that the toolchain we have is consistent with what the compiler expects
if test "x$ac_cv_sizeof_void_p" != "x@TargetWordSize@"; then
    AC_MSG_ERROR([This binary distribution produces binaries for a target with
                  word size of @TargetWordSize@, but your target toolchain produces binaries
                  with a word size of $ac_cv_sizeof_void_p. Are you sure your toolchain
                  targets the intended target platform of this compiler?])
fi
TargetWordSize=$ac_cv_sizeof_void_p
AC_SUBST(TargetWordSize)

dnl TargetWordBigEndian for settings file
AC_C_BIGENDIAN([TargetWordBigEndian=YES],[TargetWordBigEndian=NO])
dnl Check that the toolchain we have is consistent with what the compiler expects
if test "x$TargetWordBigEndian" != "x@TargetWordBigEndian@"; then
    AC_MSG_ERROR([This binary distribution produces binaries for a target with
                  a different byte order than your target toolchain.
                  Are you sure your toolchain targets the intended target platform
                  of this compiler?])
fi
AC_SUBST(TargetWordBigEndian)

#
dnl ** how to invoke `ar' and `ranlib'
#
FP_PROG_AR_SUPPORTS_ATFILE
FP_PROG_AR_SUPPORTS_DASH_L
FP_PROG_AR_NEEDS_RANLIB
RanlibCmd="$RANLIB"
AC_SUBST([RanlibCmd])

dnl ** Have libdw?
dnl --------------------------------------------------------------
dnl Check for a usable version of libdw/elfutils
dnl Currently we need 0.158 or newer.
UseLibdw=@UseLibdw@
if test "x$UseLibdw" = "xYES" ; then
  AC_CHECK_LIB(dw, dwfl_attach_state,
    [UseLibdw=YES],
    [AC_MSG_ERROR([Binary distribution was built with libdw support but target system doesn't have supported libdw version (needs at least 0.158)])]
  )
fi
AC_SUBST(UseLibdw)

dnl What is the version of the base library which we are going to use?
dnl The user can use BASE_UNIT_ID at install time to point the compiler to
dnl link against a different base package by default.
dnl If the package is unavailable it will simply not be linked against.
BaseUnitId=@BaseUnitId@
if test -n "$BASE_UNIT_ID"; then
  BaseUnitId="$BASE_UNIT_ID"
fi

AC_SUBST(BaseUnitId)

FP_SETTINGS

# We get caught by
#     http://savannah.gnu.org/bugs/index.php?1516
#     $(eval ...) inside conditionals causes errors
# with make 3.80, so warn the user if it looks like they're about to
# try to use it.
# We would use "grep -q" here, but Solaris's grep doesn't support it.
checkMake380() {
    if $1 --version 2>&1 | head -1 | grep 'GNU Make 3\.80' > /dev/null
    then
        echo
        echo "WARNING: It looks like \"$1\" is GNU make 3.80."
        echo "This version cannot be used to build GHC."
        echo "Please use GNU make >= 3.81."
    fi
}

checkMake380 make
checkMake380 gmake

# Toolchain target files
FIND_GHC_TOOLCHAIN_BIN([YES])
PREP_TARGET_FILE
FIND_GHC_TOOLCHAIN([.])

AC_CONFIG_FILES([config.mk])
AC_CONFIG_FILES([default.host.target])
AC_CONFIG_FILES([default.target])
AC_CONFIG_FILES([mk/hsc2hs])
AC_OUTPUT

VALIDATE_GHC_TOOLCHAIN([default.target],[default.target.ghc-toolchain])

rm -Rf acargs acghc-toolchain actmp-ghc-toolchain

echo "****************************************************"
echo "Configuration done, ready to 'make install'"
echo "(see README and INSTALL files for more info.)"
echo "****************************************************"
