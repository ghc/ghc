#!/usr/bin/perl -w

use strict;
use Cwd;

my $defaultrepo;
my @packages;
my $verbose = 2;
my $ignore_failure = 0;
my $want_remote_repo = 0;
my $checked_out_flag = 0;
my $get_mode;

# Flags specific to a particular command
my $local_repo_unnecessary = 0;

my %tags;

# Figure out where to get the other repositories from.
sub getrepo {
    my $basedir = ".";
    my $repo;

    if (defined($defaultrepo)) {
        $repo = $defaultrepo;
        chomp $repo;
    } else {
        # Figure out where to get the other repositories from,
        # based on where this GHC repo came from.
        my $branch = `git branch | grep "\* " | sed "s/^\* //"`; chomp $branch;
        my $remote = `git config branch.$branch.remote`;         chomp $remote;
        $repo = `git config remote.$remote.url`;       chomp $repo;
    }

    my $repo_base;
    my $checked_out_tree;

    if ($repo =~ /^...*:/) {
        # HTTP or SSH
        # Above regex says "at least two chars before the :", to avoid
        # catching Win32 drives ("C:\").
        $repo_base = $repo;

        # --checked-out is needed if you want to use a checked-out repo
        # over SSH or HTTP
        if ($checked_out_flag) {
            $checked_out_tree = 1;
        } else {
            $checked_out_tree = 0;
        }

        # Don't drop the last part of the path if specified with -r, as
        # it expects repos of the form:
        #
        #   http://darcs.haskell.org
        #
        # rather than
        #   
        #   http://darcs.haskell.org/ghc
        #
        if (!$defaultrepo) {
            $repo_base =~ s#/[^/]+/?$##;
        }
    }
    elsif ($repo =~ /^\/|\.\.\/|.:(\/|\\)/) {
        # Local filesystem, either absolute or relative path
        # (assumes a checked-out tree):
        $repo_base = $repo;
        $checked_out_tree = 1;
    }
    else {
        die "Couldn't work out repo";
    }

    return $repo_base, $checked_out_tree;
}

sub parsePackages {
    my @repos;
    my $lineNum;

    open IN, "< packages" or die "Can't open packages file";
    @repos = <IN>;
    close IN;

    @packages = ();
    $lineNum = 0;
    foreach (@repos) {
        chomp;
        $lineNum++;
        if (/^([^# ]+) +([^ ]+) +([^ ]+) +([^ ]+) +([^ ]+)$/) {
            my %line;
            $line{"localpath"}  = $1;
            $line{"tag"}        = $2;
            $line{"remotepath"} = $3;
            $line{"vcs"}        = $4;
            $line{"upstream"}   = $5;
            push @packages, \%line;
        }
        elsif (! /^(#.*)?$/) {
            die "Bad content on line $lineNum of packages file: $_";
        }
    }
}

sub message {
    if ($verbose >= 2) {
        print "@_\n";
    }
}

sub warning {
    if ($verbose >= 1) {
        print "warning: @_\n";
    }
}

sub scm {
    my $dir = shift;
    my $scm = shift;
    my $pwd;

    if ($dir eq '.') {
        message "== running $scm @_";
    } else {
        message "== $dir: running $scm @_";
        $pwd = getcwd();
        chdir($dir);
    }

    system ($scm, @_) == 0
        or $ignore_failure
        or die "$scm failed: $?";

    if ($dir ne '.') {
        chdir($pwd);
    }
}

sub repoexists {
    my ($scm, $localpath) = @_;
    
    if ($scm eq "darcs") {
        -d "$localpath/_darcs";
    }
    else {
        -d "$localpath/.git";
    }
}

sub scmall {
    my $command = shift;
    
    my $localpath;
    my $tag;
    my $remotepath;
    my $scm;
    my $upstream;
    my $line;

    my $path;
    my $wd_before = getcwd;

    my @scm_args;

    my $pwd;

    my ($repo_base, $checked_out_tree) = getrepo();

    my $is_github_repo = $repo_base =~ m/(git@|git:\/\/)github.com/;

    parsePackages;

    for $line (@packages) {

            $localpath  = $$line{"localpath"};
            $tag        = $$line{"tag"};
            $remotepath = $$line{"remotepath"};
            $scm        = $$line{"vcs"};
            $upstream   = $$line{"upstream"};

            # We can't create directories on GitHub, so we translate
            # "package/foo" into "package-foo".
            if ($is_github_repo) {
                $remotepath =~ s/\//-/;
            }

            # Check the SCM is OK as early as possible
            die "Unknown SCM: $scm" if (($scm ne "darcs") and ($scm ne "git"));

            # Work out the path for this package in the repo we pulled from
            if ($checked_out_tree) {
                $path = "$repo_base/$localpath";
            }
            else {
                $path = "$repo_base/$remotepath";
            }

            # Work out the arguments we should give to the SCM
            if ($command =~ /^(?:w|wh|wha|what|whats|whatsn|whatsne|whatsnew)$/) {
                @scm_args = (($scm eq "darcs" and "whatsnew")
                          or ($scm eq "git" and "status"));
                
                # Hack around 'darcs whatsnew' failing if there are no changes
                $ignore_failure = 1;
            }
            elsif ($command =~ /^(?:pus|push)$/) {
                @scm_args = "push";
                $want_remote_repo = 1;
            }
            elsif ($command =~ /^(?:pul|pull)$/) {
                @scm_args = "pull";
                $want_remote_repo = 1;
                # Q: should we append the -a argument for darcs repos?
            }
            elsif ($command =~ /^(?:g|ge|get)$/) {
                # Skip any repositories we have not included the tag for
                if (not defined($tags{$tag})) {
                    next;
                }
                
                if (-d $localpath) {
                    warning("$localpath already present; omitting") if $localpath ne ".";
                    next;
                }
                
                # The first time round the loop, default the get-mode
                if (not defined($get_mode)) {
                    warning("adding --partial, to override use --complete");
                    $get_mode = "--partial";
                }
                
                # The only command that doesn't need a repo
                $local_repo_unnecessary = 1;
                
                if ($scm eq "darcs") {
                    # Note: we can only use the get-mode with darcs for now
                    @scm_args = ("get", $get_mode, $path, $localpath);
                }
                else {
                    @scm_args = ("clone", $path, $localpath);
                }
            }
            elsif ($command =~ /^(?:s|se|sen|send)$/) {
                @scm_args = (($scm eq "darcs" and "send")
                          or ($scm eq "git" and "send-email"));
                $want_remote_repo = 1;
            }
            elsif ($command =~ /^set-origin$/) {
                @scm_args = ("remote", "set-url", "origin", $path);
            }
            elsif ($command =~ /^fetch$/) {
                @scm_args = ("fetch", "origin");
            }
            elsif ($command =~ /^new$/) {
                @scm_args = ("log", "origin..");
            }
            else {
                die "Unknown command: $command";
            }
            
            # Actually execute the command
            if (repoexists ($scm, $localpath)) {
                if ($want_remote_repo) {
                    if ($scm eq "darcs") {
                        scm (".", $scm, @scm_args, @_, "--repodir=$localpath", $path);
                    } else {
                        # git pull doesn't like to be used with --work-dir
                        # I couldn't find an alternative to chdir() here
                        scm ($localpath, $scm, @scm_args, @_, $path, "master");
                    }
                } else {
                    # git status *must* be used with --work-dir, if we don't chdir() to the dir
                    scm ($localpath, $scm, @scm_args, @_);
                }
            }
            elsif ($local_repo_unnecessary) {
                # Don't bother to change directory in this case
                scm (".", $scm, @scm_args, @_);
            }
            elsif ($tag eq "") {
                message "== Required repo $localpath is missing! Skipping";
            }
            else {
                message "== $localpath repo not present; skipping";
            }
    }
}

sub main {
    if (! -d ".git" || ! -d "compiler") {
        die "error: sync-all must be run from the top level of the ghc tree."
    }

    $tags{"-"} = 1;
    $tags{"dph"} = 1;

    while ($#_ ne -1) {
        my $arg = shift;
        # We handle -q here as well as lower down as we need to skip over it
        # if it comes before the source-control command
        if ($arg eq "-q") {
            $verbose = 1;
        }
        elsif ($arg eq "-s") {
            $verbose = 0;
        }
        elsif ($arg eq "-r") {
            $defaultrepo = shift;
        }
        elsif ($arg eq "--ignore-failure") {
            $ignore_failure = 1;
        }
        elsif ($arg eq "--complete" || $arg eq "--partial") {
            $get_mode = $arg;
        }
        # Use --checked-out if the remote repos are a checked-out tree,
        # rather than the master trees.
        elsif ($arg eq "--checked-out") {
            $checked_out_flag = 1;
        }
        # --<tag> says we grab the libs tagged 'tag' with
        # 'get'. It has no effect on the other commands.
        elsif ($arg =~ m/^--/) {
            $arg =~ s/^--//;
            $tags{$arg} = 1;
        }
        else {
            unshift @_, $arg;
            if (grep /^-q$/, @_) {
                $verbose = 1;
            }
            last;
        }
    }

    if ($#_ eq -1) {
        # Get the built in help
        my $help = <<END;
What do you want to do?
Supported commands:

 * whatsnew
 * push
 * pull
 * get, with options:
  * --<package-tag>
  * --complete
  * --partial
 * fetch
 * send
 * set-origin
 * new

Available package-tags are:
END

        # Collect all the tags in the packages file
        my %available_tags;
        open IN, "< packages" or die "Can't open packages file";
        while (<IN>) {
            chomp;
            if (/^([^# ]+) +(?:([^ ]+) +)?([^ ]+) +([^ ]+)/) {
                if (defined($2) && $2 ne "-") {
                    $available_tags{$2} = 1;
                }
            }
            elsif (! /^(#.*)?$/) {
                die "Bad line: $_";
            }
        }
        close IN;
        
        # Show those tags and the help text
        my @available_tags = keys %available_tags;
        print "$help@available_tags\n";
        exit 1;
    }
    else {
        # Give the command and rest of the arguments to the main loop
        scmall @_;
    }
}

main(@ARGV);

